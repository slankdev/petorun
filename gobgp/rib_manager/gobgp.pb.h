// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gobgp.proto

#ifndef PROTOBUF_gobgp_2eproto__INCLUDED
#define PROTOBUF_gobgp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_gobgp_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[170];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGetNeighborRequestImpl();
void InitDefaultsGetNeighborRequest();
void InitDefaultsGetNeighborResponseImpl();
void InitDefaultsGetNeighborResponse();
void InitDefaultsArgumentsImpl();
void InitDefaultsArguments();
void InitDefaultsAddPathRequestImpl();
void InitDefaultsAddPathRequest();
void InitDefaultsAddPathResponseImpl();
void InitDefaultsAddPathResponse();
void InitDefaultsDeletePathRequestImpl();
void InitDefaultsDeletePathRequest();
void InitDefaultsDeletePathResponseImpl();
void InitDefaultsDeletePathResponse();
void InitDefaultsAddNeighborRequestImpl();
void InitDefaultsAddNeighborRequest();
void InitDefaultsAddNeighborResponseImpl();
void InitDefaultsAddNeighborResponse();
void InitDefaultsDeleteNeighborRequestImpl();
void InitDefaultsDeleteNeighborRequest();
void InitDefaultsDeleteNeighborResponseImpl();
void InitDefaultsDeleteNeighborResponse();
void InitDefaultsResetNeighborRequestImpl();
void InitDefaultsResetNeighborRequest();
void InitDefaultsResetNeighborResponseImpl();
void InitDefaultsResetNeighborResponse();
void InitDefaultsSoftResetNeighborRequestImpl();
void InitDefaultsSoftResetNeighborRequest();
void InitDefaultsSoftResetNeighborResponseImpl();
void InitDefaultsSoftResetNeighborResponse();
void InitDefaultsShutdownNeighborRequestImpl();
void InitDefaultsShutdownNeighborRequest();
void InitDefaultsShutdownNeighborResponseImpl();
void InitDefaultsShutdownNeighborResponse();
void InitDefaultsEnableNeighborRequestImpl();
void InitDefaultsEnableNeighborRequest();
void InitDefaultsEnableNeighborResponseImpl();
void InitDefaultsEnableNeighborResponse();
void InitDefaultsDisableNeighborRequestImpl();
void InitDefaultsDisableNeighborRequest();
void InitDefaultsDisableNeighborResponseImpl();
void InitDefaultsDisableNeighborResponse();
void InitDefaultsEnableMrtRequestImpl();
void InitDefaultsEnableMrtRequest();
void InitDefaultsEnableMrtResponseImpl();
void InitDefaultsEnableMrtResponse();
void InitDefaultsDisableMrtRequestImpl();
void InitDefaultsDisableMrtRequest();
void InitDefaultsDisableMrtResponseImpl();
void InitDefaultsDisableMrtResponse();
void InitDefaultsInjectMrtRequestImpl();
void InitDefaultsInjectMrtRequest();
void InitDefaultsInjectMrtResponseImpl();
void InitDefaultsInjectMrtResponse();
void InitDefaultsAddBmpRequestImpl();
void InitDefaultsAddBmpRequest();
void InitDefaultsAddBmpResponseImpl();
void InitDefaultsAddBmpResponse();
void InitDefaultsDeleteBmpRequestImpl();
void InitDefaultsDeleteBmpRequest();
void InitDefaultsDeleteBmpResponseImpl();
void InitDefaultsDeleteBmpResponse();
void InitDefaultsMonitorRibRequestImpl();
void InitDefaultsMonitorRibRequest();
void InitDefaultsRPKIConfImpl();
void InitDefaultsRPKIConf();
void InitDefaultsRPKIStateImpl();
void InitDefaultsRPKIState();
void InitDefaultsRpkiImpl();
void InitDefaultsRpki();
void InitDefaultsGetRpkiRequestImpl();
void InitDefaultsGetRpkiRequest();
void InitDefaultsGetRpkiResponseImpl();
void InitDefaultsGetRpkiResponse();
void InitDefaultsAddRpkiRequestImpl();
void InitDefaultsAddRpkiRequest();
void InitDefaultsAddRpkiResponseImpl();
void InitDefaultsAddRpkiResponse();
void InitDefaultsDeleteRpkiRequestImpl();
void InitDefaultsDeleteRpkiRequest();
void InitDefaultsDeleteRpkiResponseImpl();
void InitDefaultsDeleteRpkiResponse();
void InitDefaultsEnableRpkiRequestImpl();
void InitDefaultsEnableRpkiRequest();
void InitDefaultsEnableRpkiResponseImpl();
void InitDefaultsEnableRpkiResponse();
void InitDefaultsDisableRpkiRequestImpl();
void InitDefaultsDisableRpkiRequest();
void InitDefaultsDisableRpkiResponseImpl();
void InitDefaultsDisableRpkiResponse();
void InitDefaultsResetRpkiRequestImpl();
void InitDefaultsResetRpkiRequest();
void InitDefaultsResetRpkiResponseImpl();
void InitDefaultsResetRpkiResponse();
void InitDefaultsSoftResetRpkiRequestImpl();
void InitDefaultsSoftResetRpkiRequest();
void InitDefaultsSoftResetRpkiResponseImpl();
void InitDefaultsSoftResetRpkiResponse();
void InitDefaultsEnableZebraRequestImpl();
void InitDefaultsEnableZebraRequest();
void InitDefaultsEnableZebraResponseImpl();
void InitDefaultsEnableZebraResponse();
void InitDefaultsGetVrfRequestImpl();
void InitDefaultsGetVrfRequest();
void InitDefaultsGetVrfResponseImpl();
void InitDefaultsGetVrfResponse();
void InitDefaultsAddVrfRequestImpl();
void InitDefaultsAddVrfRequest();
void InitDefaultsAddVrfResponseImpl();
void InitDefaultsAddVrfResponse();
void InitDefaultsDeleteVrfRequestImpl();
void InitDefaultsDeleteVrfRequest();
void InitDefaultsDeleteVrfResponseImpl();
void InitDefaultsDeleteVrfResponse();
void InitDefaultsGetDefinedSetRequestImpl();
void InitDefaultsGetDefinedSetRequest();
void InitDefaultsGetDefinedSetResponseImpl();
void InitDefaultsGetDefinedSetResponse();
void InitDefaultsAddDefinedSetRequestImpl();
void InitDefaultsAddDefinedSetRequest();
void InitDefaultsAddDefinedSetResponseImpl();
void InitDefaultsAddDefinedSetResponse();
void InitDefaultsDeleteDefinedSetRequestImpl();
void InitDefaultsDeleteDefinedSetRequest();
void InitDefaultsDeleteDefinedSetResponseImpl();
void InitDefaultsDeleteDefinedSetResponse();
void InitDefaultsReplaceDefinedSetRequestImpl();
void InitDefaultsReplaceDefinedSetRequest();
void InitDefaultsReplaceDefinedSetResponseImpl();
void InitDefaultsReplaceDefinedSetResponse();
void InitDefaultsGetStatementRequestImpl();
void InitDefaultsGetStatementRequest();
void InitDefaultsGetStatementResponseImpl();
void InitDefaultsGetStatementResponse();
void InitDefaultsAddStatementRequestImpl();
void InitDefaultsAddStatementRequest();
void InitDefaultsAddStatementResponseImpl();
void InitDefaultsAddStatementResponse();
void InitDefaultsDeleteStatementRequestImpl();
void InitDefaultsDeleteStatementRequest();
void InitDefaultsDeleteStatementResponseImpl();
void InitDefaultsDeleteStatementResponse();
void InitDefaultsReplaceStatementRequestImpl();
void InitDefaultsReplaceStatementRequest();
void InitDefaultsReplaceStatementResponseImpl();
void InitDefaultsReplaceStatementResponse();
void InitDefaultsGetPolicyRequestImpl();
void InitDefaultsGetPolicyRequest();
void InitDefaultsGetPolicyResponseImpl();
void InitDefaultsGetPolicyResponse();
void InitDefaultsAddPolicyRequestImpl();
void InitDefaultsAddPolicyRequest();
void InitDefaultsAddPolicyResponseImpl();
void InitDefaultsAddPolicyResponse();
void InitDefaultsDeletePolicyRequestImpl();
void InitDefaultsDeletePolicyRequest();
void InitDefaultsDeletePolicyResponseImpl();
void InitDefaultsDeletePolicyResponse();
void InitDefaultsReplacePolicyRequestImpl();
void InitDefaultsReplacePolicyRequest();
void InitDefaultsReplacePolicyResponseImpl();
void InitDefaultsReplacePolicyResponse();
void InitDefaultsGetPolicyAssignmentRequestImpl();
void InitDefaultsGetPolicyAssignmentRequest();
void InitDefaultsGetPolicyAssignmentResponseImpl();
void InitDefaultsGetPolicyAssignmentResponse();
void InitDefaultsAddPolicyAssignmentRequestImpl();
void InitDefaultsAddPolicyAssignmentRequest();
void InitDefaultsAddPolicyAssignmentResponseImpl();
void InitDefaultsAddPolicyAssignmentResponse();
void InitDefaultsDeletePolicyAssignmentRequestImpl();
void InitDefaultsDeletePolicyAssignmentRequest();
void InitDefaultsDeletePolicyAssignmentResponseImpl();
void InitDefaultsDeletePolicyAssignmentResponse();
void InitDefaultsReplacePolicyAssignmentRequestImpl();
void InitDefaultsReplacePolicyAssignmentRequest();
void InitDefaultsReplacePolicyAssignmentResponseImpl();
void InitDefaultsReplacePolicyAssignmentResponse();
void InitDefaultsGetServerRequestImpl();
void InitDefaultsGetServerRequest();
void InitDefaultsGetServerResponseImpl();
void InitDefaultsGetServerResponse();
void InitDefaultsStartServerRequestImpl();
void InitDefaultsStartServerRequest();
void InitDefaultsStartServerResponseImpl();
void InitDefaultsStartServerResponse();
void InitDefaultsStopServerRequestImpl();
void InitDefaultsStopServerRequest();
void InitDefaultsStopServerResponseImpl();
void InitDefaultsStopServerResponse();
void InitDefaultsRPKIValidationImpl();
void InitDefaultsRPKIValidation();
void InitDefaultsPathImpl();
void InitDefaultsPath();
void InitDefaultsDestinationImpl();
void InitDefaultsDestination();
void InitDefaultsTableImpl();
void InitDefaultsTable();
void InitDefaultsGetRibRequestImpl();
void InitDefaultsGetRibRequest();
void InitDefaultsGetRibResponseImpl();
void InitDefaultsGetRibResponse();
void InitDefaultsTableLookupPrefixImpl();
void InitDefaultsTableLookupPrefix();
void InitDefaultsGetPathRequestImpl();
void InitDefaultsGetPathRequest();
void InitDefaultsValidateRibRequestImpl();
void InitDefaultsValidateRibRequest();
void InitDefaultsValidateRibResponseImpl();
void InitDefaultsValidateRibResponse();
void InitDefaultsPeerImpl();
void InitDefaultsPeer();
void InitDefaultsApplyPolicyImpl();
void InitDefaultsApplyPolicy();
void InitDefaultsPrefixLimitImpl();
void InitDefaultsPrefixLimit();
void InitDefaultsPeerConfImpl();
void InitDefaultsPeerConf();
void InitDefaultsEbgpMultihopImpl();
void InitDefaultsEbgpMultihop();
void InitDefaultsRouteReflectorImpl();
void InitDefaultsRouteReflector();
void InitDefaultsPeerStateImpl();
void InitDefaultsPeerState();
void InitDefaultsMessagesImpl();
void InitDefaultsMessages();
void InitDefaultsMessageImpl();
void InitDefaultsMessage();
void InitDefaultsQueuesImpl();
void InitDefaultsQueues();
void InitDefaultsTimersImpl();
void InitDefaultsTimers();
void InitDefaultsTimersConfigImpl();
void InitDefaultsTimersConfig();
void InitDefaultsTimersStateImpl();
void InitDefaultsTimersState();
void InitDefaultsTransportImpl();
void InitDefaultsTransport();
void InitDefaultsRouteServerImpl();
void InitDefaultsRouteServer();
void InitDefaultsGracefulRestartImpl();
void InitDefaultsGracefulRestart();
void InitDefaultsMpGracefulRestartConfigImpl();
void InitDefaultsMpGracefulRestartConfig();
void InitDefaultsMpGracefulRestartStateImpl();
void InitDefaultsMpGracefulRestartState();
void InitDefaultsMpGracefulRestartImpl();
void InitDefaultsMpGracefulRestart();
void InitDefaultsAfiSafiConfigImpl();
void InitDefaultsAfiSafiConfig();
void InitDefaultsAfiSafiStateImpl();
void InitDefaultsAfiSafiState();
void InitDefaultsRouteSelectionOptionsConfigImpl();
void InitDefaultsRouteSelectionOptionsConfig();
void InitDefaultsRouteSelectionOptionsStateImpl();
void InitDefaultsRouteSelectionOptionsState();
void InitDefaultsRouteSelectionOptionsImpl();
void InitDefaultsRouteSelectionOptions();
void InitDefaultsUseMultiplePathsConfigImpl();
void InitDefaultsUseMultiplePathsConfig();
void InitDefaultsUseMultiplePathsStateImpl();
void InitDefaultsUseMultiplePathsState();
void InitDefaultsEbgpConfigImpl();
void InitDefaultsEbgpConfig();
void InitDefaultsEbgpStateImpl();
void InitDefaultsEbgpState();
void InitDefaultsEbgpImpl();
void InitDefaultsEbgp();
void InitDefaultsIbgpConfigImpl();
void InitDefaultsIbgpConfig();
void InitDefaultsIbgpStateImpl();
void InitDefaultsIbgpState();
void InitDefaultsIbgpImpl();
void InitDefaultsIbgp();
void InitDefaultsUseMultiplePathsImpl();
void InitDefaultsUseMultiplePaths();
void InitDefaultsRouteTargetMembershipConfigImpl();
void InitDefaultsRouteTargetMembershipConfig();
void InitDefaultsRouteTargetMembershipStateImpl();
void InitDefaultsRouteTargetMembershipState();
void InitDefaultsRouteTargetMembershipImpl();
void InitDefaultsRouteTargetMembership();
void InitDefaultsLongLivedGracefulRestartConfigImpl();
void InitDefaultsLongLivedGracefulRestartConfig();
void InitDefaultsLongLivedGracefulRestartStateImpl();
void InitDefaultsLongLivedGracefulRestartState();
void InitDefaultsLongLivedGracefulRestartImpl();
void InitDefaultsLongLivedGracefulRestart();
void InitDefaultsAfiSafiImpl();
void InitDefaultsAfiSafi();
void InitDefaultsAddPathsConfigImpl();
void InitDefaultsAddPathsConfig();
void InitDefaultsAddPathsStateImpl();
void InitDefaultsAddPathsState();
void InitDefaultsAddPathsImpl();
void InitDefaultsAddPaths();
void InitDefaultsPrefixImpl();
void InitDefaultsPrefix();
void InitDefaultsDefinedSetImpl();
void InitDefaultsDefinedSet();
void InitDefaultsMatchSetImpl();
void InitDefaultsMatchSet();
void InitDefaultsAsPathLengthImpl();
void InitDefaultsAsPathLength();
void InitDefaultsConditionsImpl();
void InitDefaultsConditions();
void InitDefaultsCommunityActionImpl();
void InitDefaultsCommunityAction();
void InitDefaultsMedActionImpl();
void InitDefaultsMedAction();
void InitDefaultsAsPrependActionImpl();
void InitDefaultsAsPrependAction();
void InitDefaultsNexthopActionImpl();
void InitDefaultsNexthopAction();
void InitDefaultsLocalPrefActionImpl();
void InitDefaultsLocalPrefAction();
void InitDefaultsActionsImpl();
void InitDefaultsActions();
void InitDefaultsStatementImpl();
void InitDefaultsStatement();
void InitDefaultsPolicyImpl();
void InitDefaultsPolicy();
void InitDefaultsPolicyAssignmentImpl();
void InitDefaultsPolicyAssignment();
void InitDefaultsRoaImpl();
void InitDefaultsRoa();
void InitDefaultsGetRoaRequestImpl();
void InitDefaultsGetRoaRequest();
void InitDefaultsGetRoaResponseImpl();
void InitDefaultsGetRoaResponse();
void InitDefaultsVrfImpl();
void InitDefaultsVrf();
void InitDefaultsGlobalImpl();
void InitDefaultsGlobal();
void InitDefaultsTableInfoImpl();
void InitDefaultsTableInfo();
void InitDefaultsGetRibInfoRequestImpl();
void InitDefaultsGetRibInfoRequest();
void InitDefaultsGetRibInfoResponseImpl();
void InitDefaultsGetRibInfoResponse();
inline void InitDefaults() {
  InitDefaultsGetNeighborRequest();
  InitDefaultsGetNeighborResponse();
  InitDefaultsArguments();
  InitDefaultsAddPathRequest();
  InitDefaultsAddPathResponse();
  InitDefaultsDeletePathRequest();
  InitDefaultsDeletePathResponse();
  InitDefaultsAddNeighborRequest();
  InitDefaultsAddNeighborResponse();
  InitDefaultsDeleteNeighborRequest();
  InitDefaultsDeleteNeighborResponse();
  InitDefaultsResetNeighborRequest();
  InitDefaultsResetNeighborResponse();
  InitDefaultsSoftResetNeighborRequest();
  InitDefaultsSoftResetNeighborResponse();
  InitDefaultsShutdownNeighborRequest();
  InitDefaultsShutdownNeighborResponse();
  InitDefaultsEnableNeighborRequest();
  InitDefaultsEnableNeighborResponse();
  InitDefaultsDisableNeighborRequest();
  InitDefaultsDisableNeighborResponse();
  InitDefaultsEnableMrtRequest();
  InitDefaultsEnableMrtResponse();
  InitDefaultsDisableMrtRequest();
  InitDefaultsDisableMrtResponse();
  InitDefaultsInjectMrtRequest();
  InitDefaultsInjectMrtResponse();
  InitDefaultsAddBmpRequest();
  InitDefaultsAddBmpResponse();
  InitDefaultsDeleteBmpRequest();
  InitDefaultsDeleteBmpResponse();
  InitDefaultsMonitorRibRequest();
  InitDefaultsRPKIConf();
  InitDefaultsRPKIState();
  InitDefaultsRpki();
  InitDefaultsGetRpkiRequest();
  InitDefaultsGetRpkiResponse();
  InitDefaultsAddRpkiRequest();
  InitDefaultsAddRpkiResponse();
  InitDefaultsDeleteRpkiRequest();
  InitDefaultsDeleteRpkiResponse();
  InitDefaultsEnableRpkiRequest();
  InitDefaultsEnableRpkiResponse();
  InitDefaultsDisableRpkiRequest();
  InitDefaultsDisableRpkiResponse();
  InitDefaultsResetRpkiRequest();
  InitDefaultsResetRpkiResponse();
  InitDefaultsSoftResetRpkiRequest();
  InitDefaultsSoftResetRpkiResponse();
  InitDefaultsEnableZebraRequest();
  InitDefaultsEnableZebraResponse();
  InitDefaultsGetVrfRequest();
  InitDefaultsGetVrfResponse();
  InitDefaultsAddVrfRequest();
  InitDefaultsAddVrfResponse();
  InitDefaultsDeleteVrfRequest();
  InitDefaultsDeleteVrfResponse();
  InitDefaultsGetDefinedSetRequest();
  InitDefaultsGetDefinedSetResponse();
  InitDefaultsAddDefinedSetRequest();
  InitDefaultsAddDefinedSetResponse();
  InitDefaultsDeleteDefinedSetRequest();
  InitDefaultsDeleteDefinedSetResponse();
  InitDefaultsReplaceDefinedSetRequest();
  InitDefaultsReplaceDefinedSetResponse();
  InitDefaultsGetStatementRequest();
  InitDefaultsGetStatementResponse();
  InitDefaultsAddStatementRequest();
  InitDefaultsAddStatementResponse();
  InitDefaultsDeleteStatementRequest();
  InitDefaultsDeleteStatementResponse();
  InitDefaultsReplaceStatementRequest();
  InitDefaultsReplaceStatementResponse();
  InitDefaultsGetPolicyRequest();
  InitDefaultsGetPolicyResponse();
  InitDefaultsAddPolicyRequest();
  InitDefaultsAddPolicyResponse();
  InitDefaultsDeletePolicyRequest();
  InitDefaultsDeletePolicyResponse();
  InitDefaultsReplacePolicyRequest();
  InitDefaultsReplacePolicyResponse();
  InitDefaultsGetPolicyAssignmentRequest();
  InitDefaultsGetPolicyAssignmentResponse();
  InitDefaultsAddPolicyAssignmentRequest();
  InitDefaultsAddPolicyAssignmentResponse();
  InitDefaultsDeletePolicyAssignmentRequest();
  InitDefaultsDeletePolicyAssignmentResponse();
  InitDefaultsReplacePolicyAssignmentRequest();
  InitDefaultsReplacePolicyAssignmentResponse();
  InitDefaultsGetServerRequest();
  InitDefaultsGetServerResponse();
  InitDefaultsStartServerRequest();
  InitDefaultsStartServerResponse();
  InitDefaultsStopServerRequest();
  InitDefaultsStopServerResponse();
  InitDefaultsRPKIValidation();
  InitDefaultsPath();
  InitDefaultsDestination();
  InitDefaultsTable();
  InitDefaultsGetRibRequest();
  InitDefaultsGetRibResponse();
  InitDefaultsTableLookupPrefix();
  InitDefaultsGetPathRequest();
  InitDefaultsValidateRibRequest();
  InitDefaultsValidateRibResponse();
  InitDefaultsPeer();
  InitDefaultsApplyPolicy();
  InitDefaultsPrefixLimit();
  InitDefaultsPeerConf();
  InitDefaultsEbgpMultihop();
  InitDefaultsRouteReflector();
  InitDefaultsPeerState();
  InitDefaultsMessages();
  InitDefaultsMessage();
  InitDefaultsQueues();
  InitDefaultsTimers();
  InitDefaultsTimersConfig();
  InitDefaultsTimersState();
  InitDefaultsTransport();
  InitDefaultsRouteServer();
  InitDefaultsGracefulRestart();
  InitDefaultsMpGracefulRestartConfig();
  InitDefaultsMpGracefulRestartState();
  InitDefaultsMpGracefulRestart();
  InitDefaultsAfiSafiConfig();
  InitDefaultsAfiSafiState();
  InitDefaultsRouteSelectionOptionsConfig();
  InitDefaultsRouteSelectionOptionsState();
  InitDefaultsRouteSelectionOptions();
  InitDefaultsUseMultiplePathsConfig();
  InitDefaultsUseMultiplePathsState();
  InitDefaultsEbgpConfig();
  InitDefaultsEbgpState();
  InitDefaultsEbgp();
  InitDefaultsIbgpConfig();
  InitDefaultsIbgpState();
  InitDefaultsIbgp();
  InitDefaultsUseMultiplePaths();
  InitDefaultsRouteTargetMembershipConfig();
  InitDefaultsRouteTargetMembershipState();
  InitDefaultsRouteTargetMembership();
  InitDefaultsLongLivedGracefulRestartConfig();
  InitDefaultsLongLivedGracefulRestartState();
  InitDefaultsLongLivedGracefulRestart();
  InitDefaultsAfiSafi();
  InitDefaultsAddPathsConfig();
  InitDefaultsAddPathsState();
  InitDefaultsAddPaths();
  InitDefaultsPrefix();
  InitDefaultsDefinedSet();
  InitDefaultsMatchSet();
  InitDefaultsAsPathLength();
  InitDefaultsConditions();
  InitDefaultsCommunityAction();
  InitDefaultsMedAction();
  InitDefaultsAsPrependAction();
  InitDefaultsNexthopAction();
  InitDefaultsLocalPrefAction();
  InitDefaultsActions();
  InitDefaultsStatement();
  InitDefaultsPolicy();
  InitDefaultsPolicyAssignment();
  InitDefaultsRoa();
  InitDefaultsGetRoaRequest();
  InitDefaultsGetRoaResponse();
  InitDefaultsVrf();
  InitDefaultsGlobal();
  InitDefaultsTableInfo();
  InitDefaultsGetRibInfoRequest();
  InitDefaultsGetRibInfoResponse();
}
}  // namespace protobuf_gobgp_2eproto
namespace gobgpapi {
class Actions;
class ActionsDefaultTypeInternal;
extern ActionsDefaultTypeInternal _Actions_default_instance_;
class AddBmpRequest;
class AddBmpRequestDefaultTypeInternal;
extern AddBmpRequestDefaultTypeInternal _AddBmpRequest_default_instance_;
class AddBmpResponse;
class AddBmpResponseDefaultTypeInternal;
extern AddBmpResponseDefaultTypeInternal _AddBmpResponse_default_instance_;
class AddDefinedSetRequest;
class AddDefinedSetRequestDefaultTypeInternal;
extern AddDefinedSetRequestDefaultTypeInternal _AddDefinedSetRequest_default_instance_;
class AddDefinedSetResponse;
class AddDefinedSetResponseDefaultTypeInternal;
extern AddDefinedSetResponseDefaultTypeInternal _AddDefinedSetResponse_default_instance_;
class AddNeighborRequest;
class AddNeighborRequestDefaultTypeInternal;
extern AddNeighborRequestDefaultTypeInternal _AddNeighborRequest_default_instance_;
class AddNeighborResponse;
class AddNeighborResponseDefaultTypeInternal;
extern AddNeighborResponseDefaultTypeInternal _AddNeighborResponse_default_instance_;
class AddPathRequest;
class AddPathRequestDefaultTypeInternal;
extern AddPathRequestDefaultTypeInternal _AddPathRequest_default_instance_;
class AddPathResponse;
class AddPathResponseDefaultTypeInternal;
extern AddPathResponseDefaultTypeInternal _AddPathResponse_default_instance_;
class AddPaths;
class AddPathsDefaultTypeInternal;
extern AddPathsDefaultTypeInternal _AddPaths_default_instance_;
class AddPathsConfig;
class AddPathsConfigDefaultTypeInternal;
extern AddPathsConfigDefaultTypeInternal _AddPathsConfig_default_instance_;
class AddPathsState;
class AddPathsStateDefaultTypeInternal;
extern AddPathsStateDefaultTypeInternal _AddPathsState_default_instance_;
class AddPolicyAssignmentRequest;
class AddPolicyAssignmentRequestDefaultTypeInternal;
extern AddPolicyAssignmentRequestDefaultTypeInternal _AddPolicyAssignmentRequest_default_instance_;
class AddPolicyAssignmentResponse;
class AddPolicyAssignmentResponseDefaultTypeInternal;
extern AddPolicyAssignmentResponseDefaultTypeInternal _AddPolicyAssignmentResponse_default_instance_;
class AddPolicyRequest;
class AddPolicyRequestDefaultTypeInternal;
extern AddPolicyRequestDefaultTypeInternal _AddPolicyRequest_default_instance_;
class AddPolicyResponse;
class AddPolicyResponseDefaultTypeInternal;
extern AddPolicyResponseDefaultTypeInternal _AddPolicyResponse_default_instance_;
class AddRpkiRequest;
class AddRpkiRequestDefaultTypeInternal;
extern AddRpkiRequestDefaultTypeInternal _AddRpkiRequest_default_instance_;
class AddRpkiResponse;
class AddRpkiResponseDefaultTypeInternal;
extern AddRpkiResponseDefaultTypeInternal _AddRpkiResponse_default_instance_;
class AddStatementRequest;
class AddStatementRequestDefaultTypeInternal;
extern AddStatementRequestDefaultTypeInternal _AddStatementRequest_default_instance_;
class AddStatementResponse;
class AddStatementResponseDefaultTypeInternal;
extern AddStatementResponseDefaultTypeInternal _AddStatementResponse_default_instance_;
class AddVrfRequest;
class AddVrfRequestDefaultTypeInternal;
extern AddVrfRequestDefaultTypeInternal _AddVrfRequest_default_instance_;
class AddVrfResponse;
class AddVrfResponseDefaultTypeInternal;
extern AddVrfResponseDefaultTypeInternal _AddVrfResponse_default_instance_;
class AfiSafi;
class AfiSafiDefaultTypeInternal;
extern AfiSafiDefaultTypeInternal _AfiSafi_default_instance_;
class AfiSafiConfig;
class AfiSafiConfigDefaultTypeInternal;
extern AfiSafiConfigDefaultTypeInternal _AfiSafiConfig_default_instance_;
class AfiSafiState;
class AfiSafiStateDefaultTypeInternal;
extern AfiSafiStateDefaultTypeInternal _AfiSafiState_default_instance_;
class ApplyPolicy;
class ApplyPolicyDefaultTypeInternal;
extern ApplyPolicyDefaultTypeInternal _ApplyPolicy_default_instance_;
class Arguments;
class ArgumentsDefaultTypeInternal;
extern ArgumentsDefaultTypeInternal _Arguments_default_instance_;
class AsPathLength;
class AsPathLengthDefaultTypeInternal;
extern AsPathLengthDefaultTypeInternal _AsPathLength_default_instance_;
class AsPrependAction;
class AsPrependActionDefaultTypeInternal;
extern AsPrependActionDefaultTypeInternal _AsPrependAction_default_instance_;
class CommunityAction;
class CommunityActionDefaultTypeInternal;
extern CommunityActionDefaultTypeInternal _CommunityAction_default_instance_;
class Conditions;
class ConditionsDefaultTypeInternal;
extern ConditionsDefaultTypeInternal _Conditions_default_instance_;
class DefinedSet;
class DefinedSetDefaultTypeInternal;
extern DefinedSetDefaultTypeInternal _DefinedSet_default_instance_;
class DeleteBmpRequest;
class DeleteBmpRequestDefaultTypeInternal;
extern DeleteBmpRequestDefaultTypeInternal _DeleteBmpRequest_default_instance_;
class DeleteBmpResponse;
class DeleteBmpResponseDefaultTypeInternal;
extern DeleteBmpResponseDefaultTypeInternal _DeleteBmpResponse_default_instance_;
class DeleteDefinedSetRequest;
class DeleteDefinedSetRequestDefaultTypeInternal;
extern DeleteDefinedSetRequestDefaultTypeInternal _DeleteDefinedSetRequest_default_instance_;
class DeleteDefinedSetResponse;
class DeleteDefinedSetResponseDefaultTypeInternal;
extern DeleteDefinedSetResponseDefaultTypeInternal _DeleteDefinedSetResponse_default_instance_;
class DeleteNeighborRequest;
class DeleteNeighborRequestDefaultTypeInternal;
extern DeleteNeighborRequestDefaultTypeInternal _DeleteNeighborRequest_default_instance_;
class DeleteNeighborResponse;
class DeleteNeighborResponseDefaultTypeInternal;
extern DeleteNeighborResponseDefaultTypeInternal _DeleteNeighborResponse_default_instance_;
class DeletePathRequest;
class DeletePathRequestDefaultTypeInternal;
extern DeletePathRequestDefaultTypeInternal _DeletePathRequest_default_instance_;
class DeletePathResponse;
class DeletePathResponseDefaultTypeInternal;
extern DeletePathResponseDefaultTypeInternal _DeletePathResponse_default_instance_;
class DeletePolicyAssignmentRequest;
class DeletePolicyAssignmentRequestDefaultTypeInternal;
extern DeletePolicyAssignmentRequestDefaultTypeInternal _DeletePolicyAssignmentRequest_default_instance_;
class DeletePolicyAssignmentResponse;
class DeletePolicyAssignmentResponseDefaultTypeInternal;
extern DeletePolicyAssignmentResponseDefaultTypeInternal _DeletePolicyAssignmentResponse_default_instance_;
class DeletePolicyRequest;
class DeletePolicyRequestDefaultTypeInternal;
extern DeletePolicyRequestDefaultTypeInternal _DeletePolicyRequest_default_instance_;
class DeletePolicyResponse;
class DeletePolicyResponseDefaultTypeInternal;
extern DeletePolicyResponseDefaultTypeInternal _DeletePolicyResponse_default_instance_;
class DeleteRpkiRequest;
class DeleteRpkiRequestDefaultTypeInternal;
extern DeleteRpkiRequestDefaultTypeInternal _DeleteRpkiRequest_default_instance_;
class DeleteRpkiResponse;
class DeleteRpkiResponseDefaultTypeInternal;
extern DeleteRpkiResponseDefaultTypeInternal _DeleteRpkiResponse_default_instance_;
class DeleteStatementRequest;
class DeleteStatementRequestDefaultTypeInternal;
extern DeleteStatementRequestDefaultTypeInternal _DeleteStatementRequest_default_instance_;
class DeleteStatementResponse;
class DeleteStatementResponseDefaultTypeInternal;
extern DeleteStatementResponseDefaultTypeInternal _DeleteStatementResponse_default_instance_;
class DeleteVrfRequest;
class DeleteVrfRequestDefaultTypeInternal;
extern DeleteVrfRequestDefaultTypeInternal _DeleteVrfRequest_default_instance_;
class DeleteVrfResponse;
class DeleteVrfResponseDefaultTypeInternal;
extern DeleteVrfResponseDefaultTypeInternal _DeleteVrfResponse_default_instance_;
class Destination;
class DestinationDefaultTypeInternal;
extern DestinationDefaultTypeInternal _Destination_default_instance_;
class DisableMrtRequest;
class DisableMrtRequestDefaultTypeInternal;
extern DisableMrtRequestDefaultTypeInternal _DisableMrtRequest_default_instance_;
class DisableMrtResponse;
class DisableMrtResponseDefaultTypeInternal;
extern DisableMrtResponseDefaultTypeInternal _DisableMrtResponse_default_instance_;
class DisableNeighborRequest;
class DisableNeighborRequestDefaultTypeInternal;
extern DisableNeighborRequestDefaultTypeInternal _DisableNeighborRequest_default_instance_;
class DisableNeighborResponse;
class DisableNeighborResponseDefaultTypeInternal;
extern DisableNeighborResponseDefaultTypeInternal _DisableNeighborResponse_default_instance_;
class DisableRpkiRequest;
class DisableRpkiRequestDefaultTypeInternal;
extern DisableRpkiRequestDefaultTypeInternal _DisableRpkiRequest_default_instance_;
class DisableRpkiResponse;
class DisableRpkiResponseDefaultTypeInternal;
extern DisableRpkiResponseDefaultTypeInternal _DisableRpkiResponse_default_instance_;
class Ebgp;
class EbgpDefaultTypeInternal;
extern EbgpDefaultTypeInternal _Ebgp_default_instance_;
class EbgpConfig;
class EbgpConfigDefaultTypeInternal;
extern EbgpConfigDefaultTypeInternal _EbgpConfig_default_instance_;
class EbgpMultihop;
class EbgpMultihopDefaultTypeInternal;
extern EbgpMultihopDefaultTypeInternal _EbgpMultihop_default_instance_;
class EbgpState;
class EbgpStateDefaultTypeInternal;
extern EbgpStateDefaultTypeInternal _EbgpState_default_instance_;
class EnableMrtRequest;
class EnableMrtRequestDefaultTypeInternal;
extern EnableMrtRequestDefaultTypeInternal _EnableMrtRequest_default_instance_;
class EnableMrtResponse;
class EnableMrtResponseDefaultTypeInternal;
extern EnableMrtResponseDefaultTypeInternal _EnableMrtResponse_default_instance_;
class EnableNeighborRequest;
class EnableNeighborRequestDefaultTypeInternal;
extern EnableNeighborRequestDefaultTypeInternal _EnableNeighborRequest_default_instance_;
class EnableNeighborResponse;
class EnableNeighborResponseDefaultTypeInternal;
extern EnableNeighborResponseDefaultTypeInternal _EnableNeighborResponse_default_instance_;
class EnableRpkiRequest;
class EnableRpkiRequestDefaultTypeInternal;
extern EnableRpkiRequestDefaultTypeInternal _EnableRpkiRequest_default_instance_;
class EnableRpkiResponse;
class EnableRpkiResponseDefaultTypeInternal;
extern EnableRpkiResponseDefaultTypeInternal _EnableRpkiResponse_default_instance_;
class EnableZebraRequest;
class EnableZebraRequestDefaultTypeInternal;
extern EnableZebraRequestDefaultTypeInternal _EnableZebraRequest_default_instance_;
class EnableZebraResponse;
class EnableZebraResponseDefaultTypeInternal;
extern EnableZebraResponseDefaultTypeInternal _EnableZebraResponse_default_instance_;
class GetDefinedSetRequest;
class GetDefinedSetRequestDefaultTypeInternal;
extern GetDefinedSetRequestDefaultTypeInternal _GetDefinedSetRequest_default_instance_;
class GetDefinedSetResponse;
class GetDefinedSetResponseDefaultTypeInternal;
extern GetDefinedSetResponseDefaultTypeInternal _GetDefinedSetResponse_default_instance_;
class GetNeighborRequest;
class GetNeighborRequestDefaultTypeInternal;
extern GetNeighborRequestDefaultTypeInternal _GetNeighborRequest_default_instance_;
class GetNeighborResponse;
class GetNeighborResponseDefaultTypeInternal;
extern GetNeighborResponseDefaultTypeInternal _GetNeighborResponse_default_instance_;
class GetPathRequest;
class GetPathRequestDefaultTypeInternal;
extern GetPathRequestDefaultTypeInternal _GetPathRequest_default_instance_;
class GetPolicyAssignmentRequest;
class GetPolicyAssignmentRequestDefaultTypeInternal;
extern GetPolicyAssignmentRequestDefaultTypeInternal _GetPolicyAssignmentRequest_default_instance_;
class GetPolicyAssignmentResponse;
class GetPolicyAssignmentResponseDefaultTypeInternal;
extern GetPolicyAssignmentResponseDefaultTypeInternal _GetPolicyAssignmentResponse_default_instance_;
class GetPolicyRequest;
class GetPolicyRequestDefaultTypeInternal;
extern GetPolicyRequestDefaultTypeInternal _GetPolicyRequest_default_instance_;
class GetPolicyResponse;
class GetPolicyResponseDefaultTypeInternal;
extern GetPolicyResponseDefaultTypeInternal _GetPolicyResponse_default_instance_;
class GetRibInfoRequest;
class GetRibInfoRequestDefaultTypeInternal;
extern GetRibInfoRequestDefaultTypeInternal _GetRibInfoRequest_default_instance_;
class GetRibInfoResponse;
class GetRibInfoResponseDefaultTypeInternal;
extern GetRibInfoResponseDefaultTypeInternal _GetRibInfoResponse_default_instance_;
class GetRibRequest;
class GetRibRequestDefaultTypeInternal;
extern GetRibRequestDefaultTypeInternal _GetRibRequest_default_instance_;
class GetRibResponse;
class GetRibResponseDefaultTypeInternal;
extern GetRibResponseDefaultTypeInternal _GetRibResponse_default_instance_;
class GetRoaRequest;
class GetRoaRequestDefaultTypeInternal;
extern GetRoaRequestDefaultTypeInternal _GetRoaRequest_default_instance_;
class GetRoaResponse;
class GetRoaResponseDefaultTypeInternal;
extern GetRoaResponseDefaultTypeInternal _GetRoaResponse_default_instance_;
class GetRpkiRequest;
class GetRpkiRequestDefaultTypeInternal;
extern GetRpkiRequestDefaultTypeInternal _GetRpkiRequest_default_instance_;
class GetRpkiResponse;
class GetRpkiResponseDefaultTypeInternal;
extern GetRpkiResponseDefaultTypeInternal _GetRpkiResponse_default_instance_;
class GetServerRequest;
class GetServerRequestDefaultTypeInternal;
extern GetServerRequestDefaultTypeInternal _GetServerRequest_default_instance_;
class GetServerResponse;
class GetServerResponseDefaultTypeInternal;
extern GetServerResponseDefaultTypeInternal _GetServerResponse_default_instance_;
class GetStatementRequest;
class GetStatementRequestDefaultTypeInternal;
extern GetStatementRequestDefaultTypeInternal _GetStatementRequest_default_instance_;
class GetStatementResponse;
class GetStatementResponseDefaultTypeInternal;
extern GetStatementResponseDefaultTypeInternal _GetStatementResponse_default_instance_;
class GetVrfRequest;
class GetVrfRequestDefaultTypeInternal;
extern GetVrfRequestDefaultTypeInternal _GetVrfRequest_default_instance_;
class GetVrfResponse;
class GetVrfResponseDefaultTypeInternal;
extern GetVrfResponseDefaultTypeInternal _GetVrfResponse_default_instance_;
class Global;
class GlobalDefaultTypeInternal;
extern GlobalDefaultTypeInternal _Global_default_instance_;
class GracefulRestart;
class GracefulRestartDefaultTypeInternal;
extern GracefulRestartDefaultTypeInternal _GracefulRestart_default_instance_;
class Ibgp;
class IbgpDefaultTypeInternal;
extern IbgpDefaultTypeInternal _Ibgp_default_instance_;
class IbgpConfig;
class IbgpConfigDefaultTypeInternal;
extern IbgpConfigDefaultTypeInternal _IbgpConfig_default_instance_;
class IbgpState;
class IbgpStateDefaultTypeInternal;
extern IbgpStateDefaultTypeInternal _IbgpState_default_instance_;
class InjectMrtRequest;
class InjectMrtRequestDefaultTypeInternal;
extern InjectMrtRequestDefaultTypeInternal _InjectMrtRequest_default_instance_;
class InjectMrtResponse;
class InjectMrtResponseDefaultTypeInternal;
extern InjectMrtResponseDefaultTypeInternal _InjectMrtResponse_default_instance_;
class LocalPrefAction;
class LocalPrefActionDefaultTypeInternal;
extern LocalPrefActionDefaultTypeInternal _LocalPrefAction_default_instance_;
class LongLivedGracefulRestart;
class LongLivedGracefulRestartDefaultTypeInternal;
extern LongLivedGracefulRestartDefaultTypeInternal _LongLivedGracefulRestart_default_instance_;
class LongLivedGracefulRestartConfig;
class LongLivedGracefulRestartConfigDefaultTypeInternal;
extern LongLivedGracefulRestartConfigDefaultTypeInternal _LongLivedGracefulRestartConfig_default_instance_;
class LongLivedGracefulRestartState;
class LongLivedGracefulRestartStateDefaultTypeInternal;
extern LongLivedGracefulRestartStateDefaultTypeInternal _LongLivedGracefulRestartState_default_instance_;
class MatchSet;
class MatchSetDefaultTypeInternal;
extern MatchSetDefaultTypeInternal _MatchSet_default_instance_;
class MedAction;
class MedActionDefaultTypeInternal;
extern MedActionDefaultTypeInternal _MedAction_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Messages;
class MessagesDefaultTypeInternal;
extern MessagesDefaultTypeInternal _Messages_default_instance_;
class MonitorRibRequest;
class MonitorRibRequestDefaultTypeInternal;
extern MonitorRibRequestDefaultTypeInternal _MonitorRibRequest_default_instance_;
class MpGracefulRestart;
class MpGracefulRestartDefaultTypeInternal;
extern MpGracefulRestartDefaultTypeInternal _MpGracefulRestart_default_instance_;
class MpGracefulRestartConfig;
class MpGracefulRestartConfigDefaultTypeInternal;
extern MpGracefulRestartConfigDefaultTypeInternal _MpGracefulRestartConfig_default_instance_;
class MpGracefulRestartState;
class MpGracefulRestartStateDefaultTypeInternal;
extern MpGracefulRestartStateDefaultTypeInternal _MpGracefulRestartState_default_instance_;
class NexthopAction;
class NexthopActionDefaultTypeInternal;
extern NexthopActionDefaultTypeInternal _NexthopAction_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class PeerConf;
class PeerConfDefaultTypeInternal;
extern PeerConfDefaultTypeInternal _PeerConf_default_instance_;
class PeerState;
class PeerStateDefaultTypeInternal;
extern PeerStateDefaultTypeInternal _PeerState_default_instance_;
class Policy;
class PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class PolicyAssignment;
class PolicyAssignmentDefaultTypeInternal;
extern PolicyAssignmentDefaultTypeInternal _PolicyAssignment_default_instance_;
class Prefix;
class PrefixDefaultTypeInternal;
extern PrefixDefaultTypeInternal _Prefix_default_instance_;
class PrefixLimit;
class PrefixLimitDefaultTypeInternal;
extern PrefixLimitDefaultTypeInternal _PrefixLimit_default_instance_;
class Queues;
class QueuesDefaultTypeInternal;
extern QueuesDefaultTypeInternal _Queues_default_instance_;
class RPKIConf;
class RPKIConfDefaultTypeInternal;
extern RPKIConfDefaultTypeInternal _RPKIConf_default_instance_;
class RPKIState;
class RPKIStateDefaultTypeInternal;
extern RPKIStateDefaultTypeInternal _RPKIState_default_instance_;
class RPKIValidation;
class RPKIValidationDefaultTypeInternal;
extern RPKIValidationDefaultTypeInternal _RPKIValidation_default_instance_;
class ReplaceDefinedSetRequest;
class ReplaceDefinedSetRequestDefaultTypeInternal;
extern ReplaceDefinedSetRequestDefaultTypeInternal _ReplaceDefinedSetRequest_default_instance_;
class ReplaceDefinedSetResponse;
class ReplaceDefinedSetResponseDefaultTypeInternal;
extern ReplaceDefinedSetResponseDefaultTypeInternal _ReplaceDefinedSetResponse_default_instance_;
class ReplacePolicyAssignmentRequest;
class ReplacePolicyAssignmentRequestDefaultTypeInternal;
extern ReplacePolicyAssignmentRequestDefaultTypeInternal _ReplacePolicyAssignmentRequest_default_instance_;
class ReplacePolicyAssignmentResponse;
class ReplacePolicyAssignmentResponseDefaultTypeInternal;
extern ReplacePolicyAssignmentResponseDefaultTypeInternal _ReplacePolicyAssignmentResponse_default_instance_;
class ReplacePolicyRequest;
class ReplacePolicyRequestDefaultTypeInternal;
extern ReplacePolicyRequestDefaultTypeInternal _ReplacePolicyRequest_default_instance_;
class ReplacePolicyResponse;
class ReplacePolicyResponseDefaultTypeInternal;
extern ReplacePolicyResponseDefaultTypeInternal _ReplacePolicyResponse_default_instance_;
class ReplaceStatementRequest;
class ReplaceStatementRequestDefaultTypeInternal;
extern ReplaceStatementRequestDefaultTypeInternal _ReplaceStatementRequest_default_instance_;
class ReplaceStatementResponse;
class ReplaceStatementResponseDefaultTypeInternal;
extern ReplaceStatementResponseDefaultTypeInternal _ReplaceStatementResponse_default_instance_;
class ResetNeighborRequest;
class ResetNeighborRequestDefaultTypeInternal;
extern ResetNeighborRequestDefaultTypeInternal _ResetNeighborRequest_default_instance_;
class ResetNeighborResponse;
class ResetNeighborResponseDefaultTypeInternal;
extern ResetNeighborResponseDefaultTypeInternal _ResetNeighborResponse_default_instance_;
class ResetRpkiRequest;
class ResetRpkiRequestDefaultTypeInternal;
extern ResetRpkiRequestDefaultTypeInternal _ResetRpkiRequest_default_instance_;
class ResetRpkiResponse;
class ResetRpkiResponseDefaultTypeInternal;
extern ResetRpkiResponseDefaultTypeInternal _ResetRpkiResponse_default_instance_;
class Roa;
class RoaDefaultTypeInternal;
extern RoaDefaultTypeInternal _Roa_default_instance_;
class RouteReflector;
class RouteReflectorDefaultTypeInternal;
extern RouteReflectorDefaultTypeInternal _RouteReflector_default_instance_;
class RouteSelectionOptions;
class RouteSelectionOptionsDefaultTypeInternal;
extern RouteSelectionOptionsDefaultTypeInternal _RouteSelectionOptions_default_instance_;
class RouteSelectionOptionsConfig;
class RouteSelectionOptionsConfigDefaultTypeInternal;
extern RouteSelectionOptionsConfigDefaultTypeInternal _RouteSelectionOptionsConfig_default_instance_;
class RouteSelectionOptionsState;
class RouteSelectionOptionsStateDefaultTypeInternal;
extern RouteSelectionOptionsStateDefaultTypeInternal _RouteSelectionOptionsState_default_instance_;
class RouteServer;
class RouteServerDefaultTypeInternal;
extern RouteServerDefaultTypeInternal _RouteServer_default_instance_;
class RouteTargetMembership;
class RouteTargetMembershipDefaultTypeInternal;
extern RouteTargetMembershipDefaultTypeInternal _RouteTargetMembership_default_instance_;
class RouteTargetMembershipConfig;
class RouteTargetMembershipConfigDefaultTypeInternal;
extern RouteTargetMembershipConfigDefaultTypeInternal _RouteTargetMembershipConfig_default_instance_;
class RouteTargetMembershipState;
class RouteTargetMembershipStateDefaultTypeInternal;
extern RouteTargetMembershipStateDefaultTypeInternal _RouteTargetMembershipState_default_instance_;
class Rpki;
class RpkiDefaultTypeInternal;
extern RpkiDefaultTypeInternal _Rpki_default_instance_;
class ShutdownNeighborRequest;
class ShutdownNeighborRequestDefaultTypeInternal;
extern ShutdownNeighborRequestDefaultTypeInternal _ShutdownNeighborRequest_default_instance_;
class ShutdownNeighborResponse;
class ShutdownNeighborResponseDefaultTypeInternal;
extern ShutdownNeighborResponseDefaultTypeInternal _ShutdownNeighborResponse_default_instance_;
class SoftResetNeighborRequest;
class SoftResetNeighborRequestDefaultTypeInternal;
extern SoftResetNeighborRequestDefaultTypeInternal _SoftResetNeighborRequest_default_instance_;
class SoftResetNeighborResponse;
class SoftResetNeighborResponseDefaultTypeInternal;
extern SoftResetNeighborResponseDefaultTypeInternal _SoftResetNeighborResponse_default_instance_;
class SoftResetRpkiRequest;
class SoftResetRpkiRequestDefaultTypeInternal;
extern SoftResetRpkiRequestDefaultTypeInternal _SoftResetRpkiRequest_default_instance_;
class SoftResetRpkiResponse;
class SoftResetRpkiResponseDefaultTypeInternal;
extern SoftResetRpkiResponseDefaultTypeInternal _SoftResetRpkiResponse_default_instance_;
class StartServerRequest;
class StartServerRequestDefaultTypeInternal;
extern StartServerRequestDefaultTypeInternal _StartServerRequest_default_instance_;
class StartServerResponse;
class StartServerResponseDefaultTypeInternal;
extern StartServerResponseDefaultTypeInternal _StartServerResponse_default_instance_;
class Statement;
class StatementDefaultTypeInternal;
extern StatementDefaultTypeInternal _Statement_default_instance_;
class StopServerRequest;
class StopServerRequestDefaultTypeInternal;
extern StopServerRequestDefaultTypeInternal _StopServerRequest_default_instance_;
class StopServerResponse;
class StopServerResponseDefaultTypeInternal;
extern StopServerResponseDefaultTypeInternal _StopServerResponse_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableInfo;
class TableInfoDefaultTypeInternal;
extern TableInfoDefaultTypeInternal _TableInfo_default_instance_;
class TableLookupPrefix;
class TableLookupPrefixDefaultTypeInternal;
extern TableLookupPrefixDefaultTypeInternal _TableLookupPrefix_default_instance_;
class Timers;
class TimersDefaultTypeInternal;
extern TimersDefaultTypeInternal _Timers_default_instance_;
class TimersConfig;
class TimersConfigDefaultTypeInternal;
extern TimersConfigDefaultTypeInternal _TimersConfig_default_instance_;
class TimersState;
class TimersStateDefaultTypeInternal;
extern TimersStateDefaultTypeInternal _TimersState_default_instance_;
class Transport;
class TransportDefaultTypeInternal;
extern TransportDefaultTypeInternal _Transport_default_instance_;
class UseMultiplePaths;
class UseMultiplePathsDefaultTypeInternal;
extern UseMultiplePathsDefaultTypeInternal _UseMultiplePaths_default_instance_;
class UseMultiplePathsConfig;
class UseMultiplePathsConfigDefaultTypeInternal;
extern UseMultiplePathsConfigDefaultTypeInternal _UseMultiplePathsConfig_default_instance_;
class UseMultiplePathsState;
class UseMultiplePathsStateDefaultTypeInternal;
extern UseMultiplePathsStateDefaultTypeInternal _UseMultiplePathsState_default_instance_;
class ValidateRibRequest;
class ValidateRibRequestDefaultTypeInternal;
extern ValidateRibRequestDefaultTypeInternal _ValidateRibRequest_default_instance_;
class ValidateRibResponse;
class ValidateRibResponseDefaultTypeInternal;
extern ValidateRibResponseDefaultTypeInternal _ValidateRibResponse_default_instance_;
class Vrf;
class VrfDefaultTypeInternal;
extern VrfDefaultTypeInternal _Vrf_default_instance_;
}  // namespace gobgpapi
namespace gobgpapi {

enum SoftResetNeighborRequest_SoftResetDirection {
  SoftResetNeighborRequest_SoftResetDirection_IN = 0,
  SoftResetNeighborRequest_SoftResetDirection_OUT = 1,
  SoftResetNeighborRequest_SoftResetDirection_BOTH = 2,
  SoftResetNeighborRequest_SoftResetDirection_SoftResetNeighborRequest_SoftResetDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SoftResetNeighborRequest_SoftResetDirection_SoftResetNeighborRequest_SoftResetDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SoftResetNeighborRequest_SoftResetDirection_IsValid(int value);
const SoftResetNeighborRequest_SoftResetDirection SoftResetNeighborRequest_SoftResetDirection_SoftResetDirection_MIN = SoftResetNeighborRequest_SoftResetDirection_IN;
const SoftResetNeighborRequest_SoftResetDirection SoftResetNeighborRequest_SoftResetDirection_SoftResetDirection_MAX = SoftResetNeighborRequest_SoftResetDirection_BOTH;
const int SoftResetNeighborRequest_SoftResetDirection_SoftResetDirection_ARRAYSIZE = SoftResetNeighborRequest_SoftResetDirection_SoftResetDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftResetNeighborRequest_SoftResetDirection_descriptor();
inline const ::std::string& SoftResetNeighborRequest_SoftResetDirection_Name(SoftResetNeighborRequest_SoftResetDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftResetNeighborRequest_SoftResetDirection_descriptor(), value);
}
inline bool SoftResetNeighborRequest_SoftResetDirection_Parse(
    const ::std::string& name, SoftResetNeighborRequest_SoftResetDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftResetNeighborRequest_SoftResetDirection>(
    SoftResetNeighborRequest_SoftResetDirection_descriptor(), name, value);
}
enum AddBmpRequest_MonitoringPolicy {
  AddBmpRequest_MonitoringPolicy_PRE = 0,
  AddBmpRequest_MonitoringPolicy_POST = 1,
  AddBmpRequest_MonitoringPolicy_BOTH = 2,
  AddBmpRequest_MonitoringPolicy_LOCAL = 3,
  AddBmpRequest_MonitoringPolicy_ALL = 4,
  AddBmpRequest_MonitoringPolicy_AddBmpRequest_MonitoringPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddBmpRequest_MonitoringPolicy_AddBmpRequest_MonitoringPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddBmpRequest_MonitoringPolicy_IsValid(int value);
const AddBmpRequest_MonitoringPolicy AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MIN = AddBmpRequest_MonitoringPolicy_PRE;
const AddBmpRequest_MonitoringPolicy AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MAX = AddBmpRequest_MonitoringPolicy_ALL;
const int AddBmpRequest_MonitoringPolicy_MonitoringPolicy_ARRAYSIZE = AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddBmpRequest_MonitoringPolicy_descriptor();
inline const ::std::string& AddBmpRequest_MonitoringPolicy_Name(AddBmpRequest_MonitoringPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddBmpRequest_MonitoringPolicy_descriptor(), value);
}
inline bool AddBmpRequest_MonitoringPolicy_Parse(
    const ::std::string& name, AddBmpRequest_MonitoringPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddBmpRequest_MonitoringPolicy>(
    AddBmpRequest_MonitoringPolicy_descriptor(), name, value);
}
enum RPKIValidation_State {
  RPKIValidation_State_STATE_NONE = 0,
  RPKIValidation_State_STATE_NOT_FOUND = 1,
  RPKIValidation_State_STATE_VALID = 2,
  RPKIValidation_State_STATE_INVALID = 3,
  RPKIValidation_State_RPKIValidation_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RPKIValidation_State_RPKIValidation_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RPKIValidation_State_IsValid(int value);
const RPKIValidation_State RPKIValidation_State_State_MIN = RPKIValidation_State_STATE_NONE;
const RPKIValidation_State RPKIValidation_State_State_MAX = RPKIValidation_State_STATE_INVALID;
const int RPKIValidation_State_State_ARRAYSIZE = RPKIValidation_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* RPKIValidation_State_descriptor();
inline const ::std::string& RPKIValidation_State_Name(RPKIValidation_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    RPKIValidation_State_descriptor(), value);
}
inline bool RPKIValidation_State_Parse(
    const ::std::string& name, RPKIValidation_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPKIValidation_State>(
    RPKIValidation_State_descriptor(), name, value);
}
enum RPKIValidation_Reason {
  RPKIValidation_Reason_REASOT_NONE = 0,
  RPKIValidation_Reason_REASON_AS = 1,
  RPKIValidation_Reason_REASON_LENGTH = 2,
  RPKIValidation_Reason_RPKIValidation_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RPKIValidation_Reason_RPKIValidation_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RPKIValidation_Reason_IsValid(int value);
const RPKIValidation_Reason RPKIValidation_Reason_Reason_MIN = RPKIValidation_Reason_REASOT_NONE;
const RPKIValidation_Reason RPKIValidation_Reason_Reason_MAX = RPKIValidation_Reason_REASON_LENGTH;
const int RPKIValidation_Reason_Reason_ARRAYSIZE = RPKIValidation_Reason_Reason_MAX + 1;

const ::google::protobuf::EnumDescriptor* RPKIValidation_Reason_descriptor();
inline const ::std::string& RPKIValidation_Reason_Name(RPKIValidation_Reason value) {
  return ::google::protobuf::internal::NameOfEnum(
    RPKIValidation_Reason_descriptor(), value);
}
inline bool RPKIValidation_Reason_Parse(
    const ::std::string& name, RPKIValidation_Reason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPKIValidation_Reason>(
    RPKIValidation_Reason_descriptor(), name, value);
}
enum PeerConf_RemovePrivateAs {
  PeerConf_RemovePrivateAs_NONE = 0,
  PeerConf_RemovePrivateAs_ALL = 1,
  PeerConf_RemovePrivateAs_REPLACE = 2,
  PeerConf_RemovePrivateAs_PeerConf_RemovePrivateAs_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerConf_RemovePrivateAs_PeerConf_RemovePrivateAs_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerConf_RemovePrivateAs_IsValid(int value);
const PeerConf_RemovePrivateAs PeerConf_RemovePrivateAs_RemovePrivateAs_MIN = PeerConf_RemovePrivateAs_NONE;
const PeerConf_RemovePrivateAs PeerConf_RemovePrivateAs_RemovePrivateAs_MAX = PeerConf_RemovePrivateAs_REPLACE;
const int PeerConf_RemovePrivateAs_RemovePrivateAs_ARRAYSIZE = PeerConf_RemovePrivateAs_RemovePrivateAs_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerConf_RemovePrivateAs_descriptor();
inline const ::std::string& PeerConf_RemovePrivateAs_Name(PeerConf_RemovePrivateAs value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerConf_RemovePrivateAs_descriptor(), value);
}
inline bool PeerConf_RemovePrivateAs_Parse(
    const ::std::string& name, PeerConf_RemovePrivateAs* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerConf_RemovePrivateAs>(
    PeerConf_RemovePrivateAs_descriptor(), name, value);
}
enum PeerState_AdminState {
  PeerState_AdminState_UP = 0,
  PeerState_AdminState_DOWN = 1,
  PeerState_AdminState_PFX_CT = 2,
  PeerState_AdminState_PeerState_AdminState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerState_AdminState_PeerState_AdminState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerState_AdminState_IsValid(int value);
const PeerState_AdminState PeerState_AdminState_AdminState_MIN = PeerState_AdminState_UP;
const PeerState_AdminState PeerState_AdminState_AdminState_MAX = PeerState_AdminState_PFX_CT;
const int PeerState_AdminState_AdminState_ARRAYSIZE = PeerState_AdminState_AdminState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerState_AdminState_descriptor();
inline const ::std::string& PeerState_AdminState_Name(PeerState_AdminState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerState_AdminState_descriptor(), value);
}
inline bool PeerState_AdminState_Parse(
    const ::std::string& name, PeerState_AdminState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerState_AdminState>(
    PeerState_AdminState_descriptor(), name, value);
}
enum Conditions_RouteType {
  Conditions_RouteType_ROUTE_TYPE_NONE = 0,
  Conditions_RouteType_ROUTE_TYPE_INTERNAL = 1,
  Conditions_RouteType_ROUTE_TYPE_EXTERNAL = 2,
  Conditions_RouteType_ROUTE_TYPE_LOCAL = 3,
  Conditions_RouteType_Conditions_RouteType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Conditions_RouteType_Conditions_RouteType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Conditions_RouteType_IsValid(int value);
const Conditions_RouteType Conditions_RouteType_RouteType_MIN = Conditions_RouteType_ROUTE_TYPE_NONE;
const Conditions_RouteType Conditions_RouteType_RouteType_MAX = Conditions_RouteType_ROUTE_TYPE_LOCAL;
const int Conditions_RouteType_RouteType_ARRAYSIZE = Conditions_RouteType_RouteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Conditions_RouteType_descriptor();
inline const ::std::string& Conditions_RouteType_Name(Conditions_RouteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Conditions_RouteType_descriptor(), value);
}
inline bool Conditions_RouteType_Parse(
    const ::std::string& name, Conditions_RouteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Conditions_RouteType>(
    Conditions_RouteType_descriptor(), name, value);
}
enum Family {
  _ = 0,
  IPv4 = 65537,
  IPv6 = 131073,
  IPv4_MC = 65538,
  IPv6_MC = 131074,
  IPv4_MPLS = 65540,
  IPv6_MPLS = 131076,
  IPv4_VPN = 65664,
  IPv6_VPN = 131200,
  IPv4_VPN_MC = 65665,
  IPv6_VPN_MC = 131201,
  VPLS = 1638465,
  EVPN = 1638470,
  RTC = 65668,
  IPv4_ENCAP = 65543,
  IPv6_ENCAP = 131079,
  FLOW_SPEC_IPv4 = 65669,
  FLOW_SPEC_IPv6 = 131205,
  FLOW_SPEC_IPv4_VPN = 65670,
  FLOW_SPEC_IPv6_VPN = 131206,
  FLOW_SPEC_L2_VPN = 1638534,
  OPAQUE = 1074594033,
  Family_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Family_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Family_IsValid(int value);
const Family Family_MIN = _;
const Family Family_MAX = OPAQUE;
const int Family_ARRAYSIZE = Family_MAX + 1;

const ::google::protobuf::EnumDescriptor* Family_descriptor();
inline const ::std::string& Family_Name(Family value) {
  return ::google::protobuf::internal::NameOfEnum(
    Family_descriptor(), value);
}
inline bool Family_Parse(
    const ::std::string& name, Family* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Family>(
    Family_descriptor(), name, value);
}
enum Resource {
  GLOBAL = 0,
  LOCAL = 1,
  ADJ_IN = 2,
  ADJ_OUT = 3,
  VRF = 4,
  Resource_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Resource_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Resource_IsValid(int value);
const Resource Resource_MIN = GLOBAL;
const Resource Resource_MAX = VRF;
const int Resource_ARRAYSIZE = Resource_MAX + 1;

const ::google::protobuf::EnumDescriptor* Resource_descriptor();
inline const ::std::string& Resource_Name(Resource value) {
  return ::google::protobuf::internal::NameOfEnum(
    Resource_descriptor(), value);
}
inline bool Resource_Parse(
    const ::std::string& name, Resource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Resource>(
    Resource_descriptor(), name, value);
}
enum TableLookupOption {
  LOOKUP_EXACT = 0,
  LOOKUP_LONGER = 1,
  LOOKUP_SHORTER = 2,
  TableLookupOption_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TableLookupOption_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TableLookupOption_IsValid(int value);
const TableLookupOption TableLookupOption_MIN = LOOKUP_EXACT;
const TableLookupOption TableLookupOption_MAX = LOOKUP_SHORTER;
const int TableLookupOption_ARRAYSIZE = TableLookupOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* TableLookupOption_descriptor();
inline const ::std::string& TableLookupOption_Name(TableLookupOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    TableLookupOption_descriptor(), value);
}
inline bool TableLookupOption_Parse(
    const ::std::string& name, TableLookupOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TableLookupOption>(
    TableLookupOption_descriptor(), name, value);
}
enum DefinedType {
  PREFIX = 0,
  NEIGHBOR = 1,
  TAG = 2,
  AS_PATH = 3,
  COMMUNITY = 4,
  EXT_COMMUNITY = 5,
  LARGE_COMMUNITY = 6,
  DefinedType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DefinedType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DefinedType_IsValid(int value);
const DefinedType DefinedType_MIN = PREFIX;
const DefinedType DefinedType_MAX = LARGE_COMMUNITY;
const int DefinedType_ARRAYSIZE = DefinedType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DefinedType_descriptor();
inline const ::std::string& DefinedType_Name(DefinedType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DefinedType_descriptor(), value);
}
inline bool DefinedType_Parse(
    const ::std::string& name, DefinedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DefinedType>(
    DefinedType_descriptor(), name, value);
}
enum MatchType {
  ANY = 0,
  ALL = 1,
  INVERT = 2,
  MatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MatchType_IsValid(int value);
const MatchType MatchType_MIN = ANY;
const MatchType MatchType_MAX = INVERT;
const int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchType_descriptor();
inline const ::std::string& MatchType_Name(MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchType_descriptor(), value);
}
inline bool MatchType_Parse(
    const ::std::string& name, MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchType>(
    MatchType_descriptor(), name, value);
}
enum AsPathLengthType {
  EQ = 0,
  GE = 1,
  LE = 2,
  AsPathLengthType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AsPathLengthType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AsPathLengthType_IsValid(int value);
const AsPathLengthType AsPathLengthType_MIN = EQ;
const AsPathLengthType AsPathLengthType_MAX = LE;
const int AsPathLengthType_ARRAYSIZE = AsPathLengthType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AsPathLengthType_descriptor();
inline const ::std::string& AsPathLengthType_Name(AsPathLengthType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AsPathLengthType_descriptor(), value);
}
inline bool AsPathLengthType_Parse(
    const ::std::string& name, AsPathLengthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AsPathLengthType>(
    AsPathLengthType_descriptor(), name, value);
}
enum RouteAction {
  NONE = 0,
  ACCEPT = 1,
  REJECT = 2,
  RouteAction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RouteAction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RouteAction_IsValid(int value);
const RouteAction RouteAction_MIN = NONE;
const RouteAction RouteAction_MAX = REJECT;
const int RouteAction_ARRAYSIZE = RouteAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* RouteAction_descriptor();
inline const ::std::string& RouteAction_Name(RouteAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    RouteAction_descriptor(), value);
}
inline bool RouteAction_Parse(
    const ::std::string& name, RouteAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RouteAction>(
    RouteAction_descriptor(), name, value);
}
enum CommunityActionType {
  COMMUNITY_ADD = 0,
  COMMUNITY_REMOVE = 1,
  COMMUNITY_REPLACE = 2,
  CommunityActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommunityActionType_IsValid(int value);
const CommunityActionType CommunityActionType_MIN = COMMUNITY_ADD;
const CommunityActionType CommunityActionType_MAX = COMMUNITY_REPLACE;
const int CommunityActionType_ARRAYSIZE = CommunityActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommunityActionType_descriptor();
inline const ::std::string& CommunityActionType_Name(CommunityActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityActionType_descriptor(), value);
}
inline bool CommunityActionType_Parse(
    const ::std::string& name, CommunityActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityActionType>(
    CommunityActionType_descriptor(), name, value);
}
enum MedActionType {
  MED_MOD = 0,
  MED_REPLACE = 1,
  MedActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MedActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MedActionType_IsValid(int value);
const MedActionType MedActionType_MIN = MED_MOD;
const MedActionType MedActionType_MAX = MED_REPLACE;
const int MedActionType_ARRAYSIZE = MedActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MedActionType_descriptor();
inline const ::std::string& MedActionType_Name(MedActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MedActionType_descriptor(), value);
}
inline bool MedActionType_Parse(
    const ::std::string& name, MedActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MedActionType>(
    MedActionType_descriptor(), name, value);
}
enum PolicyType {
  IN = 0,
  IMPORT = 1,
  EXPORT = 2,
  PolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PolicyType_IsValid(int value);
const PolicyType PolicyType_MIN = IN;
const PolicyType PolicyType_MAX = EXPORT;
const int PolicyType_ARRAYSIZE = PolicyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PolicyType_descriptor();
inline const ::std::string& PolicyType_Name(PolicyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PolicyType_descriptor(), value);
}
inline bool PolicyType_Parse(
    const ::std::string& name, PolicyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PolicyType>(
    PolicyType_descriptor(), name, value);
}
// ===================================================================

class GetNeighborRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetNeighborRequest) */ {
 public:
  GetNeighborRequest();
  virtual ~GetNeighborRequest();

  GetNeighborRequest(const GetNeighborRequest& from);

  inline GetNeighborRequest& operator=(const GetNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNeighborRequest(GetNeighborRequest&& from) noexcept
    : GetNeighborRequest() {
    *this = ::std::move(from);
  }

  inline GetNeighborRequest& operator=(GetNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const GetNeighborRequest*>(
               &_GetNeighborRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetNeighborRequest* other);
  friend void swap(GetNeighborRequest& a, GetNeighborRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNeighborRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNeighborRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNeighborRequest& from);
  void MergeFrom(const GetNeighborRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNeighborRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // bool enableAdvertised = 1;
  void clear_enableadvertised();
  static const int kEnableAdvertisedFieldNumber = 1;
  bool enableadvertised() const;
  void set_enableadvertised(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetNeighborRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  bool enableadvertised_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetNeighborRequestImpl();
};
// -------------------------------------------------------------------

class GetNeighborResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetNeighborResponse) */ {
 public:
  GetNeighborResponse();
  virtual ~GetNeighborResponse();

  GetNeighborResponse(const GetNeighborResponse& from);

  inline GetNeighborResponse& operator=(const GetNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNeighborResponse(GetNeighborResponse&& from) noexcept
    : GetNeighborResponse() {
    *this = ::std::move(from);
  }

  inline GetNeighborResponse& operator=(GetNeighborResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNeighborResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const GetNeighborResponse*>(
               &_GetNeighborResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetNeighborResponse* other);
  friend void swap(GetNeighborResponse& a, GetNeighborResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNeighborResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNeighborResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNeighborResponse& from);
  void MergeFrom(const GetNeighborResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNeighborResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Peer peers = 1;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 1;
  const ::gobgpapi::Peer& peers(int index) const;
  ::gobgpapi::Peer* mutable_peers(int index);
  ::gobgpapi::Peer* add_peers();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Peer >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Peer >&
      peers() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.GetNeighborResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Peer > peers_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetNeighborResponseImpl();
};
// -------------------------------------------------------------------

class Arguments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Arguments) */ {
 public:
  Arguments();
  virtual ~Arguments();

  Arguments(const Arguments& from);

  inline Arguments& operator=(const Arguments& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Arguments(Arguments&& from) noexcept
    : Arguments() {
    *this = ::std::move(from);
  }

  inline Arguments& operator=(Arguments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Arguments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Arguments* internal_default_instance() {
    return reinterpret_cast<const Arguments*>(
               &_Arguments_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Arguments* other);
  friend void swap(Arguments& a, Arguments& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Arguments* New() const PROTOBUF_FINAL { return New(NULL); }

  Arguments* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Arguments& from);
  void MergeFrom(const Arguments& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Arguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gobgpapi.Resource resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // uint32 family = 2;
  void clear_family();
  static const int kFamilyFieldNumber = 2;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // bool current = 4;
  void clear_current();
  static const int kCurrentFieldNumber = 4;
  bool current() const;
  void set_current(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Arguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int resource_;
  ::google::protobuf::uint32 family_;
  bool current_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsArgumentsImpl();
};
// -------------------------------------------------------------------

class AddPathRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPathRequest) */ {
 public:
  AddPathRequest();
  virtual ~AddPathRequest();

  AddPathRequest(const AddPathRequest& from);

  inline AddPathRequest& operator=(const AddPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPathRequest(AddPathRequest&& from) noexcept
    : AddPathRequest() {
    *this = ::std::move(from);
  }

  inline AddPathRequest& operator=(AddPathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPathRequest* internal_default_instance() {
    return reinterpret_cast<const AddPathRequest*>(
               &_AddPathRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AddPathRequest* other);
  friend void swap(AddPathRequest& a, AddPathRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPathRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddPathRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddPathRequest& from);
  void MergeFrom(const AddPathRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddPathRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vrf_id = 2;
  void clear_vrf_id();
  static const int kVrfIdFieldNumber = 2;
  const ::std::string& vrf_id() const;
  void set_vrf_id(const ::std::string& value);
  #if LANG_CXX11
  void set_vrf_id(::std::string&& value);
  #endif
  void set_vrf_id(const char* value);
  void set_vrf_id(const char* value, size_t size);
  ::std::string* mutable_vrf_id();
  ::std::string* release_vrf_id();
  void set_allocated_vrf_id(::std::string* vrf_id);

  // .gobgpapi.Path path = 3;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::gobgpapi::Path& path() const;
  ::gobgpapi::Path* release_path();
  ::gobgpapi::Path* mutable_path();
  void set_allocated_path(::gobgpapi::Path* path);

  // .gobgpapi.Resource resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPathRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vrf_id_;
  ::gobgpapi::Path* path_;
  int resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddPathRequestImpl();
};
// -------------------------------------------------------------------

class AddPathResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPathResponse) */ {
 public:
  AddPathResponse();
  virtual ~AddPathResponse();

  AddPathResponse(const AddPathResponse& from);

  inline AddPathResponse& operator=(const AddPathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPathResponse(AddPathResponse&& from) noexcept
    : AddPathResponse() {
    *this = ::std::move(from);
  }

  inline AddPathResponse& operator=(AddPathResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPathResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPathResponse* internal_default_instance() {
    return reinterpret_cast<const AddPathResponse*>(
               &_AddPathResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AddPathResponse* other);
  friend void swap(AddPathResponse& a, AddPathResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPathResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddPathResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddPathResponse& from);
  void MergeFrom(const AddPathResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddPathResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPathResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddPathResponseImpl();
};
// -------------------------------------------------------------------

class DeletePathRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePathRequest) */ {
 public:
  DeletePathRequest();
  virtual ~DeletePathRequest();

  DeletePathRequest(const DeletePathRequest& from);

  inline DeletePathRequest& operator=(const DeletePathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePathRequest(DeletePathRequest&& from) noexcept
    : DeletePathRequest() {
    *this = ::std::move(from);
  }

  inline DeletePathRequest& operator=(DeletePathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePathRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePathRequest*>(
               &_DeletePathRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DeletePathRequest* other);
  friend void swap(DeletePathRequest& a, DeletePathRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePathRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeletePathRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeletePathRequest& from);
  void MergeFrom(const DeletePathRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeletePathRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vrf_id = 2;
  void clear_vrf_id();
  static const int kVrfIdFieldNumber = 2;
  const ::std::string& vrf_id() const;
  void set_vrf_id(const ::std::string& value);
  #if LANG_CXX11
  void set_vrf_id(::std::string&& value);
  #endif
  void set_vrf_id(const char* value);
  void set_vrf_id(const char* value, size_t size);
  ::std::string* mutable_vrf_id();
  ::std::string* release_vrf_id();
  void set_allocated_vrf_id(::std::string* vrf_id);

  // bytes uuid = 5;
  void clear_uuid();
  static const int kUuidFieldNumber = 5;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // .gobgpapi.Path path = 4;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::gobgpapi::Path& path() const;
  ::gobgpapi::Path* release_path();
  ::gobgpapi::Path* mutable_path();
  void set_allocated_path(::gobgpapi::Path* path);

  // .gobgpapi.Resource resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // uint32 family = 3;
  void clear_family();
  static const int kFamilyFieldNumber = 3;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePathRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vrf_id_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::gobgpapi::Path* path_;
  int resource_;
  ::google::protobuf::uint32 family_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeletePathRequestImpl();
};
// -------------------------------------------------------------------

class DeletePathResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePathResponse) */ {
 public:
  DeletePathResponse();
  virtual ~DeletePathResponse();

  DeletePathResponse(const DeletePathResponse& from);

  inline DeletePathResponse& operator=(const DeletePathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePathResponse(DeletePathResponse&& from) noexcept
    : DeletePathResponse() {
    *this = ::std::move(from);
  }

  inline DeletePathResponse& operator=(DeletePathResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePathResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePathResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePathResponse*>(
               &_DeletePathResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DeletePathResponse* other);
  friend void swap(DeletePathResponse& a, DeletePathResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePathResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeletePathResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeletePathResponse& from);
  void MergeFrom(const DeletePathResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeletePathResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePathResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeletePathResponseImpl();
};
// -------------------------------------------------------------------

class AddNeighborRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddNeighborRequest) */ {
 public:
  AddNeighborRequest();
  virtual ~AddNeighborRequest();

  AddNeighborRequest(const AddNeighborRequest& from);

  inline AddNeighborRequest& operator=(const AddNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddNeighborRequest(AddNeighborRequest&& from) noexcept
    : AddNeighborRequest() {
    *this = ::std::move(from);
  }

  inline AddNeighborRequest& operator=(AddNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const AddNeighborRequest*>(
               &_AddNeighborRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(AddNeighborRequest* other);
  friend void swap(AddNeighborRequest& a, AddNeighborRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddNeighborRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddNeighborRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddNeighborRequest& from);
  void MergeFrom(const AddNeighborRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddNeighborRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::gobgpapi::Peer& peer() const;
  ::gobgpapi::Peer* release_peer();
  ::gobgpapi::Peer* mutable_peer();
  void set_allocated_peer(::gobgpapi::Peer* peer);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddNeighborRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Peer* peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddNeighborRequestImpl();
};
// -------------------------------------------------------------------

class AddNeighborResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddNeighborResponse) */ {
 public:
  AddNeighborResponse();
  virtual ~AddNeighborResponse();

  AddNeighborResponse(const AddNeighborResponse& from);

  inline AddNeighborResponse& operator=(const AddNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddNeighborResponse(AddNeighborResponse&& from) noexcept
    : AddNeighborResponse() {
    *this = ::std::move(from);
  }

  inline AddNeighborResponse& operator=(AddNeighborResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNeighborResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const AddNeighborResponse*>(
               &_AddNeighborResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AddNeighborResponse* other);
  friend void swap(AddNeighborResponse& a, AddNeighborResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddNeighborResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddNeighborResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddNeighborResponse& from);
  void MergeFrom(const AddNeighborResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddNeighborResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.AddNeighborResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddNeighborResponseImpl();
};
// -------------------------------------------------------------------

class DeleteNeighborRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteNeighborRequest) */ {
 public:
  DeleteNeighborRequest();
  virtual ~DeleteNeighborRequest();

  DeleteNeighborRequest(const DeleteNeighborRequest& from);

  inline DeleteNeighborRequest& operator=(const DeleteNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteNeighborRequest(DeleteNeighborRequest&& from) noexcept
    : DeleteNeighborRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNeighborRequest& operator=(DeleteNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNeighborRequest*>(
               &_DeleteNeighborRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DeleteNeighborRequest* other);
  friend void swap(DeleteNeighborRequest& a, DeleteNeighborRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteNeighborRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteNeighborRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteNeighborRequest& from);
  void MergeFrom(const DeleteNeighborRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteNeighborRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::gobgpapi::Peer& peer() const;
  ::gobgpapi::Peer* release_peer();
  ::gobgpapi::Peer* mutable_peer();
  void set_allocated_peer(::gobgpapi::Peer* peer);

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteNeighborRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Peer* peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteNeighborRequestImpl();
};
// -------------------------------------------------------------------

class DeleteNeighborResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteNeighborResponse) */ {
 public:
  DeleteNeighborResponse();
  virtual ~DeleteNeighborResponse();

  DeleteNeighborResponse(const DeleteNeighborResponse& from);

  inline DeleteNeighborResponse& operator=(const DeleteNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteNeighborResponse(DeleteNeighborResponse&& from) noexcept
    : DeleteNeighborResponse() {
    *this = ::std::move(from);
  }

  inline DeleteNeighborResponse& operator=(DeleteNeighborResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNeighborResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteNeighborResponse*>(
               &_DeleteNeighborResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DeleteNeighborResponse* other);
  friend void swap(DeleteNeighborResponse& a, DeleteNeighborResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteNeighborResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteNeighborResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteNeighborResponse& from);
  void MergeFrom(const DeleteNeighborResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteNeighborResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteNeighborResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteNeighborResponseImpl();
};
// -------------------------------------------------------------------

class ResetNeighborRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ResetNeighborRequest) */ {
 public:
  ResetNeighborRequest();
  virtual ~ResetNeighborRequest();

  ResetNeighborRequest(const ResetNeighborRequest& from);

  inline ResetNeighborRequest& operator=(const ResetNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetNeighborRequest(ResetNeighborRequest&& from) noexcept
    : ResetNeighborRequest() {
    *this = ::std::move(from);
  }

  inline ResetNeighborRequest& operator=(ResetNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const ResetNeighborRequest*>(
               &_ResetNeighborRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ResetNeighborRequest* other);
  friend void swap(ResetNeighborRequest& a, ResetNeighborRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetNeighborRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ResetNeighborRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResetNeighborRequest& from);
  void MergeFrom(const ResetNeighborRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResetNeighborRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string communication = 2;
  void clear_communication();
  static const int kCommunicationFieldNumber = 2;
  const ::std::string& communication() const;
  void set_communication(const ::std::string& value);
  #if LANG_CXX11
  void set_communication(::std::string&& value);
  #endif
  void set_communication(const char* value);
  void set_communication(const char* value, size_t size);
  ::std::string* mutable_communication();
  ::std::string* release_communication();
  void set_allocated_communication(::std::string* communication);

  // @@protoc_insertion_point(class_scope:gobgpapi.ResetNeighborRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr communication_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsResetNeighborRequestImpl();
};
// -------------------------------------------------------------------

class ResetNeighborResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ResetNeighborResponse) */ {
 public:
  ResetNeighborResponse();
  virtual ~ResetNeighborResponse();

  ResetNeighborResponse(const ResetNeighborResponse& from);

  inline ResetNeighborResponse& operator=(const ResetNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetNeighborResponse(ResetNeighborResponse&& from) noexcept
    : ResetNeighborResponse() {
    *this = ::std::move(from);
  }

  inline ResetNeighborResponse& operator=(ResetNeighborResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetNeighborResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const ResetNeighborResponse*>(
               &_ResetNeighborResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ResetNeighborResponse* other);
  friend void swap(ResetNeighborResponse& a, ResetNeighborResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetNeighborResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ResetNeighborResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResetNeighborResponse& from);
  void MergeFrom(const ResetNeighborResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResetNeighborResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.ResetNeighborResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsResetNeighborResponseImpl();
};
// -------------------------------------------------------------------

class SoftResetNeighborRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.SoftResetNeighborRequest) */ {
 public:
  SoftResetNeighborRequest();
  virtual ~SoftResetNeighborRequest();

  SoftResetNeighborRequest(const SoftResetNeighborRequest& from);

  inline SoftResetNeighborRequest& operator=(const SoftResetNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftResetNeighborRequest(SoftResetNeighborRequest&& from) noexcept
    : SoftResetNeighborRequest() {
    *this = ::std::move(from);
  }

  inline SoftResetNeighborRequest& operator=(SoftResetNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftResetNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftResetNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const SoftResetNeighborRequest*>(
               &_SoftResetNeighborRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SoftResetNeighborRequest* other);
  friend void swap(SoftResetNeighborRequest& a, SoftResetNeighborRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftResetNeighborRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftResetNeighborRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftResetNeighborRequest& from);
  void MergeFrom(const SoftResetNeighborRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftResetNeighborRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SoftResetNeighborRequest_SoftResetDirection SoftResetDirection;
  static const SoftResetDirection IN =
    SoftResetNeighborRequest_SoftResetDirection_IN;
  static const SoftResetDirection OUT =
    SoftResetNeighborRequest_SoftResetDirection_OUT;
  static const SoftResetDirection BOTH =
    SoftResetNeighborRequest_SoftResetDirection_BOTH;
  static inline bool SoftResetDirection_IsValid(int value) {
    return SoftResetNeighborRequest_SoftResetDirection_IsValid(value);
  }
  static const SoftResetDirection SoftResetDirection_MIN =
    SoftResetNeighborRequest_SoftResetDirection_SoftResetDirection_MIN;
  static const SoftResetDirection SoftResetDirection_MAX =
    SoftResetNeighborRequest_SoftResetDirection_SoftResetDirection_MAX;
  static const int SoftResetDirection_ARRAYSIZE =
    SoftResetNeighborRequest_SoftResetDirection_SoftResetDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SoftResetDirection_descriptor() {
    return SoftResetNeighborRequest_SoftResetDirection_descriptor();
  }
  static inline const ::std::string& SoftResetDirection_Name(SoftResetDirection value) {
    return SoftResetNeighborRequest_SoftResetDirection_Name(value);
  }
  static inline bool SoftResetDirection_Parse(const ::std::string& name,
      SoftResetDirection* value) {
    return SoftResetNeighborRequest_SoftResetDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .gobgpapi.SoftResetNeighborRequest.SoftResetDirection direction = 2;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::gobgpapi::SoftResetNeighborRequest_SoftResetDirection direction() const;
  void set_direction(::gobgpapi::SoftResetNeighborRequest_SoftResetDirection value);

  // @@protoc_insertion_point(class_scope:gobgpapi.SoftResetNeighborRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  int direction_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsSoftResetNeighborRequestImpl();
};
// -------------------------------------------------------------------

class SoftResetNeighborResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.SoftResetNeighborResponse) */ {
 public:
  SoftResetNeighborResponse();
  virtual ~SoftResetNeighborResponse();

  SoftResetNeighborResponse(const SoftResetNeighborResponse& from);

  inline SoftResetNeighborResponse& operator=(const SoftResetNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftResetNeighborResponse(SoftResetNeighborResponse&& from) noexcept
    : SoftResetNeighborResponse() {
    *this = ::std::move(from);
  }

  inline SoftResetNeighborResponse& operator=(SoftResetNeighborResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftResetNeighborResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftResetNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const SoftResetNeighborResponse*>(
               &_SoftResetNeighborResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SoftResetNeighborResponse* other);
  friend void swap(SoftResetNeighborResponse& a, SoftResetNeighborResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftResetNeighborResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftResetNeighborResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftResetNeighborResponse& from);
  void MergeFrom(const SoftResetNeighborResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftResetNeighborResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.SoftResetNeighborResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsSoftResetNeighborResponseImpl();
};
// -------------------------------------------------------------------

class ShutdownNeighborRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ShutdownNeighborRequest) */ {
 public:
  ShutdownNeighborRequest();
  virtual ~ShutdownNeighborRequest();

  ShutdownNeighborRequest(const ShutdownNeighborRequest& from);

  inline ShutdownNeighborRequest& operator=(const ShutdownNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShutdownNeighborRequest(ShutdownNeighborRequest&& from) noexcept
    : ShutdownNeighborRequest() {
    *this = ::std::move(from);
  }

  inline ShutdownNeighborRequest& operator=(ShutdownNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShutdownNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutdownNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const ShutdownNeighborRequest*>(
               &_ShutdownNeighborRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ShutdownNeighborRequest* other);
  friend void swap(ShutdownNeighborRequest& a, ShutdownNeighborRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShutdownNeighborRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ShutdownNeighborRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShutdownNeighborRequest& from);
  void MergeFrom(const ShutdownNeighborRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShutdownNeighborRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string communication = 2;
  void clear_communication();
  static const int kCommunicationFieldNumber = 2;
  const ::std::string& communication() const;
  void set_communication(const ::std::string& value);
  #if LANG_CXX11
  void set_communication(::std::string&& value);
  #endif
  void set_communication(const char* value);
  void set_communication(const char* value, size_t size);
  ::std::string* mutable_communication();
  ::std::string* release_communication();
  void set_allocated_communication(::std::string* communication);

  // @@protoc_insertion_point(class_scope:gobgpapi.ShutdownNeighborRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr communication_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsShutdownNeighborRequestImpl();
};
// -------------------------------------------------------------------

class ShutdownNeighborResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ShutdownNeighborResponse) */ {
 public:
  ShutdownNeighborResponse();
  virtual ~ShutdownNeighborResponse();

  ShutdownNeighborResponse(const ShutdownNeighborResponse& from);

  inline ShutdownNeighborResponse& operator=(const ShutdownNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShutdownNeighborResponse(ShutdownNeighborResponse&& from) noexcept
    : ShutdownNeighborResponse() {
    *this = ::std::move(from);
  }

  inline ShutdownNeighborResponse& operator=(ShutdownNeighborResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShutdownNeighborResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutdownNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const ShutdownNeighborResponse*>(
               &_ShutdownNeighborResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ShutdownNeighborResponse* other);
  friend void swap(ShutdownNeighborResponse& a, ShutdownNeighborResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShutdownNeighborResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ShutdownNeighborResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShutdownNeighborResponse& from);
  void MergeFrom(const ShutdownNeighborResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShutdownNeighborResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.ShutdownNeighborResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsShutdownNeighborResponseImpl();
};
// -------------------------------------------------------------------

class EnableNeighborRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableNeighborRequest) */ {
 public:
  EnableNeighborRequest();
  virtual ~EnableNeighborRequest();

  EnableNeighborRequest(const EnableNeighborRequest& from);

  inline EnableNeighborRequest& operator=(const EnableNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableNeighborRequest(EnableNeighborRequest&& from) noexcept
    : EnableNeighborRequest() {
    *this = ::std::move(from);
  }

  inline EnableNeighborRequest& operator=(EnableNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const EnableNeighborRequest*>(
               &_EnableNeighborRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(EnableNeighborRequest* other);
  friend void swap(EnableNeighborRequest& a, EnableNeighborRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableNeighborRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EnableNeighborRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnableNeighborRequest& from);
  void MergeFrom(const EnableNeighborRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnableNeighborRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableNeighborRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEnableNeighborRequestImpl();
};
// -------------------------------------------------------------------

class EnableNeighborResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableNeighborResponse) */ {
 public:
  EnableNeighborResponse();
  virtual ~EnableNeighborResponse();

  EnableNeighborResponse(const EnableNeighborResponse& from);

  inline EnableNeighborResponse& operator=(const EnableNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableNeighborResponse(EnableNeighborResponse&& from) noexcept
    : EnableNeighborResponse() {
    *this = ::std::move(from);
  }

  inline EnableNeighborResponse& operator=(EnableNeighborResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableNeighborResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const EnableNeighborResponse*>(
               &_EnableNeighborResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(EnableNeighborResponse* other);
  friend void swap(EnableNeighborResponse& a, EnableNeighborResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableNeighborResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EnableNeighborResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnableNeighborResponse& from);
  void MergeFrom(const EnableNeighborResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnableNeighborResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableNeighborResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEnableNeighborResponseImpl();
};
// -------------------------------------------------------------------

class DisableNeighborRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DisableNeighborRequest) */ {
 public:
  DisableNeighborRequest();
  virtual ~DisableNeighborRequest();

  DisableNeighborRequest(const DisableNeighborRequest& from);

  inline DisableNeighborRequest& operator=(const DisableNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisableNeighborRequest(DisableNeighborRequest&& from) noexcept
    : DisableNeighborRequest() {
    *this = ::std::move(from);
  }

  inline DisableNeighborRequest& operator=(DisableNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisableNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const DisableNeighborRequest*>(
               &_DisableNeighborRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(DisableNeighborRequest* other);
  friend void swap(DisableNeighborRequest& a, DisableNeighborRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisableNeighborRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DisableNeighborRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisableNeighborRequest& from);
  void MergeFrom(const DisableNeighborRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisableNeighborRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string communication = 2;
  void clear_communication();
  static const int kCommunicationFieldNumber = 2;
  const ::std::string& communication() const;
  void set_communication(const ::std::string& value);
  #if LANG_CXX11
  void set_communication(::std::string&& value);
  #endif
  void set_communication(const char* value);
  void set_communication(const char* value, size_t size);
  ::std::string* mutable_communication();
  ::std::string* release_communication();
  void set_allocated_communication(::std::string* communication);

  // @@protoc_insertion_point(class_scope:gobgpapi.DisableNeighborRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr communication_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDisableNeighborRequestImpl();
};
// -------------------------------------------------------------------

class DisableNeighborResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DisableNeighborResponse) */ {
 public:
  DisableNeighborResponse();
  virtual ~DisableNeighborResponse();

  DisableNeighborResponse(const DisableNeighborResponse& from);

  inline DisableNeighborResponse& operator=(const DisableNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisableNeighborResponse(DisableNeighborResponse&& from) noexcept
    : DisableNeighborResponse() {
    *this = ::std::move(from);
  }

  inline DisableNeighborResponse& operator=(DisableNeighborResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisableNeighborResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const DisableNeighborResponse*>(
               &_DisableNeighborResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(DisableNeighborResponse* other);
  friend void swap(DisableNeighborResponse& a, DisableNeighborResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisableNeighborResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DisableNeighborResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisableNeighborResponse& from);
  void MergeFrom(const DisableNeighborResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisableNeighborResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DisableNeighborResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDisableNeighborResponseImpl();
};
// -------------------------------------------------------------------

class EnableMrtRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableMrtRequest) */ {
 public:
  EnableMrtRequest();
  virtual ~EnableMrtRequest();

  EnableMrtRequest(const EnableMrtRequest& from);

  inline EnableMrtRequest& operator=(const EnableMrtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableMrtRequest(EnableMrtRequest&& from) noexcept
    : EnableMrtRequest() {
    *this = ::std::move(from);
  }

  inline EnableMrtRequest& operator=(EnableMrtRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableMrtRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableMrtRequest* internal_default_instance() {
    return reinterpret_cast<const EnableMrtRequest*>(
               &_EnableMrtRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(EnableMrtRequest* other);
  friend void swap(EnableMrtRequest& a, EnableMrtRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableMrtRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EnableMrtRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnableMrtRequest& from);
  void MergeFrom(const EnableMrtRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnableMrtRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // uint64 interval = 3;
  void clear_interval();
  static const int kIntervalFieldNumber = 3;
  ::google::protobuf::uint64 interval() const;
  void set_interval(::google::protobuf::uint64 value);

  // int32 dump_type = 1;
  void clear_dump_type();
  static const int kDumpTypeFieldNumber = 1;
  ::google::protobuf::int32 dump_type() const;
  void set_dump_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableMrtRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint64 interval_;
  ::google::protobuf::int32 dump_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEnableMrtRequestImpl();
};
// -------------------------------------------------------------------

class EnableMrtResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableMrtResponse) */ {
 public:
  EnableMrtResponse();
  virtual ~EnableMrtResponse();

  EnableMrtResponse(const EnableMrtResponse& from);

  inline EnableMrtResponse& operator=(const EnableMrtResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableMrtResponse(EnableMrtResponse&& from) noexcept
    : EnableMrtResponse() {
    *this = ::std::move(from);
  }

  inline EnableMrtResponse& operator=(EnableMrtResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableMrtResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableMrtResponse* internal_default_instance() {
    return reinterpret_cast<const EnableMrtResponse*>(
               &_EnableMrtResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(EnableMrtResponse* other);
  friend void swap(EnableMrtResponse& a, EnableMrtResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableMrtResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EnableMrtResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnableMrtResponse& from);
  void MergeFrom(const EnableMrtResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnableMrtResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableMrtResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEnableMrtResponseImpl();
};
// -------------------------------------------------------------------

class DisableMrtRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DisableMrtRequest) */ {
 public:
  DisableMrtRequest();
  virtual ~DisableMrtRequest();

  DisableMrtRequest(const DisableMrtRequest& from);

  inline DisableMrtRequest& operator=(const DisableMrtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisableMrtRequest(DisableMrtRequest&& from) noexcept
    : DisableMrtRequest() {
    *this = ::std::move(from);
  }

  inline DisableMrtRequest& operator=(DisableMrtRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisableMrtRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableMrtRequest* internal_default_instance() {
    return reinterpret_cast<const DisableMrtRequest*>(
               &_DisableMrtRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(DisableMrtRequest* other);
  friend void swap(DisableMrtRequest& a, DisableMrtRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisableMrtRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DisableMrtRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisableMrtRequest& from);
  void MergeFrom(const DisableMrtRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisableMrtRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DisableMrtRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDisableMrtRequestImpl();
};
// -------------------------------------------------------------------

class DisableMrtResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DisableMrtResponse) */ {
 public:
  DisableMrtResponse();
  virtual ~DisableMrtResponse();

  DisableMrtResponse(const DisableMrtResponse& from);

  inline DisableMrtResponse& operator=(const DisableMrtResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisableMrtResponse(DisableMrtResponse&& from) noexcept
    : DisableMrtResponse() {
    *this = ::std::move(from);
  }

  inline DisableMrtResponse& operator=(DisableMrtResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisableMrtResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableMrtResponse* internal_default_instance() {
    return reinterpret_cast<const DisableMrtResponse*>(
               &_DisableMrtResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(DisableMrtResponse* other);
  friend void swap(DisableMrtResponse& a, DisableMrtResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisableMrtResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DisableMrtResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisableMrtResponse& from);
  void MergeFrom(const DisableMrtResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisableMrtResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DisableMrtResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDisableMrtResponseImpl();
};
// -------------------------------------------------------------------

class InjectMrtRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.InjectMrtRequest) */ {
 public:
  InjectMrtRequest();
  virtual ~InjectMrtRequest();

  InjectMrtRequest(const InjectMrtRequest& from);

  inline InjectMrtRequest& operator=(const InjectMrtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InjectMrtRequest(InjectMrtRequest&& from) noexcept
    : InjectMrtRequest() {
    *this = ::std::move(from);
  }

  inline InjectMrtRequest& operator=(InjectMrtRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InjectMrtRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InjectMrtRequest* internal_default_instance() {
    return reinterpret_cast<const InjectMrtRequest*>(
               &_InjectMrtRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(InjectMrtRequest* other);
  friend void swap(InjectMrtRequest& a, InjectMrtRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InjectMrtRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InjectMrtRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InjectMrtRequest& from);
  void MergeFrom(const InjectMrtRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InjectMrtRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Path paths = 3;
  int paths_size() const;
  void clear_paths();
  static const int kPathsFieldNumber = 3;
  const ::gobgpapi::Path& paths(int index) const;
  ::gobgpapi::Path* mutable_paths(int index);
  ::gobgpapi::Path* add_paths();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
      mutable_paths();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
      paths() const;

  // string vrf_id = 2;
  void clear_vrf_id();
  static const int kVrfIdFieldNumber = 2;
  const ::std::string& vrf_id() const;
  void set_vrf_id(const ::std::string& value);
  #if LANG_CXX11
  void set_vrf_id(::std::string&& value);
  #endif
  void set_vrf_id(const char* value);
  void set_vrf_id(const char* value, size_t size);
  ::std::string* mutable_vrf_id();
  ::std::string* release_vrf_id();
  void set_allocated_vrf_id(::std::string* vrf_id);

  // .gobgpapi.Resource resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // @@protoc_insertion_point(class_scope:gobgpapi.InjectMrtRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path > paths_;
  ::google::protobuf::internal::ArenaStringPtr vrf_id_;
  int resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsInjectMrtRequestImpl();
};
// -------------------------------------------------------------------

class InjectMrtResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.InjectMrtResponse) */ {
 public:
  InjectMrtResponse();
  virtual ~InjectMrtResponse();

  InjectMrtResponse(const InjectMrtResponse& from);

  inline InjectMrtResponse& operator=(const InjectMrtResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InjectMrtResponse(InjectMrtResponse&& from) noexcept
    : InjectMrtResponse() {
    *this = ::std::move(from);
  }

  inline InjectMrtResponse& operator=(InjectMrtResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InjectMrtResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InjectMrtResponse* internal_default_instance() {
    return reinterpret_cast<const InjectMrtResponse*>(
               &_InjectMrtResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(InjectMrtResponse* other);
  friend void swap(InjectMrtResponse& a, InjectMrtResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InjectMrtResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InjectMrtResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InjectMrtResponse& from);
  void MergeFrom(const InjectMrtResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InjectMrtResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.InjectMrtResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsInjectMrtResponseImpl();
};
// -------------------------------------------------------------------

class AddBmpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddBmpRequest) */ {
 public:
  AddBmpRequest();
  virtual ~AddBmpRequest();

  AddBmpRequest(const AddBmpRequest& from);

  inline AddBmpRequest& operator=(const AddBmpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddBmpRequest(AddBmpRequest&& from) noexcept
    : AddBmpRequest() {
    *this = ::std::move(from);
  }

  inline AddBmpRequest& operator=(AddBmpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBmpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddBmpRequest* internal_default_instance() {
    return reinterpret_cast<const AddBmpRequest*>(
               &_AddBmpRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(AddBmpRequest* other);
  friend void swap(AddBmpRequest& a, AddBmpRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddBmpRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddBmpRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddBmpRequest& from);
  void MergeFrom(const AddBmpRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddBmpRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AddBmpRequest_MonitoringPolicy MonitoringPolicy;
  static const MonitoringPolicy PRE =
    AddBmpRequest_MonitoringPolicy_PRE;
  static const MonitoringPolicy POST =
    AddBmpRequest_MonitoringPolicy_POST;
  static const MonitoringPolicy BOTH =
    AddBmpRequest_MonitoringPolicy_BOTH;
  static const MonitoringPolicy LOCAL =
    AddBmpRequest_MonitoringPolicy_LOCAL;
  static const MonitoringPolicy ALL =
    AddBmpRequest_MonitoringPolicy_ALL;
  static inline bool MonitoringPolicy_IsValid(int value) {
    return AddBmpRequest_MonitoringPolicy_IsValid(value);
  }
  static const MonitoringPolicy MonitoringPolicy_MIN =
    AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MIN;
  static const MonitoringPolicy MonitoringPolicy_MAX =
    AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MAX;
  static const int MonitoringPolicy_ARRAYSIZE =
    AddBmpRequest_MonitoringPolicy_MonitoringPolicy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MonitoringPolicy_descriptor() {
    return AddBmpRequest_MonitoringPolicy_descriptor();
  }
  static inline const ::std::string& MonitoringPolicy_Name(MonitoringPolicy value) {
    return AddBmpRequest_MonitoringPolicy_Name(value);
  }
  static inline bool MonitoringPolicy_Parse(const ::std::string& name,
      MonitoringPolicy* value) {
    return AddBmpRequest_MonitoringPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // .gobgpapi.AddBmpRequest.MonitoringPolicy type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::gobgpapi::AddBmpRequest_MonitoringPolicy type() const;
  void set_type(::gobgpapi::AddBmpRequest_MonitoringPolicy value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddBmpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::uint32 port_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddBmpRequestImpl();
};
// -------------------------------------------------------------------

class AddBmpResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddBmpResponse) */ {
 public:
  AddBmpResponse();
  virtual ~AddBmpResponse();

  AddBmpResponse(const AddBmpResponse& from);

  inline AddBmpResponse& operator=(const AddBmpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddBmpResponse(AddBmpResponse&& from) noexcept
    : AddBmpResponse() {
    *this = ::std::move(from);
  }

  inline AddBmpResponse& operator=(AddBmpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBmpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddBmpResponse* internal_default_instance() {
    return reinterpret_cast<const AddBmpResponse*>(
               &_AddBmpResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(AddBmpResponse* other);
  friend void swap(AddBmpResponse& a, AddBmpResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddBmpResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddBmpResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddBmpResponse& from);
  void MergeFrom(const AddBmpResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddBmpResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.AddBmpResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddBmpResponseImpl();
};
// -------------------------------------------------------------------

class DeleteBmpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteBmpRequest) */ {
 public:
  DeleteBmpRequest();
  virtual ~DeleteBmpRequest();

  DeleteBmpRequest(const DeleteBmpRequest& from);

  inline DeleteBmpRequest& operator=(const DeleteBmpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteBmpRequest(DeleteBmpRequest&& from) noexcept
    : DeleteBmpRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBmpRequest& operator=(DeleteBmpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteBmpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBmpRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBmpRequest*>(
               &_DeleteBmpRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(DeleteBmpRequest* other);
  friend void swap(DeleteBmpRequest& a, DeleteBmpRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteBmpRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteBmpRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteBmpRequest& from);
  void MergeFrom(const DeleteBmpRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteBmpRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteBmpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteBmpRequestImpl();
};
// -------------------------------------------------------------------

class DeleteBmpResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteBmpResponse) */ {
 public:
  DeleteBmpResponse();
  virtual ~DeleteBmpResponse();

  DeleteBmpResponse(const DeleteBmpResponse& from);

  inline DeleteBmpResponse& operator=(const DeleteBmpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteBmpResponse(DeleteBmpResponse&& from) noexcept
    : DeleteBmpResponse() {
    *this = ::std::move(from);
  }

  inline DeleteBmpResponse& operator=(DeleteBmpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteBmpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBmpResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteBmpResponse*>(
               &_DeleteBmpResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(DeleteBmpResponse* other);
  friend void swap(DeleteBmpResponse& a, DeleteBmpResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteBmpResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteBmpResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteBmpResponse& from);
  void MergeFrom(const DeleteBmpResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteBmpResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteBmpResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteBmpResponseImpl();
};
// -------------------------------------------------------------------

class MonitorRibRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MonitorRibRequest) */ {
 public:
  MonitorRibRequest();
  virtual ~MonitorRibRequest();

  MonitorRibRequest(const MonitorRibRequest& from);

  inline MonitorRibRequest& operator=(const MonitorRibRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitorRibRequest(MonitorRibRequest&& from) noexcept
    : MonitorRibRequest() {
    *this = ::std::move(from);
  }

  inline MonitorRibRequest& operator=(MonitorRibRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorRibRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorRibRequest* internal_default_instance() {
    return reinterpret_cast<const MonitorRibRequest*>(
               &_MonitorRibRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(MonitorRibRequest* other);
  friend void swap(MonitorRibRequest& a, MonitorRibRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitorRibRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MonitorRibRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MonitorRibRequest& from);
  void MergeFrom(const MonitorRibRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MonitorRibRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Table table = 1;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::gobgpapi::Table& table() const;
  ::gobgpapi::Table* release_table();
  ::gobgpapi::Table* mutable_table();
  void set_allocated_table(::gobgpapi::Table* table);

  // bool current = 2;
  void clear_current();
  static const int kCurrentFieldNumber = 2;
  bool current() const;
  void set_current(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.MonitorRibRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Table* table_;
  bool current_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsMonitorRibRequestImpl();
};
// -------------------------------------------------------------------

class RPKIConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RPKIConf) */ {
 public:
  RPKIConf();
  virtual ~RPKIConf();

  RPKIConf(const RPKIConf& from);

  inline RPKIConf& operator=(const RPKIConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPKIConf(RPKIConf&& from) noexcept
    : RPKIConf() {
    *this = ::std::move(from);
  }

  inline RPKIConf& operator=(RPKIConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPKIConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPKIConf* internal_default_instance() {
    return reinterpret_cast<const RPKIConf*>(
               &_RPKIConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(RPKIConf* other);
  friend void swap(RPKIConf& a, RPKIConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPKIConf* New() const PROTOBUF_FINAL { return New(NULL); }

  RPKIConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPKIConf& from);
  void MergeFrom(const RPKIConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPKIConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string remote_port = 2;
  void clear_remote_port();
  static const int kRemotePortFieldNumber = 2;
  const ::std::string& remote_port() const;
  void set_remote_port(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_port(::std::string&& value);
  #endif
  void set_remote_port(const char* value);
  void set_remote_port(const char* value, size_t size);
  ::std::string* mutable_remote_port();
  ::std::string* release_remote_port();
  void set_allocated_remote_port(::std::string* remote_port);

  // @@protoc_insertion_point(class_scope:gobgpapi.RPKIConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr remote_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRPKIConfImpl();
};
// -------------------------------------------------------------------

class RPKIState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RPKIState) */ {
 public:
  RPKIState();
  virtual ~RPKIState();

  RPKIState(const RPKIState& from);

  inline RPKIState& operator=(const RPKIState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPKIState(RPKIState&& from) noexcept
    : RPKIState() {
    *this = ::std::move(from);
  }

  inline RPKIState& operator=(RPKIState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPKIState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPKIState* internal_default_instance() {
    return reinterpret_cast<const RPKIState*>(
               &_RPKIState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(RPKIState* other);
  friend void swap(RPKIState& a, RPKIState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPKIState* New() const PROTOBUF_FINAL { return New(NULL); }

  RPKIState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPKIState& from);
  void MergeFrom(const RPKIState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPKIState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 uptime = 1;
  void clear_uptime();
  static const int kUptimeFieldNumber = 1;
  ::google::protobuf::int64 uptime() const;
  void set_uptime(::google::protobuf::int64 value);

  // int64 downtime = 2;
  void clear_downtime();
  static const int kDowntimeFieldNumber = 2;
  ::google::protobuf::int64 downtime() const;
  void set_downtime(::google::protobuf::int64 value);

  // bool up = 3;
  void clear_up();
  static const int kUpFieldNumber = 3;
  bool up() const;
  void set_up(bool value);

  // uint32 record_ipv4 = 4;
  void clear_record_ipv4();
  static const int kRecordIpv4FieldNumber = 4;
  ::google::protobuf::uint32 record_ipv4() const;
  void set_record_ipv4(::google::protobuf::uint32 value);

  // uint32 record_ipv6 = 5;
  void clear_record_ipv6();
  static const int kRecordIpv6FieldNumber = 5;
  ::google::protobuf::uint32 record_ipv6() const;
  void set_record_ipv6(::google::protobuf::uint32 value);

  // uint32 prefix_ipv4 = 6;
  void clear_prefix_ipv4();
  static const int kPrefixIpv4FieldNumber = 6;
  ::google::protobuf::uint32 prefix_ipv4() const;
  void set_prefix_ipv4(::google::protobuf::uint32 value);

  // uint32 prefix_ipv6 = 7;
  void clear_prefix_ipv6();
  static const int kPrefixIpv6FieldNumber = 7;
  ::google::protobuf::uint32 prefix_ipv6() const;
  void set_prefix_ipv6(::google::protobuf::uint32 value);

  // uint32 serial = 8;
  void clear_serial();
  static const int kSerialFieldNumber = 8;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // int64 received_ipv4 = 9;
  void clear_received_ipv4();
  static const int kReceivedIpv4FieldNumber = 9;
  ::google::protobuf::int64 received_ipv4() const;
  void set_received_ipv4(::google::protobuf::int64 value);

  // int64 received_ipv6 = 10;
  void clear_received_ipv6();
  static const int kReceivedIpv6FieldNumber = 10;
  ::google::protobuf::int64 received_ipv6() const;
  void set_received_ipv6(::google::protobuf::int64 value);

  // int64 serial_notify = 11;
  void clear_serial_notify();
  static const int kSerialNotifyFieldNumber = 11;
  ::google::protobuf::int64 serial_notify() const;
  void set_serial_notify(::google::protobuf::int64 value);

  // int64 cache_reset = 12;
  void clear_cache_reset();
  static const int kCacheResetFieldNumber = 12;
  ::google::protobuf::int64 cache_reset() const;
  void set_cache_reset(::google::protobuf::int64 value);

  // int64 cache_response = 13;
  void clear_cache_response();
  static const int kCacheResponseFieldNumber = 13;
  ::google::protobuf::int64 cache_response() const;
  void set_cache_response(::google::protobuf::int64 value);

  // int64 end_of_data = 14;
  void clear_end_of_data();
  static const int kEndOfDataFieldNumber = 14;
  ::google::protobuf::int64 end_of_data() const;
  void set_end_of_data(::google::protobuf::int64 value);

  // int64 error = 15;
  void clear_error();
  static const int kErrorFieldNumber = 15;
  ::google::protobuf::int64 error() const;
  void set_error(::google::protobuf::int64 value);

  // int64 serial_query = 16;
  void clear_serial_query();
  static const int kSerialQueryFieldNumber = 16;
  ::google::protobuf::int64 serial_query() const;
  void set_serial_query(::google::protobuf::int64 value);

  // int64 reset_query = 17;
  void clear_reset_query();
  static const int kResetQueryFieldNumber = 17;
  ::google::protobuf::int64 reset_query() const;
  void set_reset_query(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RPKIState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 uptime_;
  ::google::protobuf::int64 downtime_;
  bool up_;
  ::google::protobuf::uint32 record_ipv4_;
  ::google::protobuf::uint32 record_ipv6_;
  ::google::protobuf::uint32 prefix_ipv4_;
  ::google::protobuf::uint32 prefix_ipv6_;
  ::google::protobuf::uint32 serial_;
  ::google::protobuf::int64 received_ipv4_;
  ::google::protobuf::int64 received_ipv6_;
  ::google::protobuf::int64 serial_notify_;
  ::google::protobuf::int64 cache_reset_;
  ::google::protobuf::int64 cache_response_;
  ::google::protobuf::int64 end_of_data_;
  ::google::protobuf::int64 error_;
  ::google::protobuf::int64 serial_query_;
  ::google::protobuf::int64 reset_query_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRPKIStateImpl();
};
// -------------------------------------------------------------------

class Rpki : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Rpki) */ {
 public:
  Rpki();
  virtual ~Rpki();

  Rpki(const Rpki& from);

  inline Rpki& operator=(const Rpki& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rpki(Rpki&& from) noexcept
    : Rpki() {
    *this = ::std::move(from);
  }

  inline Rpki& operator=(Rpki&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rpki& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rpki* internal_default_instance() {
    return reinterpret_cast<const Rpki*>(
               &_Rpki_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(Rpki* other);
  friend void swap(Rpki& a, Rpki& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rpki* New() const PROTOBUF_FINAL { return New(NULL); }

  Rpki* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rpki& from);
  void MergeFrom(const Rpki& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rpki* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.RPKIConf conf = 1;
  bool has_conf() const;
  void clear_conf();
  static const int kConfFieldNumber = 1;
  const ::gobgpapi::RPKIConf& conf() const;
  ::gobgpapi::RPKIConf* release_conf();
  ::gobgpapi::RPKIConf* mutable_conf();
  void set_allocated_conf(::gobgpapi::RPKIConf* conf);

  // .gobgpapi.RPKIState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::RPKIState& state() const;
  ::gobgpapi::RPKIState* release_state();
  ::gobgpapi::RPKIState* mutable_state();
  void set_allocated_state(::gobgpapi::RPKIState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.Rpki)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::RPKIConf* conf_;
  ::gobgpapi::RPKIState* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRpkiImpl();
};
// -------------------------------------------------------------------

class GetRpkiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetRpkiRequest) */ {
 public:
  GetRpkiRequest();
  virtual ~GetRpkiRequest();

  GetRpkiRequest(const GetRpkiRequest& from);

  inline GetRpkiRequest& operator=(const GetRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRpkiRequest(GetRpkiRequest&& from) noexcept
    : GetRpkiRequest() {
    *this = ::std::move(from);
  }

  inline GetRpkiRequest& operator=(GetRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const GetRpkiRequest*>(
               &_GetRpkiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(GetRpkiRequest* other);
  friend void swap(GetRpkiRequest& a, GetRpkiRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRpkiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRpkiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRpkiRequest& from);
  void MergeFrom(const GetRpkiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRpkiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 family = 1;
  void clear_family();
  static const int kFamilyFieldNumber = 1;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetRpkiRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 family_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetRpkiRequestImpl();
};
// -------------------------------------------------------------------

class GetRpkiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetRpkiResponse) */ {
 public:
  GetRpkiResponse();
  virtual ~GetRpkiResponse();

  GetRpkiResponse(const GetRpkiResponse& from);

  inline GetRpkiResponse& operator=(const GetRpkiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRpkiResponse(GetRpkiResponse&& from) noexcept
    : GetRpkiResponse() {
    *this = ::std::move(from);
  }

  inline GetRpkiResponse& operator=(GetRpkiResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRpkiResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRpkiResponse* internal_default_instance() {
    return reinterpret_cast<const GetRpkiResponse*>(
               &_GetRpkiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(GetRpkiResponse* other);
  friend void swap(GetRpkiResponse& a, GetRpkiResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRpkiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRpkiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRpkiResponse& from);
  void MergeFrom(const GetRpkiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRpkiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Rpki servers = 1;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 1;
  const ::gobgpapi::Rpki& servers(int index) const;
  ::gobgpapi::Rpki* mutable_servers(int index);
  ::gobgpapi::Rpki* add_servers();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Rpki >*
      mutable_servers();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Rpki >&
      servers() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.GetRpkiResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Rpki > servers_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetRpkiResponseImpl();
};
// -------------------------------------------------------------------

class AddRpkiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddRpkiRequest) */ {
 public:
  AddRpkiRequest();
  virtual ~AddRpkiRequest();

  AddRpkiRequest(const AddRpkiRequest& from);

  inline AddRpkiRequest& operator=(const AddRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRpkiRequest(AddRpkiRequest&& from) noexcept
    : AddRpkiRequest() {
    *this = ::std::move(from);
  }

  inline AddRpkiRequest& operator=(AddRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const AddRpkiRequest*>(
               &_AddRpkiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(AddRpkiRequest* other);
  friend void swap(AddRpkiRequest& a, AddRpkiRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRpkiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddRpkiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddRpkiRequest& from);
  void MergeFrom(const AddRpkiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddRpkiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // int64 lifetime = 3;
  void clear_lifetime();
  static const int kLifetimeFieldNumber = 3;
  ::google::protobuf::int64 lifetime() const;
  void set_lifetime(::google::protobuf::int64 value);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddRpkiRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int64 lifetime_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddRpkiRequestImpl();
};
// -------------------------------------------------------------------

class AddRpkiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddRpkiResponse) */ {
 public:
  AddRpkiResponse();
  virtual ~AddRpkiResponse();

  AddRpkiResponse(const AddRpkiResponse& from);

  inline AddRpkiResponse& operator=(const AddRpkiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRpkiResponse(AddRpkiResponse&& from) noexcept
    : AddRpkiResponse() {
    *this = ::std::move(from);
  }

  inline AddRpkiResponse& operator=(AddRpkiResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRpkiResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRpkiResponse* internal_default_instance() {
    return reinterpret_cast<const AddRpkiResponse*>(
               &_AddRpkiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(AddRpkiResponse* other);
  friend void swap(AddRpkiResponse& a, AddRpkiResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRpkiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddRpkiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddRpkiResponse& from);
  void MergeFrom(const AddRpkiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddRpkiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.AddRpkiResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddRpkiResponseImpl();
};
// -------------------------------------------------------------------

class DeleteRpkiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteRpkiRequest) */ {
 public:
  DeleteRpkiRequest();
  virtual ~DeleteRpkiRequest();

  DeleteRpkiRequest(const DeleteRpkiRequest& from);

  inline DeleteRpkiRequest& operator=(const DeleteRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRpkiRequest(DeleteRpkiRequest&& from) noexcept
    : DeleteRpkiRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRpkiRequest& operator=(DeleteRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRpkiRequest*>(
               &_DeleteRpkiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(DeleteRpkiRequest* other);
  friend void swap(DeleteRpkiRequest& a, DeleteRpkiRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRpkiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteRpkiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteRpkiRequest& from);
  void MergeFrom(const DeleteRpkiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteRpkiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteRpkiRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteRpkiRequestImpl();
};
// -------------------------------------------------------------------

class DeleteRpkiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteRpkiResponse) */ {
 public:
  DeleteRpkiResponse();
  virtual ~DeleteRpkiResponse();

  DeleteRpkiResponse(const DeleteRpkiResponse& from);

  inline DeleteRpkiResponse& operator=(const DeleteRpkiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRpkiResponse(DeleteRpkiResponse&& from) noexcept
    : DeleteRpkiResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRpkiResponse& operator=(DeleteRpkiResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRpkiResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRpkiResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRpkiResponse*>(
               &_DeleteRpkiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(DeleteRpkiResponse* other);
  friend void swap(DeleteRpkiResponse& a, DeleteRpkiResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRpkiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteRpkiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteRpkiResponse& from);
  void MergeFrom(const DeleteRpkiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteRpkiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteRpkiResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteRpkiResponseImpl();
};
// -------------------------------------------------------------------

class EnableRpkiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableRpkiRequest) */ {
 public:
  EnableRpkiRequest();
  virtual ~EnableRpkiRequest();

  EnableRpkiRequest(const EnableRpkiRequest& from);

  inline EnableRpkiRequest& operator=(const EnableRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableRpkiRequest(EnableRpkiRequest&& from) noexcept
    : EnableRpkiRequest() {
    *this = ::std::move(from);
  }

  inline EnableRpkiRequest& operator=(EnableRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const EnableRpkiRequest*>(
               &_EnableRpkiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(EnableRpkiRequest* other);
  friend void swap(EnableRpkiRequest& a, EnableRpkiRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableRpkiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EnableRpkiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnableRpkiRequest& from);
  void MergeFrom(const EnableRpkiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnableRpkiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableRpkiRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEnableRpkiRequestImpl();
};
// -------------------------------------------------------------------

class EnableRpkiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableRpkiResponse) */ {
 public:
  EnableRpkiResponse();
  virtual ~EnableRpkiResponse();

  EnableRpkiResponse(const EnableRpkiResponse& from);

  inline EnableRpkiResponse& operator=(const EnableRpkiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableRpkiResponse(EnableRpkiResponse&& from) noexcept
    : EnableRpkiResponse() {
    *this = ::std::move(from);
  }

  inline EnableRpkiResponse& operator=(EnableRpkiResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableRpkiResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableRpkiResponse* internal_default_instance() {
    return reinterpret_cast<const EnableRpkiResponse*>(
               &_EnableRpkiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(EnableRpkiResponse* other);
  friend void swap(EnableRpkiResponse& a, EnableRpkiResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableRpkiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EnableRpkiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnableRpkiResponse& from);
  void MergeFrom(const EnableRpkiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnableRpkiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableRpkiResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEnableRpkiResponseImpl();
};
// -------------------------------------------------------------------

class DisableRpkiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DisableRpkiRequest) */ {
 public:
  DisableRpkiRequest();
  virtual ~DisableRpkiRequest();

  DisableRpkiRequest(const DisableRpkiRequest& from);

  inline DisableRpkiRequest& operator=(const DisableRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisableRpkiRequest(DisableRpkiRequest&& from) noexcept
    : DisableRpkiRequest() {
    *this = ::std::move(from);
  }

  inline DisableRpkiRequest& operator=(DisableRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisableRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const DisableRpkiRequest*>(
               &_DisableRpkiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(DisableRpkiRequest* other);
  friend void swap(DisableRpkiRequest& a, DisableRpkiRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisableRpkiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DisableRpkiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisableRpkiRequest& from);
  void MergeFrom(const DisableRpkiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisableRpkiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:gobgpapi.DisableRpkiRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDisableRpkiRequestImpl();
};
// -------------------------------------------------------------------

class DisableRpkiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DisableRpkiResponse) */ {
 public:
  DisableRpkiResponse();
  virtual ~DisableRpkiResponse();

  DisableRpkiResponse(const DisableRpkiResponse& from);

  inline DisableRpkiResponse& operator=(const DisableRpkiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisableRpkiResponse(DisableRpkiResponse&& from) noexcept
    : DisableRpkiResponse() {
    *this = ::std::move(from);
  }

  inline DisableRpkiResponse& operator=(DisableRpkiResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisableRpkiResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableRpkiResponse* internal_default_instance() {
    return reinterpret_cast<const DisableRpkiResponse*>(
               &_DisableRpkiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(DisableRpkiResponse* other);
  friend void swap(DisableRpkiResponse& a, DisableRpkiResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisableRpkiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DisableRpkiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisableRpkiResponse& from);
  void MergeFrom(const DisableRpkiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisableRpkiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DisableRpkiResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDisableRpkiResponseImpl();
};
// -------------------------------------------------------------------

class ResetRpkiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ResetRpkiRequest) */ {
 public:
  ResetRpkiRequest();
  virtual ~ResetRpkiRequest();

  ResetRpkiRequest(const ResetRpkiRequest& from);

  inline ResetRpkiRequest& operator=(const ResetRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetRpkiRequest(ResetRpkiRequest&& from) noexcept
    : ResetRpkiRequest() {
    *this = ::std::move(from);
  }

  inline ResetRpkiRequest& operator=(ResetRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const ResetRpkiRequest*>(
               &_ResetRpkiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(ResetRpkiRequest* other);
  friend void swap(ResetRpkiRequest& a, ResetRpkiRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetRpkiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ResetRpkiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResetRpkiRequest& from);
  void MergeFrom(const ResetRpkiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResetRpkiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:gobgpapi.ResetRpkiRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsResetRpkiRequestImpl();
};
// -------------------------------------------------------------------

class ResetRpkiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ResetRpkiResponse) */ {
 public:
  ResetRpkiResponse();
  virtual ~ResetRpkiResponse();

  ResetRpkiResponse(const ResetRpkiResponse& from);

  inline ResetRpkiResponse& operator=(const ResetRpkiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetRpkiResponse(ResetRpkiResponse&& from) noexcept
    : ResetRpkiResponse() {
    *this = ::std::move(from);
  }

  inline ResetRpkiResponse& operator=(ResetRpkiResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetRpkiResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetRpkiResponse* internal_default_instance() {
    return reinterpret_cast<const ResetRpkiResponse*>(
               &_ResetRpkiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(ResetRpkiResponse* other);
  friend void swap(ResetRpkiResponse& a, ResetRpkiResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetRpkiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ResetRpkiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResetRpkiResponse& from);
  void MergeFrom(const ResetRpkiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResetRpkiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.ResetRpkiResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsResetRpkiResponseImpl();
};
// -------------------------------------------------------------------

class SoftResetRpkiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.SoftResetRpkiRequest) */ {
 public:
  SoftResetRpkiRequest();
  virtual ~SoftResetRpkiRequest();

  SoftResetRpkiRequest(const SoftResetRpkiRequest& from);

  inline SoftResetRpkiRequest& operator=(const SoftResetRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftResetRpkiRequest(SoftResetRpkiRequest&& from) noexcept
    : SoftResetRpkiRequest() {
    *this = ::std::move(from);
  }

  inline SoftResetRpkiRequest& operator=(SoftResetRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftResetRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftResetRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const SoftResetRpkiRequest*>(
               &_SoftResetRpkiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(SoftResetRpkiRequest* other);
  friend void swap(SoftResetRpkiRequest& a, SoftResetRpkiRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftResetRpkiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftResetRpkiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftResetRpkiRequest& from);
  void MergeFrom(const SoftResetRpkiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftResetRpkiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:gobgpapi.SoftResetRpkiRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsSoftResetRpkiRequestImpl();
};
// -------------------------------------------------------------------

class SoftResetRpkiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.SoftResetRpkiResponse) */ {
 public:
  SoftResetRpkiResponse();
  virtual ~SoftResetRpkiResponse();

  SoftResetRpkiResponse(const SoftResetRpkiResponse& from);

  inline SoftResetRpkiResponse& operator=(const SoftResetRpkiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftResetRpkiResponse(SoftResetRpkiResponse&& from) noexcept
    : SoftResetRpkiResponse() {
    *this = ::std::move(from);
  }

  inline SoftResetRpkiResponse& operator=(SoftResetRpkiResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftResetRpkiResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftResetRpkiResponse* internal_default_instance() {
    return reinterpret_cast<const SoftResetRpkiResponse*>(
               &_SoftResetRpkiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(SoftResetRpkiResponse* other);
  friend void swap(SoftResetRpkiResponse& a, SoftResetRpkiResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftResetRpkiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftResetRpkiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftResetRpkiResponse& from);
  void MergeFrom(const SoftResetRpkiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftResetRpkiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.SoftResetRpkiResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsSoftResetRpkiResponseImpl();
};
// -------------------------------------------------------------------

class EnableZebraRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableZebraRequest) */ {
 public:
  EnableZebraRequest();
  virtual ~EnableZebraRequest();

  EnableZebraRequest(const EnableZebraRequest& from);

  inline EnableZebraRequest& operator=(const EnableZebraRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableZebraRequest(EnableZebraRequest&& from) noexcept
    : EnableZebraRequest() {
    *this = ::std::move(from);
  }

  inline EnableZebraRequest& operator=(EnableZebraRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableZebraRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableZebraRequest* internal_default_instance() {
    return reinterpret_cast<const EnableZebraRequest*>(
               &_EnableZebraRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(EnableZebraRequest* other);
  friend void swap(EnableZebraRequest& a, EnableZebraRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableZebraRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EnableZebraRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnableZebraRequest& from);
  void MergeFrom(const EnableZebraRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnableZebraRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string route_types = 2;
  int route_types_size() const;
  void clear_route_types();
  static const int kRouteTypesFieldNumber = 2;
  const ::std::string& route_types(int index) const;
  ::std::string* mutable_route_types(int index);
  void set_route_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_route_types(int index, ::std::string&& value);
  #endif
  void set_route_types(int index, const char* value);
  void set_route_types(int index, const char* value, size_t size);
  ::std::string* add_route_types();
  void add_route_types(const ::std::string& value);
  #if LANG_CXX11
  void add_route_types(::std::string&& value);
  #endif
  void add_route_types(const char* value);
  void add_route_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& route_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_route_types();

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // uint32 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // bool nexthop_trigger_enable = 4;
  void clear_nexthop_trigger_enable();
  static const int kNexthopTriggerEnableFieldNumber = 4;
  bool nexthop_trigger_enable() const;
  void set_nexthop_trigger_enable(bool value);

  // uint32 nexthop_trigger_delay = 5;
  void clear_nexthop_trigger_delay();
  static const int kNexthopTriggerDelayFieldNumber = 5;
  ::google::protobuf::uint32 nexthop_trigger_delay() const;
  void set_nexthop_trigger_delay(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableZebraRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> route_types_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 version_;
  bool nexthop_trigger_enable_;
  ::google::protobuf::uint32 nexthop_trigger_delay_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEnableZebraRequestImpl();
};
// -------------------------------------------------------------------

class EnableZebraResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableZebraResponse) */ {
 public:
  EnableZebraResponse();
  virtual ~EnableZebraResponse();

  EnableZebraResponse(const EnableZebraResponse& from);

  inline EnableZebraResponse& operator=(const EnableZebraResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableZebraResponse(EnableZebraResponse&& from) noexcept
    : EnableZebraResponse() {
    *this = ::std::move(from);
  }

  inline EnableZebraResponse& operator=(EnableZebraResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableZebraResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableZebraResponse* internal_default_instance() {
    return reinterpret_cast<const EnableZebraResponse*>(
               &_EnableZebraResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(EnableZebraResponse* other);
  friend void swap(EnableZebraResponse& a, EnableZebraResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableZebraResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EnableZebraResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnableZebraResponse& from);
  void MergeFrom(const EnableZebraResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnableZebraResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableZebraResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEnableZebraResponseImpl();
};
// -------------------------------------------------------------------

class GetVrfRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetVrfRequest) */ {
 public:
  GetVrfRequest();
  virtual ~GetVrfRequest();

  GetVrfRequest(const GetVrfRequest& from);

  inline GetVrfRequest& operator=(const GetVrfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVrfRequest(GetVrfRequest&& from) noexcept
    : GetVrfRequest() {
    *this = ::std::move(from);
  }

  inline GetVrfRequest& operator=(GetVrfRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVrfRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVrfRequest* internal_default_instance() {
    return reinterpret_cast<const GetVrfRequest*>(
               &_GetVrfRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(GetVrfRequest* other);
  friend void swap(GetVrfRequest& a, GetVrfRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVrfRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetVrfRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetVrfRequest& from);
  void MergeFrom(const GetVrfRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetVrfRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.GetVrfRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetVrfRequestImpl();
};
// -------------------------------------------------------------------

class GetVrfResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetVrfResponse) */ {
 public:
  GetVrfResponse();
  virtual ~GetVrfResponse();

  GetVrfResponse(const GetVrfResponse& from);

  inline GetVrfResponse& operator=(const GetVrfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVrfResponse(GetVrfResponse&& from) noexcept
    : GetVrfResponse() {
    *this = ::std::move(from);
  }

  inline GetVrfResponse& operator=(GetVrfResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVrfResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVrfResponse* internal_default_instance() {
    return reinterpret_cast<const GetVrfResponse*>(
               &_GetVrfResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(GetVrfResponse* other);
  friend void swap(GetVrfResponse& a, GetVrfResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVrfResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetVrfResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetVrfResponse& from);
  void MergeFrom(const GetVrfResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetVrfResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Vrf vrfs = 1;
  int vrfs_size() const;
  void clear_vrfs();
  static const int kVrfsFieldNumber = 1;
  const ::gobgpapi::Vrf& vrfs(int index) const;
  ::gobgpapi::Vrf* mutable_vrfs(int index);
  ::gobgpapi::Vrf* add_vrfs();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Vrf >*
      mutable_vrfs();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Vrf >&
      vrfs() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.GetVrfResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Vrf > vrfs_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetVrfResponseImpl();
};
// -------------------------------------------------------------------

class AddVrfRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddVrfRequest) */ {
 public:
  AddVrfRequest();
  virtual ~AddVrfRequest();

  AddVrfRequest(const AddVrfRequest& from);

  inline AddVrfRequest& operator=(const AddVrfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddVrfRequest(AddVrfRequest&& from) noexcept
    : AddVrfRequest() {
    *this = ::std::move(from);
  }

  inline AddVrfRequest& operator=(AddVrfRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddVrfRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddVrfRequest* internal_default_instance() {
    return reinterpret_cast<const AddVrfRequest*>(
               &_AddVrfRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(AddVrfRequest* other);
  friend void swap(AddVrfRequest& a, AddVrfRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddVrfRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddVrfRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddVrfRequest& from);
  void MergeFrom(const AddVrfRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddVrfRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Vrf vrf = 1;
  bool has_vrf() const;
  void clear_vrf();
  static const int kVrfFieldNumber = 1;
  const ::gobgpapi::Vrf& vrf() const;
  ::gobgpapi::Vrf* release_vrf();
  ::gobgpapi::Vrf* mutable_vrf();
  void set_allocated_vrf(::gobgpapi::Vrf* vrf);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddVrfRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Vrf* vrf_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddVrfRequestImpl();
};
// -------------------------------------------------------------------

class AddVrfResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddVrfResponse) */ {
 public:
  AddVrfResponse();
  virtual ~AddVrfResponse();

  AddVrfResponse(const AddVrfResponse& from);

  inline AddVrfResponse& operator=(const AddVrfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddVrfResponse(AddVrfResponse&& from) noexcept
    : AddVrfResponse() {
    *this = ::std::move(from);
  }

  inline AddVrfResponse& operator=(AddVrfResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddVrfResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddVrfResponse* internal_default_instance() {
    return reinterpret_cast<const AddVrfResponse*>(
               &_AddVrfResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(AddVrfResponse* other);
  friend void swap(AddVrfResponse& a, AddVrfResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddVrfResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddVrfResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddVrfResponse& from);
  void MergeFrom(const AddVrfResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddVrfResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.AddVrfResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddVrfResponseImpl();
};
// -------------------------------------------------------------------

class DeleteVrfRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteVrfRequest) */ {
 public:
  DeleteVrfRequest();
  virtual ~DeleteVrfRequest();

  DeleteVrfRequest(const DeleteVrfRequest& from);

  inline DeleteVrfRequest& operator=(const DeleteVrfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteVrfRequest(DeleteVrfRequest&& from) noexcept
    : DeleteVrfRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVrfRequest& operator=(DeleteVrfRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteVrfRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVrfRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVrfRequest*>(
               &_DeleteVrfRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(DeleteVrfRequest* other);
  friend void swap(DeleteVrfRequest& a, DeleteVrfRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteVrfRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteVrfRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteVrfRequest& from);
  void MergeFrom(const DeleteVrfRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteVrfRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Vrf vrf = 1;
  bool has_vrf() const;
  void clear_vrf();
  static const int kVrfFieldNumber = 1;
  const ::gobgpapi::Vrf& vrf() const;
  ::gobgpapi::Vrf* release_vrf();
  ::gobgpapi::Vrf* mutable_vrf();
  void set_allocated_vrf(::gobgpapi::Vrf* vrf);

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteVrfRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Vrf* vrf_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteVrfRequestImpl();
};
// -------------------------------------------------------------------

class DeleteVrfResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteVrfResponse) */ {
 public:
  DeleteVrfResponse();
  virtual ~DeleteVrfResponse();

  DeleteVrfResponse(const DeleteVrfResponse& from);

  inline DeleteVrfResponse& operator=(const DeleteVrfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteVrfResponse(DeleteVrfResponse&& from) noexcept
    : DeleteVrfResponse() {
    *this = ::std::move(from);
  }

  inline DeleteVrfResponse& operator=(DeleteVrfResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteVrfResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVrfResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteVrfResponse*>(
               &_DeleteVrfResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(DeleteVrfResponse* other);
  friend void swap(DeleteVrfResponse& a, DeleteVrfResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteVrfResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteVrfResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteVrfResponse& from);
  void MergeFrom(const DeleteVrfResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteVrfResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteVrfResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteVrfResponseImpl();
};
// -------------------------------------------------------------------

class GetDefinedSetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetDefinedSetRequest) */ {
 public:
  GetDefinedSetRequest();
  virtual ~GetDefinedSetRequest();

  GetDefinedSetRequest(const GetDefinedSetRequest& from);

  inline GetDefinedSetRequest& operator=(const GetDefinedSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDefinedSetRequest(GetDefinedSetRequest&& from) noexcept
    : GetDefinedSetRequest() {
    *this = ::std::move(from);
  }

  inline GetDefinedSetRequest& operator=(GetDefinedSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDefinedSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDefinedSetRequest* internal_default_instance() {
    return reinterpret_cast<const GetDefinedSetRequest*>(
               &_GetDefinedSetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(GetDefinedSetRequest* other);
  friend void swap(GetDefinedSetRequest& a, GetDefinedSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDefinedSetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDefinedSetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDefinedSetRequest& from);
  void MergeFrom(const GetDefinedSetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDefinedSetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gobgpapi.DefinedType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::DefinedType type() const;
  void set_type(::gobgpapi::DefinedType value);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetDefinedSetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetDefinedSetRequestImpl();
};
// -------------------------------------------------------------------

class GetDefinedSetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetDefinedSetResponse) */ {
 public:
  GetDefinedSetResponse();
  virtual ~GetDefinedSetResponse();

  GetDefinedSetResponse(const GetDefinedSetResponse& from);

  inline GetDefinedSetResponse& operator=(const GetDefinedSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDefinedSetResponse(GetDefinedSetResponse&& from) noexcept
    : GetDefinedSetResponse() {
    *this = ::std::move(from);
  }

  inline GetDefinedSetResponse& operator=(GetDefinedSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDefinedSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDefinedSetResponse* internal_default_instance() {
    return reinterpret_cast<const GetDefinedSetResponse*>(
               &_GetDefinedSetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(GetDefinedSetResponse* other);
  friend void swap(GetDefinedSetResponse& a, GetDefinedSetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDefinedSetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDefinedSetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDefinedSetResponse& from);
  void MergeFrom(const GetDefinedSetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDefinedSetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.DefinedSet sets = 1;
  int sets_size() const;
  void clear_sets();
  static const int kSetsFieldNumber = 1;
  const ::gobgpapi::DefinedSet& sets(int index) const;
  ::gobgpapi::DefinedSet* mutable_sets(int index);
  ::gobgpapi::DefinedSet* add_sets();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::DefinedSet >*
      mutable_sets();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::DefinedSet >&
      sets() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.GetDefinedSetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::DefinedSet > sets_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetDefinedSetResponseImpl();
};
// -------------------------------------------------------------------

class AddDefinedSetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddDefinedSetRequest) */ {
 public:
  AddDefinedSetRequest();
  virtual ~AddDefinedSetRequest();

  AddDefinedSetRequest(const AddDefinedSetRequest& from);

  inline AddDefinedSetRequest& operator=(const AddDefinedSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddDefinedSetRequest(AddDefinedSetRequest&& from) noexcept
    : AddDefinedSetRequest() {
    *this = ::std::move(from);
  }

  inline AddDefinedSetRequest& operator=(AddDefinedSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDefinedSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDefinedSetRequest* internal_default_instance() {
    return reinterpret_cast<const AddDefinedSetRequest*>(
               &_AddDefinedSetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(AddDefinedSetRequest* other);
  friend void swap(AddDefinedSetRequest& a, AddDefinedSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddDefinedSetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddDefinedSetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddDefinedSetRequest& from);
  void MergeFrom(const AddDefinedSetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddDefinedSetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.DefinedSet set = 1;
  bool has_set() const;
  void clear_set();
  static const int kSetFieldNumber = 1;
  const ::gobgpapi::DefinedSet& set() const;
  ::gobgpapi::DefinedSet* release_set();
  ::gobgpapi::DefinedSet* mutable_set();
  void set_allocated_set(::gobgpapi::DefinedSet* set);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddDefinedSetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::DefinedSet* set_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddDefinedSetRequestImpl();
};
// -------------------------------------------------------------------

class AddDefinedSetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddDefinedSetResponse) */ {
 public:
  AddDefinedSetResponse();
  virtual ~AddDefinedSetResponse();

  AddDefinedSetResponse(const AddDefinedSetResponse& from);

  inline AddDefinedSetResponse& operator=(const AddDefinedSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddDefinedSetResponse(AddDefinedSetResponse&& from) noexcept
    : AddDefinedSetResponse() {
    *this = ::std::move(from);
  }

  inline AddDefinedSetResponse& operator=(AddDefinedSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDefinedSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDefinedSetResponse* internal_default_instance() {
    return reinterpret_cast<const AddDefinedSetResponse*>(
               &_AddDefinedSetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(AddDefinedSetResponse* other);
  friend void swap(AddDefinedSetResponse& a, AddDefinedSetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddDefinedSetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddDefinedSetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddDefinedSetResponse& from);
  void MergeFrom(const AddDefinedSetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddDefinedSetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.AddDefinedSetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddDefinedSetResponseImpl();
};
// -------------------------------------------------------------------

class DeleteDefinedSetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteDefinedSetRequest) */ {
 public:
  DeleteDefinedSetRequest();
  virtual ~DeleteDefinedSetRequest();

  DeleteDefinedSetRequest(const DeleteDefinedSetRequest& from);

  inline DeleteDefinedSetRequest& operator=(const DeleteDefinedSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteDefinedSetRequest(DeleteDefinedSetRequest&& from) noexcept
    : DeleteDefinedSetRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDefinedSetRequest& operator=(DeleteDefinedSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDefinedSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDefinedSetRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDefinedSetRequest*>(
               &_DeleteDefinedSetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(DeleteDefinedSetRequest* other);
  friend void swap(DeleteDefinedSetRequest& a, DeleteDefinedSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteDefinedSetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteDefinedSetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteDefinedSetRequest& from);
  void MergeFrom(const DeleteDefinedSetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteDefinedSetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.DefinedSet set = 1;
  bool has_set() const;
  void clear_set();
  static const int kSetFieldNumber = 1;
  const ::gobgpapi::DefinedSet& set() const;
  ::gobgpapi::DefinedSet* release_set();
  ::gobgpapi::DefinedSet* mutable_set();
  void set_allocated_set(::gobgpapi::DefinedSet* set);

  // bool all = 2;
  void clear_all();
  static const int kAllFieldNumber = 2;
  bool all() const;
  void set_all(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteDefinedSetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::DefinedSet* set_;
  bool all_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteDefinedSetRequestImpl();
};
// -------------------------------------------------------------------

class DeleteDefinedSetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteDefinedSetResponse) */ {
 public:
  DeleteDefinedSetResponse();
  virtual ~DeleteDefinedSetResponse();

  DeleteDefinedSetResponse(const DeleteDefinedSetResponse& from);

  inline DeleteDefinedSetResponse& operator=(const DeleteDefinedSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteDefinedSetResponse(DeleteDefinedSetResponse&& from) noexcept
    : DeleteDefinedSetResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDefinedSetResponse& operator=(DeleteDefinedSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDefinedSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDefinedSetResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDefinedSetResponse*>(
               &_DeleteDefinedSetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(DeleteDefinedSetResponse* other);
  friend void swap(DeleteDefinedSetResponse& a, DeleteDefinedSetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteDefinedSetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteDefinedSetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteDefinedSetResponse& from);
  void MergeFrom(const DeleteDefinedSetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteDefinedSetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteDefinedSetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteDefinedSetResponseImpl();
};
// -------------------------------------------------------------------

class ReplaceDefinedSetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ReplaceDefinedSetRequest) */ {
 public:
  ReplaceDefinedSetRequest();
  virtual ~ReplaceDefinedSetRequest();

  ReplaceDefinedSetRequest(const ReplaceDefinedSetRequest& from);

  inline ReplaceDefinedSetRequest& operator=(const ReplaceDefinedSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplaceDefinedSetRequest(ReplaceDefinedSetRequest&& from) noexcept
    : ReplaceDefinedSetRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceDefinedSetRequest& operator=(ReplaceDefinedSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceDefinedSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceDefinedSetRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceDefinedSetRequest*>(
               &_ReplaceDefinedSetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(ReplaceDefinedSetRequest* other);
  friend void swap(ReplaceDefinedSetRequest& a, ReplaceDefinedSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplaceDefinedSetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplaceDefinedSetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplaceDefinedSetRequest& from);
  void MergeFrom(const ReplaceDefinedSetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplaceDefinedSetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.DefinedSet set = 1;
  bool has_set() const;
  void clear_set();
  static const int kSetFieldNumber = 1;
  const ::gobgpapi::DefinedSet& set() const;
  ::gobgpapi::DefinedSet* release_set();
  ::gobgpapi::DefinedSet* mutable_set();
  void set_allocated_set(::gobgpapi::DefinedSet* set);

  // @@protoc_insertion_point(class_scope:gobgpapi.ReplaceDefinedSetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::DefinedSet* set_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsReplaceDefinedSetRequestImpl();
};
// -------------------------------------------------------------------

class ReplaceDefinedSetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ReplaceDefinedSetResponse) */ {
 public:
  ReplaceDefinedSetResponse();
  virtual ~ReplaceDefinedSetResponse();

  ReplaceDefinedSetResponse(const ReplaceDefinedSetResponse& from);

  inline ReplaceDefinedSetResponse& operator=(const ReplaceDefinedSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplaceDefinedSetResponse(ReplaceDefinedSetResponse&& from) noexcept
    : ReplaceDefinedSetResponse() {
    *this = ::std::move(from);
  }

  inline ReplaceDefinedSetResponse& operator=(ReplaceDefinedSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceDefinedSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceDefinedSetResponse* internal_default_instance() {
    return reinterpret_cast<const ReplaceDefinedSetResponse*>(
               &_ReplaceDefinedSetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(ReplaceDefinedSetResponse* other);
  friend void swap(ReplaceDefinedSetResponse& a, ReplaceDefinedSetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplaceDefinedSetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplaceDefinedSetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplaceDefinedSetResponse& from);
  void MergeFrom(const ReplaceDefinedSetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplaceDefinedSetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.ReplaceDefinedSetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsReplaceDefinedSetResponseImpl();
};
// -------------------------------------------------------------------

class GetStatementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetStatementRequest) */ {
 public:
  GetStatementRequest();
  virtual ~GetStatementRequest();

  GetStatementRequest(const GetStatementRequest& from);

  inline GetStatementRequest& operator=(const GetStatementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetStatementRequest(GetStatementRequest&& from) noexcept
    : GetStatementRequest() {
    *this = ::std::move(from);
  }

  inline GetStatementRequest& operator=(GetStatementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStatementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatementRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatementRequest*>(
               &_GetStatementRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(GetStatementRequest* other);
  friend void swap(GetStatementRequest& a, GetStatementRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStatementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStatementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStatementRequest& from);
  void MergeFrom(const GetStatementRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStatementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.GetStatementRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetStatementRequestImpl();
};
// -------------------------------------------------------------------

class GetStatementResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetStatementResponse) */ {
 public:
  GetStatementResponse();
  virtual ~GetStatementResponse();

  GetStatementResponse(const GetStatementResponse& from);

  inline GetStatementResponse& operator=(const GetStatementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetStatementResponse(GetStatementResponse&& from) noexcept
    : GetStatementResponse() {
    *this = ::std::move(from);
  }

  inline GetStatementResponse& operator=(GetStatementResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStatementResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatementResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatementResponse*>(
               &_GetStatementResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(GetStatementResponse* other);
  friend void swap(GetStatementResponse& a, GetStatementResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStatementResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStatementResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStatementResponse& from);
  void MergeFrom(const GetStatementResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStatementResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Statement statements = 1;
  int statements_size() const;
  void clear_statements();
  static const int kStatementsFieldNumber = 1;
  const ::gobgpapi::Statement& statements(int index) const;
  ::gobgpapi::Statement* mutable_statements(int index);
  ::gobgpapi::Statement* add_statements();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >*
      mutable_statements();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >&
      statements() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.GetStatementResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement > statements_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetStatementResponseImpl();
};
// -------------------------------------------------------------------

class AddStatementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddStatementRequest) */ {
 public:
  AddStatementRequest();
  virtual ~AddStatementRequest();

  AddStatementRequest(const AddStatementRequest& from);

  inline AddStatementRequest& operator=(const AddStatementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddStatementRequest(AddStatementRequest&& from) noexcept
    : AddStatementRequest() {
    *this = ::std::move(from);
  }

  inline AddStatementRequest& operator=(AddStatementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddStatementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddStatementRequest* internal_default_instance() {
    return reinterpret_cast<const AddStatementRequest*>(
               &_AddStatementRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(AddStatementRequest* other);
  friend void swap(AddStatementRequest& a, AddStatementRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddStatementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddStatementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddStatementRequest& from);
  void MergeFrom(const AddStatementRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddStatementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Statement statement = 1;
  bool has_statement() const;
  void clear_statement();
  static const int kStatementFieldNumber = 1;
  const ::gobgpapi::Statement& statement() const;
  ::gobgpapi::Statement* release_statement();
  ::gobgpapi::Statement* mutable_statement();
  void set_allocated_statement(::gobgpapi::Statement* statement);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddStatementRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Statement* statement_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddStatementRequestImpl();
};
// -------------------------------------------------------------------

class AddStatementResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddStatementResponse) */ {
 public:
  AddStatementResponse();
  virtual ~AddStatementResponse();

  AddStatementResponse(const AddStatementResponse& from);

  inline AddStatementResponse& operator=(const AddStatementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddStatementResponse(AddStatementResponse&& from) noexcept
    : AddStatementResponse() {
    *this = ::std::move(from);
  }

  inline AddStatementResponse& operator=(AddStatementResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddStatementResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddStatementResponse* internal_default_instance() {
    return reinterpret_cast<const AddStatementResponse*>(
               &_AddStatementResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(AddStatementResponse* other);
  friend void swap(AddStatementResponse& a, AddStatementResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddStatementResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddStatementResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddStatementResponse& from);
  void MergeFrom(const AddStatementResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddStatementResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.AddStatementResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddStatementResponseImpl();
};
// -------------------------------------------------------------------

class DeleteStatementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteStatementRequest) */ {
 public:
  DeleteStatementRequest();
  virtual ~DeleteStatementRequest();

  DeleteStatementRequest(const DeleteStatementRequest& from);

  inline DeleteStatementRequest& operator=(const DeleteStatementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteStatementRequest(DeleteStatementRequest&& from) noexcept
    : DeleteStatementRequest() {
    *this = ::std::move(from);
  }

  inline DeleteStatementRequest& operator=(DeleteStatementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteStatementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteStatementRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteStatementRequest*>(
               &_DeleteStatementRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(DeleteStatementRequest* other);
  friend void swap(DeleteStatementRequest& a, DeleteStatementRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteStatementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteStatementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteStatementRequest& from);
  void MergeFrom(const DeleteStatementRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteStatementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Statement statement = 1;
  bool has_statement() const;
  void clear_statement();
  static const int kStatementFieldNumber = 1;
  const ::gobgpapi::Statement& statement() const;
  ::gobgpapi::Statement* release_statement();
  ::gobgpapi::Statement* mutable_statement();
  void set_allocated_statement(::gobgpapi::Statement* statement);

  // bool all = 2;
  void clear_all();
  static const int kAllFieldNumber = 2;
  bool all() const;
  void set_all(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteStatementRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Statement* statement_;
  bool all_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteStatementRequestImpl();
};
// -------------------------------------------------------------------

class DeleteStatementResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteStatementResponse) */ {
 public:
  DeleteStatementResponse();
  virtual ~DeleteStatementResponse();

  DeleteStatementResponse(const DeleteStatementResponse& from);

  inline DeleteStatementResponse& operator=(const DeleteStatementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteStatementResponse(DeleteStatementResponse&& from) noexcept
    : DeleteStatementResponse() {
    *this = ::std::move(from);
  }

  inline DeleteStatementResponse& operator=(DeleteStatementResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteStatementResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteStatementResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteStatementResponse*>(
               &_DeleteStatementResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(DeleteStatementResponse* other);
  friend void swap(DeleteStatementResponse& a, DeleteStatementResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteStatementResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteStatementResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteStatementResponse& from);
  void MergeFrom(const DeleteStatementResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteStatementResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteStatementResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeleteStatementResponseImpl();
};
// -------------------------------------------------------------------

class ReplaceStatementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ReplaceStatementRequest) */ {
 public:
  ReplaceStatementRequest();
  virtual ~ReplaceStatementRequest();

  ReplaceStatementRequest(const ReplaceStatementRequest& from);

  inline ReplaceStatementRequest& operator=(const ReplaceStatementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplaceStatementRequest(ReplaceStatementRequest&& from) noexcept
    : ReplaceStatementRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceStatementRequest& operator=(ReplaceStatementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceStatementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceStatementRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceStatementRequest*>(
               &_ReplaceStatementRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(ReplaceStatementRequest* other);
  friend void swap(ReplaceStatementRequest& a, ReplaceStatementRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplaceStatementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplaceStatementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplaceStatementRequest& from);
  void MergeFrom(const ReplaceStatementRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplaceStatementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Statement statement = 1;
  bool has_statement() const;
  void clear_statement();
  static const int kStatementFieldNumber = 1;
  const ::gobgpapi::Statement& statement() const;
  ::gobgpapi::Statement* release_statement();
  ::gobgpapi::Statement* mutable_statement();
  void set_allocated_statement(::gobgpapi::Statement* statement);

  // @@protoc_insertion_point(class_scope:gobgpapi.ReplaceStatementRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Statement* statement_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsReplaceStatementRequestImpl();
};
// -------------------------------------------------------------------

class ReplaceStatementResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ReplaceStatementResponse) */ {
 public:
  ReplaceStatementResponse();
  virtual ~ReplaceStatementResponse();

  ReplaceStatementResponse(const ReplaceStatementResponse& from);

  inline ReplaceStatementResponse& operator=(const ReplaceStatementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplaceStatementResponse(ReplaceStatementResponse&& from) noexcept
    : ReplaceStatementResponse() {
    *this = ::std::move(from);
  }

  inline ReplaceStatementResponse& operator=(ReplaceStatementResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceStatementResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceStatementResponse* internal_default_instance() {
    return reinterpret_cast<const ReplaceStatementResponse*>(
               &_ReplaceStatementResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(ReplaceStatementResponse* other);
  friend void swap(ReplaceStatementResponse& a, ReplaceStatementResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplaceStatementResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplaceStatementResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplaceStatementResponse& from);
  void MergeFrom(const ReplaceStatementResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplaceStatementResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.ReplaceStatementResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsReplaceStatementResponseImpl();
};
// -------------------------------------------------------------------

class GetPolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetPolicyRequest) */ {
 public:
  GetPolicyRequest();
  virtual ~GetPolicyRequest();

  GetPolicyRequest(const GetPolicyRequest& from);

  inline GetPolicyRequest& operator=(const GetPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPolicyRequest(GetPolicyRequest&& from) noexcept
    : GetPolicyRequest() {
    *this = ::std::move(from);
  }

  inline GetPolicyRequest& operator=(GetPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const GetPolicyRequest*>(
               &_GetPolicyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(GetPolicyRequest* other);
  friend void swap(GetPolicyRequest& a, GetPolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPolicyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPolicyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPolicyRequest& from);
  void MergeFrom(const GetPolicyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.GetPolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyRequestImpl();
};
// -------------------------------------------------------------------

class GetPolicyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetPolicyResponse) */ {
 public:
  GetPolicyResponse();
  virtual ~GetPolicyResponse();

  GetPolicyResponse(const GetPolicyResponse& from);

  inline GetPolicyResponse& operator=(const GetPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPolicyResponse(GetPolicyResponse&& from) noexcept
    : GetPolicyResponse() {
    *this = ::std::move(from);
  }

  inline GetPolicyResponse& operator=(GetPolicyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPolicyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const GetPolicyResponse*>(
               &_GetPolicyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(GetPolicyResponse* other);
  friend void swap(GetPolicyResponse& a, GetPolicyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPolicyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPolicyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPolicyResponse& from);
  void MergeFrom(const GetPolicyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPolicyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Policy policies = 1;
  int policies_size() const;
  void clear_policies();
  static const int kPoliciesFieldNumber = 1;
  const ::gobgpapi::Policy& policies(int index) const;
  ::gobgpapi::Policy* mutable_policies(int index);
  ::gobgpapi::Policy* add_policies();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >*
      mutable_policies();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >&
      policies() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.GetPolicyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy > policies_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyResponseImpl();
};
// -------------------------------------------------------------------

class AddPolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPolicyRequest) */ {
 public:
  AddPolicyRequest();
  virtual ~AddPolicyRequest();

  AddPolicyRequest(const AddPolicyRequest& from);

  inline AddPolicyRequest& operator=(const AddPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPolicyRequest(AddPolicyRequest&& from) noexcept
    : AddPolicyRequest() {
    *this = ::std::move(from);
  }

  inline AddPolicyRequest& operator=(AddPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const AddPolicyRequest*>(
               &_AddPolicyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(AddPolicyRequest* other);
  friend void swap(AddPolicyRequest& a, AddPolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPolicyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddPolicyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddPolicyRequest& from);
  void MergeFrom(const AddPolicyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddPolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Policy policy = 1;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  const ::gobgpapi::Policy& policy() const;
  ::gobgpapi::Policy* release_policy();
  ::gobgpapi::Policy* mutable_policy();
  void set_allocated_policy(::gobgpapi::Policy* policy);

  // bool refer_existing_statements = 2;
  void clear_refer_existing_statements();
  static const int kReferExistingStatementsFieldNumber = 2;
  bool refer_existing_statements() const;
  void set_refer_existing_statements(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Policy* policy_;
  bool refer_existing_statements_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyRequestImpl();
};
// -------------------------------------------------------------------

class AddPolicyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPolicyResponse) */ {
 public:
  AddPolicyResponse();
  virtual ~AddPolicyResponse();

  AddPolicyResponse(const AddPolicyResponse& from);

  inline AddPolicyResponse& operator=(const AddPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPolicyResponse(AddPolicyResponse&& from) noexcept
    : AddPolicyResponse() {
    *this = ::std::move(from);
  }

  inline AddPolicyResponse& operator=(AddPolicyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPolicyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const AddPolicyResponse*>(
               &_AddPolicyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(AddPolicyResponse* other);
  friend void swap(AddPolicyResponse& a, AddPolicyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPolicyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddPolicyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddPolicyResponse& from);
  void MergeFrom(const AddPolicyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddPolicyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPolicyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyResponseImpl();
};
// -------------------------------------------------------------------

class DeletePolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePolicyRequest) */ {
 public:
  DeletePolicyRequest();
  virtual ~DeletePolicyRequest();

  DeletePolicyRequest(const DeletePolicyRequest& from);

  inline DeletePolicyRequest& operator=(const DeletePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePolicyRequest(DeletePolicyRequest&& from) noexcept
    : DeletePolicyRequest() {
    *this = ::std::move(from);
  }

  inline DeletePolicyRequest& operator=(DeletePolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePolicyRequest*>(
               &_DeletePolicyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(DeletePolicyRequest* other);
  friend void swap(DeletePolicyRequest& a, DeletePolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePolicyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeletePolicyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeletePolicyRequest& from);
  void MergeFrom(const DeletePolicyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeletePolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Policy policy = 1;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  const ::gobgpapi::Policy& policy() const;
  ::gobgpapi::Policy* release_policy();
  ::gobgpapi::Policy* mutable_policy();
  void set_allocated_policy(::gobgpapi::Policy* policy);

  // bool preserve_statements = 2;
  void clear_preserve_statements();
  static const int kPreserveStatementsFieldNumber = 2;
  bool preserve_statements() const;
  void set_preserve_statements(bool value);

  // bool all = 3;
  void clear_all();
  static const int kAllFieldNumber = 3;
  bool all() const;
  void set_all(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Policy* policy_;
  bool preserve_statements_;
  bool all_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyRequestImpl();
};
// -------------------------------------------------------------------

class DeletePolicyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePolicyResponse) */ {
 public:
  DeletePolicyResponse();
  virtual ~DeletePolicyResponse();

  DeletePolicyResponse(const DeletePolicyResponse& from);

  inline DeletePolicyResponse& operator=(const DeletePolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePolicyResponse(DeletePolicyResponse&& from) noexcept
    : DeletePolicyResponse() {
    *this = ::std::move(from);
  }

  inline DeletePolicyResponse& operator=(DeletePolicyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePolicyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePolicyResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePolicyResponse*>(
               &_DeletePolicyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(DeletePolicyResponse* other);
  friend void swap(DeletePolicyResponse& a, DeletePolicyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePolicyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeletePolicyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeletePolicyResponse& from);
  void MergeFrom(const DeletePolicyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeletePolicyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePolicyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyResponseImpl();
};
// -------------------------------------------------------------------

class ReplacePolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ReplacePolicyRequest) */ {
 public:
  ReplacePolicyRequest();
  virtual ~ReplacePolicyRequest();

  ReplacePolicyRequest(const ReplacePolicyRequest& from);

  inline ReplacePolicyRequest& operator=(const ReplacePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplacePolicyRequest(ReplacePolicyRequest&& from) noexcept
    : ReplacePolicyRequest() {
    *this = ::std::move(from);
  }

  inline ReplacePolicyRequest& operator=(ReplacePolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplacePolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplacePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const ReplacePolicyRequest*>(
               &_ReplacePolicyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(ReplacePolicyRequest* other);
  friend void swap(ReplacePolicyRequest& a, ReplacePolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplacePolicyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplacePolicyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplacePolicyRequest& from);
  void MergeFrom(const ReplacePolicyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplacePolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Policy policy = 1;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  const ::gobgpapi::Policy& policy() const;
  ::gobgpapi::Policy* release_policy();
  ::gobgpapi::Policy* mutable_policy();
  void set_allocated_policy(::gobgpapi::Policy* policy);

  // bool refer_existing_statements = 2;
  void clear_refer_existing_statements();
  static const int kReferExistingStatementsFieldNumber = 2;
  bool refer_existing_statements() const;
  void set_refer_existing_statements(bool value);

  // bool preserve_statements = 3;
  void clear_preserve_statements();
  static const int kPreserveStatementsFieldNumber = 3;
  bool preserve_statements() const;
  void set_preserve_statements(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.ReplacePolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Policy* policy_;
  bool refer_existing_statements_;
  bool preserve_statements_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyRequestImpl();
};
// -------------------------------------------------------------------

class ReplacePolicyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ReplacePolicyResponse) */ {
 public:
  ReplacePolicyResponse();
  virtual ~ReplacePolicyResponse();

  ReplacePolicyResponse(const ReplacePolicyResponse& from);

  inline ReplacePolicyResponse& operator=(const ReplacePolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplacePolicyResponse(ReplacePolicyResponse&& from) noexcept
    : ReplacePolicyResponse() {
    *this = ::std::move(from);
  }

  inline ReplacePolicyResponse& operator=(ReplacePolicyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplacePolicyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplacePolicyResponse* internal_default_instance() {
    return reinterpret_cast<const ReplacePolicyResponse*>(
               &_ReplacePolicyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(ReplacePolicyResponse* other);
  friend void swap(ReplacePolicyResponse& a, ReplacePolicyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplacePolicyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplacePolicyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplacePolicyResponse& from);
  void MergeFrom(const ReplacePolicyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplacePolicyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.ReplacePolicyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyResponseImpl();
};
// -------------------------------------------------------------------

class GetPolicyAssignmentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetPolicyAssignmentRequest) */ {
 public:
  GetPolicyAssignmentRequest();
  virtual ~GetPolicyAssignmentRequest();

  GetPolicyAssignmentRequest(const GetPolicyAssignmentRequest& from);

  inline GetPolicyAssignmentRequest& operator=(const GetPolicyAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPolicyAssignmentRequest(GetPolicyAssignmentRequest&& from) noexcept
    : GetPolicyAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline GetPolicyAssignmentRequest& operator=(GetPolicyAssignmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPolicyAssignmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPolicyAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const GetPolicyAssignmentRequest*>(
               &_GetPolicyAssignmentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(GetPolicyAssignmentRequest* other);
  friend void swap(GetPolicyAssignmentRequest& a, GetPolicyAssignmentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPolicyAssignmentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPolicyAssignmentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPolicyAssignmentRequest& from);
  void MergeFrom(const GetPolicyAssignmentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPolicyAssignmentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.PolicyAssignment assignment = 1;
  bool has_assignment() const;
  void clear_assignment();
  static const int kAssignmentFieldNumber = 1;
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* release_assignment();
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetPolicyAssignmentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* assignment_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyAssignmentRequestImpl();
};
// -------------------------------------------------------------------

class GetPolicyAssignmentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetPolicyAssignmentResponse) */ {
 public:
  GetPolicyAssignmentResponse();
  virtual ~GetPolicyAssignmentResponse();

  GetPolicyAssignmentResponse(const GetPolicyAssignmentResponse& from);

  inline GetPolicyAssignmentResponse& operator=(const GetPolicyAssignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPolicyAssignmentResponse(GetPolicyAssignmentResponse&& from) noexcept
    : GetPolicyAssignmentResponse() {
    *this = ::std::move(from);
  }

  inline GetPolicyAssignmentResponse& operator=(GetPolicyAssignmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPolicyAssignmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPolicyAssignmentResponse* internal_default_instance() {
    return reinterpret_cast<const GetPolicyAssignmentResponse*>(
               &_GetPolicyAssignmentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(GetPolicyAssignmentResponse* other);
  friend void swap(GetPolicyAssignmentResponse& a, GetPolicyAssignmentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPolicyAssignmentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPolicyAssignmentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPolicyAssignmentResponse& from);
  void MergeFrom(const GetPolicyAssignmentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPolicyAssignmentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.PolicyAssignment assignment = 1;
  bool has_assignment() const;
  void clear_assignment();
  static const int kAssignmentFieldNumber = 1;
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* release_assignment();
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetPolicyAssignmentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* assignment_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyAssignmentResponseImpl();
};
// -------------------------------------------------------------------

class AddPolicyAssignmentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPolicyAssignmentRequest) */ {
 public:
  AddPolicyAssignmentRequest();
  virtual ~AddPolicyAssignmentRequest();

  AddPolicyAssignmentRequest(const AddPolicyAssignmentRequest& from);

  inline AddPolicyAssignmentRequest& operator=(const AddPolicyAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPolicyAssignmentRequest(AddPolicyAssignmentRequest&& from) noexcept
    : AddPolicyAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline AddPolicyAssignmentRequest& operator=(AddPolicyAssignmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPolicyAssignmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPolicyAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const AddPolicyAssignmentRequest*>(
               &_AddPolicyAssignmentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void Swap(AddPolicyAssignmentRequest* other);
  friend void swap(AddPolicyAssignmentRequest& a, AddPolicyAssignmentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPolicyAssignmentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddPolicyAssignmentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddPolicyAssignmentRequest& from);
  void MergeFrom(const AddPolicyAssignmentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddPolicyAssignmentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.PolicyAssignment assignment = 1;
  bool has_assignment() const;
  void clear_assignment();
  static const int kAssignmentFieldNumber = 1;
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* release_assignment();
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPolicyAssignmentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* assignment_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyAssignmentRequestImpl();
};
// -------------------------------------------------------------------

class AddPolicyAssignmentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPolicyAssignmentResponse) */ {
 public:
  AddPolicyAssignmentResponse();
  virtual ~AddPolicyAssignmentResponse();

  AddPolicyAssignmentResponse(const AddPolicyAssignmentResponse& from);

  inline AddPolicyAssignmentResponse& operator=(const AddPolicyAssignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPolicyAssignmentResponse(AddPolicyAssignmentResponse&& from) noexcept
    : AddPolicyAssignmentResponse() {
    *this = ::std::move(from);
  }

  inline AddPolicyAssignmentResponse& operator=(AddPolicyAssignmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPolicyAssignmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPolicyAssignmentResponse* internal_default_instance() {
    return reinterpret_cast<const AddPolicyAssignmentResponse*>(
               &_AddPolicyAssignmentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(AddPolicyAssignmentResponse* other);
  friend void swap(AddPolicyAssignmentResponse& a, AddPolicyAssignmentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPolicyAssignmentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddPolicyAssignmentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddPolicyAssignmentResponse& from);
  void MergeFrom(const AddPolicyAssignmentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddPolicyAssignmentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPolicyAssignmentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyAssignmentResponseImpl();
};
// -------------------------------------------------------------------

class DeletePolicyAssignmentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePolicyAssignmentRequest) */ {
 public:
  DeletePolicyAssignmentRequest();
  virtual ~DeletePolicyAssignmentRequest();

  DeletePolicyAssignmentRequest(const DeletePolicyAssignmentRequest& from);

  inline DeletePolicyAssignmentRequest& operator=(const DeletePolicyAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePolicyAssignmentRequest(DeletePolicyAssignmentRequest&& from) noexcept
    : DeletePolicyAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline DeletePolicyAssignmentRequest& operator=(DeletePolicyAssignmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePolicyAssignmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePolicyAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePolicyAssignmentRequest*>(
               &_DeletePolicyAssignmentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(DeletePolicyAssignmentRequest* other);
  friend void swap(DeletePolicyAssignmentRequest& a, DeletePolicyAssignmentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePolicyAssignmentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeletePolicyAssignmentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeletePolicyAssignmentRequest& from);
  void MergeFrom(const DeletePolicyAssignmentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeletePolicyAssignmentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.PolicyAssignment assignment = 1;
  bool has_assignment() const;
  void clear_assignment();
  static const int kAssignmentFieldNumber = 1;
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* release_assignment();
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);

  // bool all = 2;
  void clear_all();
  static const int kAllFieldNumber = 2;
  bool all() const;
  void set_all(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePolicyAssignmentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* assignment_;
  bool all_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyAssignmentRequestImpl();
};
// -------------------------------------------------------------------

class DeletePolicyAssignmentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePolicyAssignmentResponse) */ {
 public:
  DeletePolicyAssignmentResponse();
  virtual ~DeletePolicyAssignmentResponse();

  DeletePolicyAssignmentResponse(const DeletePolicyAssignmentResponse& from);

  inline DeletePolicyAssignmentResponse& operator=(const DeletePolicyAssignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePolicyAssignmentResponse(DeletePolicyAssignmentResponse&& from) noexcept
    : DeletePolicyAssignmentResponse() {
    *this = ::std::move(from);
  }

  inline DeletePolicyAssignmentResponse& operator=(DeletePolicyAssignmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePolicyAssignmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePolicyAssignmentResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePolicyAssignmentResponse*>(
               &_DeletePolicyAssignmentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(DeletePolicyAssignmentResponse* other);
  friend void swap(DeletePolicyAssignmentResponse& a, DeletePolicyAssignmentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePolicyAssignmentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeletePolicyAssignmentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeletePolicyAssignmentResponse& from);
  void MergeFrom(const DeletePolicyAssignmentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeletePolicyAssignmentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePolicyAssignmentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyAssignmentResponseImpl();
};
// -------------------------------------------------------------------

class ReplacePolicyAssignmentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ReplacePolicyAssignmentRequest) */ {
 public:
  ReplacePolicyAssignmentRequest();
  virtual ~ReplacePolicyAssignmentRequest();

  ReplacePolicyAssignmentRequest(const ReplacePolicyAssignmentRequest& from);

  inline ReplacePolicyAssignmentRequest& operator=(const ReplacePolicyAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplacePolicyAssignmentRequest(ReplacePolicyAssignmentRequest&& from) noexcept
    : ReplacePolicyAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline ReplacePolicyAssignmentRequest& operator=(ReplacePolicyAssignmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplacePolicyAssignmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplacePolicyAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const ReplacePolicyAssignmentRequest*>(
               &_ReplacePolicyAssignmentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(ReplacePolicyAssignmentRequest* other);
  friend void swap(ReplacePolicyAssignmentRequest& a, ReplacePolicyAssignmentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplacePolicyAssignmentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplacePolicyAssignmentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplacePolicyAssignmentRequest& from);
  void MergeFrom(const ReplacePolicyAssignmentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplacePolicyAssignmentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.PolicyAssignment assignment = 1;
  bool has_assignment() const;
  void clear_assignment();
  static const int kAssignmentFieldNumber = 1;
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* release_assignment();
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);

  // @@protoc_insertion_point(class_scope:gobgpapi.ReplacePolicyAssignmentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* assignment_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyAssignmentRequestImpl();
};
// -------------------------------------------------------------------

class ReplacePolicyAssignmentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ReplacePolicyAssignmentResponse) */ {
 public:
  ReplacePolicyAssignmentResponse();
  virtual ~ReplacePolicyAssignmentResponse();

  ReplacePolicyAssignmentResponse(const ReplacePolicyAssignmentResponse& from);

  inline ReplacePolicyAssignmentResponse& operator=(const ReplacePolicyAssignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplacePolicyAssignmentResponse(ReplacePolicyAssignmentResponse&& from) noexcept
    : ReplacePolicyAssignmentResponse() {
    *this = ::std::move(from);
  }

  inline ReplacePolicyAssignmentResponse& operator=(ReplacePolicyAssignmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplacePolicyAssignmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplacePolicyAssignmentResponse* internal_default_instance() {
    return reinterpret_cast<const ReplacePolicyAssignmentResponse*>(
               &_ReplacePolicyAssignmentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(ReplacePolicyAssignmentResponse* other);
  friend void swap(ReplacePolicyAssignmentResponse& a, ReplacePolicyAssignmentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplacePolicyAssignmentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplacePolicyAssignmentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplacePolicyAssignmentResponse& from);
  void MergeFrom(const ReplacePolicyAssignmentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplacePolicyAssignmentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.ReplacePolicyAssignmentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyAssignmentResponseImpl();
};
// -------------------------------------------------------------------

class GetServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetServerRequest) */ {
 public:
  GetServerRequest();
  virtual ~GetServerRequest();

  GetServerRequest(const GetServerRequest& from);

  inline GetServerRequest& operator=(const GetServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServerRequest(GetServerRequest&& from) noexcept
    : GetServerRequest() {
    *this = ::std::move(from);
  }

  inline GetServerRequest& operator=(GetServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerRequest*>(
               &_GetServerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(GetServerRequest* other);
  friend void swap(GetServerRequest& a, GetServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServerRequest& from);
  void MergeFrom(const GetServerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.GetServerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetServerRequestImpl();
};
// -------------------------------------------------------------------

class GetServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetServerResponse) */ {
 public:
  GetServerResponse();
  virtual ~GetServerResponse();

  GetServerResponse(const GetServerResponse& from);

  inline GetServerResponse& operator=(const GetServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServerResponse(GetServerResponse&& from) noexcept
    : GetServerResponse() {
    *this = ::std::move(from);
  }

  inline GetServerResponse& operator=(GetServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerResponse*>(
               &_GetServerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(GetServerResponse* other);
  friend void swap(GetServerResponse& a, GetServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServerResponse& from);
  void MergeFrom(const GetServerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Global global = 1;
  bool has_global() const;
  void clear_global();
  static const int kGlobalFieldNumber = 1;
  const ::gobgpapi::Global& global() const;
  ::gobgpapi::Global* release_global();
  ::gobgpapi::Global* mutable_global();
  void set_allocated_global(::gobgpapi::Global* global);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Global* global_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetServerResponseImpl();
};
// -------------------------------------------------------------------

class StartServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.StartServerRequest) */ {
 public:
  StartServerRequest();
  virtual ~StartServerRequest();

  StartServerRequest(const StartServerRequest& from);

  inline StartServerRequest& operator=(const StartServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartServerRequest(StartServerRequest&& from) noexcept
    : StartServerRequest() {
    *this = ::std::move(from);
  }

  inline StartServerRequest& operator=(StartServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartServerRequest* internal_default_instance() {
    return reinterpret_cast<const StartServerRequest*>(
               &_StartServerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void Swap(StartServerRequest* other);
  friend void swap(StartServerRequest& a, StartServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartServerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StartServerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartServerRequest& from);
  void MergeFrom(const StartServerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Global global = 1;
  bool has_global() const;
  void clear_global();
  static const int kGlobalFieldNumber = 1;
  const ::gobgpapi::Global& global() const;
  ::gobgpapi::Global* release_global();
  ::gobgpapi::Global* mutable_global();
  void set_allocated_global(::gobgpapi::Global* global);

  // @@protoc_insertion_point(class_scope:gobgpapi.StartServerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Global* global_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsStartServerRequestImpl();
};
// -------------------------------------------------------------------

class StartServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.StartServerResponse) */ {
 public:
  StartServerResponse();
  virtual ~StartServerResponse();

  StartServerResponse(const StartServerResponse& from);

  inline StartServerResponse& operator=(const StartServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartServerResponse(StartServerResponse&& from) noexcept
    : StartServerResponse() {
    *this = ::std::move(from);
  }

  inline StartServerResponse& operator=(StartServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartServerResponse* internal_default_instance() {
    return reinterpret_cast<const StartServerResponse*>(
               &_StartServerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void Swap(StartServerResponse* other);
  friend void swap(StartServerResponse& a, StartServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartServerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StartServerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartServerResponse& from);
  void MergeFrom(const StartServerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.StartServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsStartServerResponseImpl();
};
// -------------------------------------------------------------------

class StopServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.StopServerRequest) */ {
 public:
  StopServerRequest();
  virtual ~StopServerRequest();

  StopServerRequest(const StopServerRequest& from);

  inline StopServerRequest& operator=(const StopServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopServerRequest(StopServerRequest&& from) noexcept
    : StopServerRequest() {
    *this = ::std::move(from);
  }

  inline StopServerRequest& operator=(StopServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopServerRequest* internal_default_instance() {
    return reinterpret_cast<const StopServerRequest*>(
               &_StopServerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void Swap(StopServerRequest* other);
  friend void swap(StopServerRequest& a, StopServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopServerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StopServerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopServerRequest& from);
  void MergeFrom(const StopServerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.StopServerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsStopServerRequestImpl();
};
// -------------------------------------------------------------------

class StopServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.StopServerResponse) */ {
 public:
  StopServerResponse();
  virtual ~StopServerResponse();

  StopServerResponse(const StopServerResponse& from);

  inline StopServerResponse& operator=(const StopServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopServerResponse(StopServerResponse&& from) noexcept
    : StopServerResponse() {
    *this = ::std::move(from);
  }

  inline StopServerResponse& operator=(StopServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopServerResponse* internal_default_instance() {
    return reinterpret_cast<const StopServerResponse*>(
               &_StopServerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void Swap(StopServerResponse* other);
  friend void swap(StopServerResponse& a, StopServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopServerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StopServerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopServerResponse& from);
  void MergeFrom(const StopServerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.StopServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsStopServerResponseImpl();
};
// -------------------------------------------------------------------

class RPKIValidation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RPKIValidation) */ {
 public:
  RPKIValidation();
  virtual ~RPKIValidation();

  RPKIValidation(const RPKIValidation& from);

  inline RPKIValidation& operator=(const RPKIValidation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPKIValidation(RPKIValidation&& from) noexcept
    : RPKIValidation() {
    *this = ::std::move(from);
  }

  inline RPKIValidation& operator=(RPKIValidation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPKIValidation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPKIValidation* internal_default_instance() {
    return reinterpret_cast<const RPKIValidation*>(
               &_RPKIValidation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void Swap(RPKIValidation* other);
  friend void swap(RPKIValidation& a, RPKIValidation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPKIValidation* New() const PROTOBUF_FINAL { return New(NULL); }

  RPKIValidation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPKIValidation& from);
  void MergeFrom(const RPKIValidation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPKIValidation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RPKIValidation_State State;
  static const State STATE_NONE =
    RPKIValidation_State_STATE_NONE;
  static const State STATE_NOT_FOUND =
    RPKIValidation_State_STATE_NOT_FOUND;
  static const State STATE_VALID =
    RPKIValidation_State_STATE_VALID;
  static const State STATE_INVALID =
    RPKIValidation_State_STATE_INVALID;
  static inline bool State_IsValid(int value) {
    return RPKIValidation_State_IsValid(value);
  }
  static const State State_MIN =
    RPKIValidation_State_State_MIN;
  static const State State_MAX =
    RPKIValidation_State_State_MAX;
  static const int State_ARRAYSIZE =
    RPKIValidation_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return RPKIValidation_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return RPKIValidation_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return RPKIValidation_State_Parse(name, value);
  }

  typedef RPKIValidation_Reason Reason;
  static const Reason REASOT_NONE =
    RPKIValidation_Reason_REASOT_NONE;
  static const Reason REASON_AS =
    RPKIValidation_Reason_REASON_AS;
  static const Reason REASON_LENGTH =
    RPKIValidation_Reason_REASON_LENGTH;
  static inline bool Reason_IsValid(int value) {
    return RPKIValidation_Reason_IsValid(value);
  }
  static const Reason Reason_MIN =
    RPKIValidation_Reason_Reason_MIN;
  static const Reason Reason_MAX =
    RPKIValidation_Reason_Reason_MAX;
  static const int Reason_ARRAYSIZE =
    RPKIValidation_Reason_Reason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reason_descriptor() {
    return RPKIValidation_Reason_descriptor();
  }
  static inline const ::std::string& Reason_Name(Reason value) {
    return RPKIValidation_Reason_Name(value);
  }
  static inline bool Reason_Parse(const ::std::string& name,
      Reason* value) {
    return RPKIValidation_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Roa matched = 3;
  int matched_size() const;
  void clear_matched();
  static const int kMatchedFieldNumber = 3;
  const ::gobgpapi::Roa& matched(int index) const;
  ::gobgpapi::Roa* mutable_matched(int index);
  ::gobgpapi::Roa* add_matched();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >*
      mutable_matched();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >&
      matched() const;

  // repeated .gobgpapi.Roa unmatched_as = 4;
  int unmatched_as_size() const;
  void clear_unmatched_as();
  static const int kUnmatchedAsFieldNumber = 4;
  const ::gobgpapi::Roa& unmatched_as(int index) const;
  ::gobgpapi::Roa* mutable_unmatched_as(int index);
  ::gobgpapi::Roa* add_unmatched_as();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >*
      mutable_unmatched_as();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >&
      unmatched_as() const;

  // repeated .gobgpapi.Roa unmatched_length = 5;
  int unmatched_length_size() const;
  void clear_unmatched_length();
  static const int kUnmatchedLengthFieldNumber = 5;
  const ::gobgpapi::Roa& unmatched_length(int index) const;
  ::gobgpapi::Roa* mutable_unmatched_length(int index);
  ::gobgpapi::Roa* add_unmatched_length();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >*
      mutable_unmatched_length();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >&
      unmatched_length() const;

  // .gobgpapi.RPKIValidation.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::gobgpapi::RPKIValidation_State state() const;
  void set_state(::gobgpapi::RPKIValidation_State value);

  // .gobgpapi.RPKIValidation.Reason reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  ::gobgpapi::RPKIValidation_Reason reason() const;
  void set_reason(::gobgpapi::RPKIValidation_Reason value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RPKIValidation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa > matched_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa > unmatched_as_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa > unmatched_length_;
  int state_;
  int reason_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRPKIValidationImpl();
};
// -------------------------------------------------------------------

class Path : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void Swap(Path* other);
  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const PROTOBUF_FINAL { return New(NULL); }

  Path* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes pattrs = 2;
  int pattrs_size() const;
  void clear_pattrs();
  static const int kPattrsFieldNumber = 2;
  const ::std::string& pattrs(int index) const;
  ::std::string* mutable_pattrs(int index);
  void set_pattrs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pattrs(int index, ::std::string&& value);
  #endif
  void set_pattrs(int index, const char* value);
  void set_pattrs(int index, const void* value, size_t size);
  ::std::string* add_pattrs();
  void add_pattrs(const ::std::string& value);
  #if LANG_CXX11
  void add_pattrs(::std::string&& value);
  #endif
  void add_pattrs(const char* value);
  void add_pattrs(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pattrs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pattrs();

  // bytes nlri = 1;
  void clear_nlri();
  static const int kNlriFieldNumber = 1;
  const ::std::string& nlri() const;
  void set_nlri(const ::std::string& value);
  #if LANG_CXX11
  void set_nlri(::std::string&& value);
  #endif
  void set_nlri(const char* value);
  void set_nlri(const void* value, size_t size);
  ::std::string* mutable_nlri();
  ::std::string* release_nlri();
  void set_allocated_nlri(::std::string* nlri);

  // string source_id = 11;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 11;
  const ::std::string& source_id() const;
  void set_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_source_id(::std::string&& value);
  #endif
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  ::std::string* mutable_source_id();
  ::std::string* release_source_id();
  void set_allocated_source_id(::std::string* source_id);

  // string neighbor_ip = 15;
  void clear_neighbor_ip();
  static const int kNeighborIpFieldNumber = 15;
  const ::std::string& neighbor_ip() const;
  void set_neighbor_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_neighbor_ip(::std::string&& value);
  #endif
  void set_neighbor_ip(const char* value);
  void set_neighbor_ip(const char* value, size_t size);
  ::std::string* mutable_neighbor_ip();
  ::std::string* release_neighbor_ip();
  void set_allocated_neighbor_ip(::std::string* neighbor_ip);

  // bytes uuid = 16;
  void clear_uuid();
  static const int kUuidFieldNumber = 16;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // .gobgpapi.RPKIValidation validation_detail = 7;
  bool has_validation_detail() const;
  void clear_validation_detail();
  static const int kValidationDetailFieldNumber = 7;
  const ::gobgpapi::RPKIValidation& validation_detail() const;
  ::gobgpapi::RPKIValidation* release_validation_detail();
  ::gobgpapi::RPKIValidation* mutable_validation_detail();
  void set_allocated_validation_detail(::gobgpapi::RPKIValidation* validation_detail);

  // int64 age = 3;
  void clear_age();
  static const int kAgeFieldNumber = 3;
  ::google::protobuf::int64 age() const;
  void set_age(::google::protobuf::int64 value);

  // int32 validation = 6;
  void clear_validation();
  static const int kValidationFieldNumber = 6;
  ::google::protobuf::int32 validation() const;
  void set_validation(::google::protobuf::int32 value);

  // bool best = 4;
  void clear_best();
  static const int kBestFieldNumber = 4;
  bool best() const;
  void set_best(bool value);

  // bool is_withdraw = 5;
  void clear_is_withdraw();
  static const int kIsWithdrawFieldNumber = 5;
  bool is_withdraw() const;
  void set_is_withdraw(bool value);

  // bool no_implicit_withdraw = 8;
  void clear_no_implicit_withdraw();
  static const int kNoImplicitWithdrawFieldNumber = 8;
  bool no_implicit_withdraw() const;
  void set_no_implicit_withdraw(bool value);

  // bool filtered = 12;
  void clear_filtered();
  static const int kFilteredFieldNumber = 12;
  bool filtered() const;
  void set_filtered(bool value);

  // uint32 family = 9;
  void clear_family();
  static const int kFamilyFieldNumber = 9;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // uint32 source_asn = 10;
  void clear_source_asn();
  static const int kSourceAsnFieldNumber = 10;
  ::google::protobuf::uint32 source_asn() const;
  void set_source_asn(::google::protobuf::uint32 value);

  // bool stale = 13;
  void clear_stale();
  static const int kStaleFieldNumber = 13;
  bool stale() const;
  void set_stale(bool value);

  // bool is_from_external = 14;
  void clear_is_from_external();
  static const int kIsFromExternalFieldNumber = 14;
  bool is_from_external() const;
  void set_is_from_external(bool value);

  // bool is_nexthop_invalid = 17;
  void clear_is_nexthop_invalid();
  static const int kIsNexthopInvalidFieldNumber = 17;
  bool is_nexthop_invalid() const;
  void set_is_nexthop_invalid(bool value);

  // uint32 identifier = 18;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 18;
  ::google::protobuf::uint32 identifier() const;
  void set_identifier(::google::protobuf::uint32 value);

  // uint32 local_identifier = 19;
  void clear_local_identifier();
  static const int kLocalIdentifierFieldNumber = 19;
  ::google::protobuf::uint32 local_identifier() const;
  void set_local_identifier(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Path)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pattrs_;
  ::google::protobuf::internal::ArenaStringPtr nlri_;
  ::google::protobuf::internal::ArenaStringPtr source_id_;
  ::google::protobuf::internal::ArenaStringPtr neighbor_ip_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::gobgpapi::RPKIValidation* validation_detail_;
  ::google::protobuf::int64 age_;
  ::google::protobuf::int32 validation_;
  bool best_;
  bool is_withdraw_;
  bool no_implicit_withdraw_;
  bool filtered_;
  ::google::protobuf::uint32 family_;
  ::google::protobuf::uint32 source_asn_;
  bool stale_;
  bool is_from_external_;
  bool is_nexthop_invalid_;
  ::google::protobuf::uint32 identifier_;
  ::google::protobuf::uint32 local_identifier_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsPathImpl();
};
// -------------------------------------------------------------------

class Destination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Destination) */ {
 public:
  Destination();
  virtual ~Destination();

  Destination(const Destination& from);

  inline Destination& operator=(const Destination& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Destination(Destination&& from) noexcept
    : Destination() {
    *this = ::std::move(from);
  }

  inline Destination& operator=(Destination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Destination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Destination* internal_default_instance() {
    return reinterpret_cast<const Destination*>(
               &_Destination_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void Swap(Destination* other);
  friend void swap(Destination& a, Destination& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Destination* New() const PROTOBUF_FINAL { return New(NULL); }

  Destination* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Destination& from);
  void MergeFrom(const Destination& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Destination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Path paths = 2;
  int paths_size() const;
  void clear_paths();
  static const int kPathsFieldNumber = 2;
  const ::gobgpapi::Path& paths(int index) const;
  ::gobgpapi::Path* mutable_paths(int index);
  ::gobgpapi::Path* add_paths();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
      mutable_paths();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
      paths() const;

  // string prefix = 1;
  void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // bool longer_prefixes = 3;
  void clear_longer_prefixes();
  static const int kLongerPrefixesFieldNumber = 3;
  bool longer_prefixes() const;
  void set_longer_prefixes(bool value);

  // bool shorter_prefixes = 4;
  void clear_shorter_prefixes();
  static const int kShorterPrefixesFieldNumber = 4;
  bool shorter_prefixes() const;
  void set_shorter_prefixes(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Destination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path > paths_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  bool longer_prefixes_;
  bool shorter_prefixes_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDestinationImpl();
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const PROTOBUF_FINAL { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Destination destinations = 4;
  int destinations_size() const;
  void clear_destinations();
  static const int kDestinationsFieldNumber = 4;
  const ::gobgpapi::Destination& destinations(int index) const;
  ::gobgpapi::Destination* mutable_destinations(int index);
  ::gobgpapi::Destination* add_destinations();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >*
      mutable_destinations();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >&
      destinations() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gobgpapi.Resource type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::Resource type() const;
  void set_type(::gobgpapi::Resource value);

  // uint32 family = 3;
  void clear_family();
  static const int kFamilyFieldNumber = 3;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // bool post_policy = 5;
  void clear_post_policy();
  static const int kPostPolicyFieldNumber = 5;
  bool post_policy() const;
  void set_post_policy(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination > destinations_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::uint32 family_;
  bool post_policy_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsTableImpl();
};
// -------------------------------------------------------------------

class GetRibRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetRibRequest) */ {
 public:
  GetRibRequest();
  virtual ~GetRibRequest();

  GetRibRequest(const GetRibRequest& from);

  inline GetRibRequest& operator=(const GetRibRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRibRequest(GetRibRequest&& from) noexcept
    : GetRibRequest() {
    *this = ::std::move(from);
  }

  inline GetRibRequest& operator=(GetRibRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRibRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRibRequest* internal_default_instance() {
    return reinterpret_cast<const GetRibRequest*>(
               &_GetRibRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    99;

  void Swap(GetRibRequest* other);
  friend void swap(GetRibRequest& a, GetRibRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRibRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRibRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRibRequest& from);
  void MergeFrom(const GetRibRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRibRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Table table = 1;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::gobgpapi::Table& table() const;
  ::gobgpapi::Table* release_table();
  ::gobgpapi::Table* mutable_table();
  void set_allocated_table(::gobgpapi::Table* table);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetRibRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Table* table_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetRibRequestImpl();
};
// -------------------------------------------------------------------

class GetRibResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetRibResponse) */ {
 public:
  GetRibResponse();
  virtual ~GetRibResponse();

  GetRibResponse(const GetRibResponse& from);

  inline GetRibResponse& operator=(const GetRibResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRibResponse(GetRibResponse&& from) noexcept
    : GetRibResponse() {
    *this = ::std::move(from);
  }

  inline GetRibResponse& operator=(GetRibResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRibResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRibResponse* internal_default_instance() {
    return reinterpret_cast<const GetRibResponse*>(
               &_GetRibResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    100;

  void Swap(GetRibResponse* other);
  friend void swap(GetRibResponse& a, GetRibResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRibResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRibResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRibResponse& from);
  void MergeFrom(const GetRibResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRibResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Table table = 1;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::gobgpapi::Table& table() const;
  ::gobgpapi::Table* release_table();
  ::gobgpapi::Table* mutable_table();
  void set_allocated_table(::gobgpapi::Table* table);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetRibResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Table* table_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetRibResponseImpl();
};
// -------------------------------------------------------------------

class TableLookupPrefix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TableLookupPrefix) */ {
 public:
  TableLookupPrefix();
  virtual ~TableLookupPrefix();

  TableLookupPrefix(const TableLookupPrefix& from);

  inline TableLookupPrefix& operator=(const TableLookupPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableLookupPrefix(TableLookupPrefix&& from) noexcept
    : TableLookupPrefix() {
    *this = ::std::move(from);
  }

  inline TableLookupPrefix& operator=(TableLookupPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableLookupPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableLookupPrefix* internal_default_instance() {
    return reinterpret_cast<const TableLookupPrefix*>(
               &_TableLookupPrefix_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    101;

  void Swap(TableLookupPrefix* other);
  friend void swap(TableLookupPrefix& a, TableLookupPrefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableLookupPrefix* New() const PROTOBUF_FINAL { return New(NULL); }

  TableLookupPrefix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableLookupPrefix& from);
  void MergeFrom(const TableLookupPrefix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableLookupPrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string prefix = 1;
  void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // .gobgpapi.TableLookupOption lookup_option = 2;
  void clear_lookup_option();
  static const int kLookupOptionFieldNumber = 2;
  ::gobgpapi::TableLookupOption lookup_option() const;
  void set_lookup_option(::gobgpapi::TableLookupOption value);

  // @@protoc_insertion_point(class_scope:gobgpapi.TableLookupPrefix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  int lookup_option_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsTableLookupPrefixImpl();
};
// -------------------------------------------------------------------

class GetPathRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetPathRequest) */ {
 public:
  GetPathRequest();
  virtual ~GetPathRequest();

  GetPathRequest(const GetPathRequest& from);

  inline GetPathRequest& operator=(const GetPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPathRequest(GetPathRequest&& from) noexcept
    : GetPathRequest() {
    *this = ::std::move(from);
  }

  inline GetPathRequest& operator=(GetPathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPathRequest* internal_default_instance() {
    return reinterpret_cast<const GetPathRequest*>(
               &_GetPathRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    102;

  void Swap(GetPathRequest* other);
  friend void swap(GetPathRequest& a, GetPathRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPathRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPathRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPathRequest& from);
  void MergeFrom(const GetPathRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPathRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.TableLookupPrefix prefixes = 4;
  int prefixes_size() const;
  void clear_prefixes();
  static const int kPrefixesFieldNumber = 4;
  const ::gobgpapi::TableLookupPrefix& prefixes(int index) const;
  ::gobgpapi::TableLookupPrefix* mutable_prefixes(int index);
  ::gobgpapi::TableLookupPrefix* add_prefixes();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::TableLookupPrefix >*
      mutable_prefixes();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::TableLookupPrefix >&
      prefixes() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gobgpapi.Resource type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::Resource type() const;
  void set_type(::gobgpapi::Resource value);

  // uint32 family = 3;
  void clear_family();
  static const int kFamilyFieldNumber = 3;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetPathRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::TableLookupPrefix > prefixes_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::uint32 family_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetPathRequestImpl();
};
// -------------------------------------------------------------------

class ValidateRibRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ValidateRibRequest) */ {
 public:
  ValidateRibRequest();
  virtual ~ValidateRibRequest();

  ValidateRibRequest(const ValidateRibRequest& from);

  inline ValidateRibRequest& operator=(const ValidateRibRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateRibRequest(ValidateRibRequest&& from) noexcept
    : ValidateRibRequest() {
    *this = ::std::move(from);
  }

  inline ValidateRibRequest& operator=(ValidateRibRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateRibRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateRibRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateRibRequest*>(
               &_ValidateRibRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    103;

  void Swap(ValidateRibRequest* other);
  friend void swap(ValidateRibRequest& a, ValidateRibRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateRibRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ValidateRibRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValidateRibRequest& from);
  void MergeFrom(const ValidateRibRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValidateRibRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string prefix = 3;
  void clear_prefix();
  static const int kPrefixFieldNumber = 3;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // .gobgpapi.Resource type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::Resource type() const;
  void set_type(::gobgpapi::Resource value);

  // uint32 family = 2;
  void clear_family();
  static const int kFamilyFieldNumber = 2;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.ValidateRibRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  int type_;
  ::google::protobuf::uint32 family_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsValidateRibRequestImpl();
};
// -------------------------------------------------------------------

class ValidateRibResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ValidateRibResponse) */ {
 public:
  ValidateRibResponse();
  virtual ~ValidateRibResponse();

  ValidateRibResponse(const ValidateRibResponse& from);

  inline ValidateRibResponse& operator=(const ValidateRibResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateRibResponse(ValidateRibResponse&& from) noexcept
    : ValidateRibResponse() {
    *this = ::std::move(from);
  }

  inline ValidateRibResponse& operator=(ValidateRibResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateRibResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateRibResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateRibResponse*>(
               &_ValidateRibResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    104;

  void Swap(ValidateRibResponse* other);
  friend void swap(ValidateRibResponse& a, ValidateRibResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateRibResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ValidateRibResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValidateRibResponse& from);
  void MergeFrom(const ValidateRibResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValidateRibResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.ValidateRibResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsValidateRibResponseImpl();
};
// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    105;

  void Swap(Peer* other);
  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const PROTOBUF_FINAL { return New(NULL); }

  Peer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 families = 1;
  int families_size() const;
  void clear_families();
  static const int kFamiliesFieldNumber = 1;
  ::google::protobuf::uint32 families(int index) const;
  void set_families(int index, ::google::protobuf::uint32 value);
  void add_families(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      families() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_families();

  // repeated .gobgpapi.AfiSafi afi_safis = 11;
  int afi_safis_size() const;
  void clear_afi_safis();
  static const int kAfiSafisFieldNumber = 11;
  const ::gobgpapi::AfiSafi& afi_safis(int index) const;
  ::gobgpapi::AfiSafi* mutable_afi_safis(int index);
  ::gobgpapi::AfiSafi* add_afi_safis();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::AfiSafi >*
      mutable_afi_safis();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::AfiSafi >&
      afi_safis() const;

  // .gobgpapi.ApplyPolicy apply_policy = 2;
  bool has_apply_policy() const;
  void clear_apply_policy();
  static const int kApplyPolicyFieldNumber = 2;
  const ::gobgpapi::ApplyPolicy& apply_policy() const;
  ::gobgpapi::ApplyPolicy* release_apply_policy();
  ::gobgpapi::ApplyPolicy* mutable_apply_policy();
  void set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy);

  // .gobgpapi.PeerConf conf = 3;
  bool has_conf() const;
  void clear_conf();
  static const int kConfFieldNumber = 3;
  const ::gobgpapi::PeerConf& conf() const;
  ::gobgpapi::PeerConf* release_conf();
  ::gobgpapi::PeerConf* mutable_conf();
  void set_allocated_conf(::gobgpapi::PeerConf* conf);

  // .gobgpapi.EbgpMultihop ebgp_multihop = 4;
  bool has_ebgp_multihop() const;
  void clear_ebgp_multihop();
  static const int kEbgpMultihopFieldNumber = 4;
  const ::gobgpapi::EbgpMultihop& ebgp_multihop() const;
  ::gobgpapi::EbgpMultihop* release_ebgp_multihop();
  ::gobgpapi::EbgpMultihop* mutable_ebgp_multihop();
  void set_allocated_ebgp_multihop(::gobgpapi::EbgpMultihop* ebgp_multihop);

  // .gobgpapi.RouteReflector route_reflector = 5;
  bool has_route_reflector() const;
  void clear_route_reflector();
  static const int kRouteReflectorFieldNumber = 5;
  const ::gobgpapi::RouteReflector& route_reflector() const;
  ::gobgpapi::RouteReflector* release_route_reflector();
  ::gobgpapi::RouteReflector* mutable_route_reflector();
  void set_allocated_route_reflector(::gobgpapi::RouteReflector* route_reflector);

  // .gobgpapi.PeerState info = 6;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 6;
  const ::gobgpapi::PeerState& info() const;
  ::gobgpapi::PeerState* release_info();
  ::gobgpapi::PeerState* mutable_info();
  void set_allocated_info(::gobgpapi::PeerState* info);

  // .gobgpapi.Timers timers = 7;
  bool has_timers() const;
  void clear_timers();
  static const int kTimersFieldNumber = 7;
  const ::gobgpapi::Timers& timers() const;
  ::gobgpapi::Timers* release_timers();
  ::gobgpapi::Timers* mutable_timers();
  void set_allocated_timers(::gobgpapi::Timers* timers);

  // .gobgpapi.Transport transport = 8;
  bool has_transport() const;
  void clear_transport();
  static const int kTransportFieldNumber = 8;
  const ::gobgpapi::Transport& transport() const;
  ::gobgpapi::Transport* release_transport();
  ::gobgpapi::Transport* mutable_transport();
  void set_allocated_transport(::gobgpapi::Transport* transport);

  // .gobgpapi.RouteServer route_server = 9;
  bool has_route_server() const;
  void clear_route_server();
  static const int kRouteServerFieldNumber = 9;
  const ::gobgpapi::RouteServer& route_server() const;
  ::gobgpapi::RouteServer* release_route_server();
  ::gobgpapi::RouteServer* mutable_route_server();
  void set_allocated_route_server(::gobgpapi::RouteServer* route_server);

  // .gobgpapi.GracefulRestart graceful_restart = 10;
  bool has_graceful_restart() const;
  void clear_graceful_restart();
  static const int kGracefulRestartFieldNumber = 10;
  const ::gobgpapi::GracefulRestart& graceful_restart() const;
  ::gobgpapi::GracefulRestart* release_graceful_restart();
  ::gobgpapi::GracefulRestart* mutable_graceful_restart();
  void set_allocated_graceful_restart(::gobgpapi::GracefulRestart* graceful_restart);

  // .gobgpapi.AddPaths add_paths = 12;
  bool has_add_paths() const;
  void clear_add_paths();
  static const int kAddPathsFieldNumber = 12;
  const ::gobgpapi::AddPaths& add_paths() const;
  ::gobgpapi::AddPaths* release_add_paths();
  ::gobgpapi::AddPaths* mutable_add_paths();
  void set_allocated_add_paths(::gobgpapi::AddPaths* add_paths);

  // @@protoc_insertion_point(class_scope:gobgpapi.Peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > families_;
  mutable int _families_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::AfiSafi > afi_safis_;
  ::gobgpapi::ApplyPolicy* apply_policy_;
  ::gobgpapi::PeerConf* conf_;
  ::gobgpapi::EbgpMultihop* ebgp_multihop_;
  ::gobgpapi::RouteReflector* route_reflector_;
  ::gobgpapi::PeerState* info_;
  ::gobgpapi::Timers* timers_;
  ::gobgpapi::Transport* transport_;
  ::gobgpapi::RouteServer* route_server_;
  ::gobgpapi::GracefulRestart* graceful_restart_;
  ::gobgpapi::AddPaths* add_paths_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsPeerImpl();
};
// -------------------------------------------------------------------

class ApplyPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ApplyPolicy) */ {
 public:
  ApplyPolicy();
  virtual ~ApplyPolicy();

  ApplyPolicy(const ApplyPolicy& from);

  inline ApplyPolicy& operator=(const ApplyPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApplyPolicy(ApplyPolicy&& from) noexcept
    : ApplyPolicy() {
    *this = ::std::move(from);
  }

  inline ApplyPolicy& operator=(ApplyPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyPolicy* internal_default_instance() {
    return reinterpret_cast<const ApplyPolicy*>(
               &_ApplyPolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    106;

  void Swap(ApplyPolicy* other);
  friend void swap(ApplyPolicy& a, ApplyPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApplyPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  ApplyPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ApplyPolicy& from);
  void MergeFrom(const ApplyPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ApplyPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.PolicyAssignment in_policy = 1;
  bool has_in_policy() const;
  void clear_in_policy();
  static const int kInPolicyFieldNumber = 1;
  const ::gobgpapi::PolicyAssignment& in_policy() const;
  ::gobgpapi::PolicyAssignment* release_in_policy();
  ::gobgpapi::PolicyAssignment* mutable_in_policy();
  void set_allocated_in_policy(::gobgpapi::PolicyAssignment* in_policy);

  // .gobgpapi.PolicyAssignment export_policy = 2;
  bool has_export_policy() const;
  void clear_export_policy();
  static const int kExportPolicyFieldNumber = 2;
  const ::gobgpapi::PolicyAssignment& export_policy() const;
  ::gobgpapi::PolicyAssignment* release_export_policy();
  ::gobgpapi::PolicyAssignment* mutable_export_policy();
  void set_allocated_export_policy(::gobgpapi::PolicyAssignment* export_policy);

  // .gobgpapi.PolicyAssignment import_policy = 3;
  bool has_import_policy() const;
  void clear_import_policy();
  static const int kImportPolicyFieldNumber = 3;
  const ::gobgpapi::PolicyAssignment& import_policy() const;
  ::gobgpapi::PolicyAssignment* release_import_policy();
  ::gobgpapi::PolicyAssignment* mutable_import_policy();
  void set_allocated_import_policy(::gobgpapi::PolicyAssignment* import_policy);

  // @@protoc_insertion_point(class_scope:gobgpapi.ApplyPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* in_policy_;
  ::gobgpapi::PolicyAssignment* export_policy_;
  ::gobgpapi::PolicyAssignment* import_policy_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsApplyPolicyImpl();
};
// -------------------------------------------------------------------

class PrefixLimit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PrefixLimit) */ {
 public:
  PrefixLimit();
  virtual ~PrefixLimit();

  PrefixLimit(const PrefixLimit& from);

  inline PrefixLimit& operator=(const PrefixLimit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrefixLimit(PrefixLimit&& from) noexcept
    : PrefixLimit() {
    *this = ::std::move(from);
  }

  inline PrefixLimit& operator=(PrefixLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrefixLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrefixLimit* internal_default_instance() {
    return reinterpret_cast<const PrefixLimit*>(
               &_PrefixLimit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    107;

  void Swap(PrefixLimit* other);
  friend void swap(PrefixLimit& a, PrefixLimit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrefixLimit* New() const PROTOBUF_FINAL { return New(NULL); }

  PrefixLimit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrefixLimit& from);
  void MergeFrom(const PrefixLimit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrefixLimit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 family = 1;
  void clear_family();
  static const int kFamilyFieldNumber = 1;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // uint32 max_prefixes = 2;
  void clear_max_prefixes();
  static const int kMaxPrefixesFieldNumber = 2;
  ::google::protobuf::uint32 max_prefixes() const;
  void set_max_prefixes(::google::protobuf::uint32 value);

  // uint32 shutdown_threshold_pct = 3;
  void clear_shutdown_threshold_pct();
  static const int kShutdownThresholdPctFieldNumber = 3;
  ::google::protobuf::uint32 shutdown_threshold_pct() const;
  void set_shutdown_threshold_pct(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.PrefixLimit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 family_;
  ::google::protobuf::uint32 max_prefixes_;
  ::google::protobuf::uint32 shutdown_threshold_pct_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsPrefixLimitImpl();
};
// -------------------------------------------------------------------

class PeerConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PeerConf) */ {
 public:
  PeerConf();
  virtual ~PeerConf();

  PeerConf(const PeerConf& from);

  inline PeerConf& operator=(const PeerConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerConf(PeerConf&& from) noexcept
    : PeerConf() {
    *this = ::std::move(from);
  }

  inline PeerConf& operator=(PeerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerConf* internal_default_instance() {
    return reinterpret_cast<const PeerConf*>(
               &_PeerConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    108;

  void Swap(PeerConf* other);
  friend void swap(PeerConf& a, PeerConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerConf* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PeerConf& from);
  void MergeFrom(const PeerConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PeerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PeerConf_RemovePrivateAs RemovePrivateAs;
  static const RemovePrivateAs NONE =
    PeerConf_RemovePrivateAs_NONE;
  static const RemovePrivateAs ALL =
    PeerConf_RemovePrivateAs_ALL;
  static const RemovePrivateAs REPLACE =
    PeerConf_RemovePrivateAs_REPLACE;
  static inline bool RemovePrivateAs_IsValid(int value) {
    return PeerConf_RemovePrivateAs_IsValid(value);
  }
  static const RemovePrivateAs RemovePrivateAs_MIN =
    PeerConf_RemovePrivateAs_RemovePrivateAs_MIN;
  static const RemovePrivateAs RemovePrivateAs_MAX =
    PeerConf_RemovePrivateAs_RemovePrivateAs_MAX;
  static const int RemovePrivateAs_ARRAYSIZE =
    PeerConf_RemovePrivateAs_RemovePrivateAs_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RemovePrivateAs_descriptor() {
    return PeerConf_RemovePrivateAs_descriptor();
  }
  static inline const ::std::string& RemovePrivateAs_Name(RemovePrivateAs value) {
    return PeerConf_RemovePrivateAs_Name(value);
  }
  static inline bool RemovePrivateAs_Parse(const ::std::string& name,
      RemovePrivateAs* value) {
    return PeerConf_RemovePrivateAs_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bytes remote_cap = 11;
  int remote_cap_size() const;
  void clear_remote_cap();
  static const int kRemoteCapFieldNumber = 11;
  const ::std::string& remote_cap(int index) const;
  ::std::string* mutable_remote_cap(int index);
  void set_remote_cap(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_remote_cap(int index, ::std::string&& value);
  #endif
  void set_remote_cap(int index, const char* value);
  void set_remote_cap(int index, const void* value, size_t size);
  ::std::string* add_remote_cap();
  void add_remote_cap(const ::std::string& value);
  #if LANG_CXX11
  void add_remote_cap(::std::string&& value);
  #endif
  void add_remote_cap(const char* value);
  void add_remote_cap(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& remote_cap() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remote_cap();

  // repeated bytes local_cap = 12;
  int local_cap_size() const;
  void clear_local_cap();
  static const int kLocalCapFieldNumber = 12;
  const ::std::string& local_cap(int index) const;
  ::std::string* mutable_local_cap(int index);
  void set_local_cap(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_local_cap(int index, ::std::string&& value);
  #endif
  void set_local_cap(int index, const char* value);
  void set_local_cap(int index, const void* value, size_t size);
  ::std::string* add_local_cap();
  void add_local_cap(const ::std::string& value);
  #if LANG_CXX11
  void add_local_cap(::std::string&& value);
  #endif
  void add_local_cap(const char* value);
  void add_local_cap(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& local_cap() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_local_cap();

  // repeated .gobgpapi.PrefixLimit prefix_limits = 14;
  int prefix_limits_size() const;
  void clear_prefix_limits();
  static const int kPrefixLimitsFieldNumber = 14;
  const ::gobgpapi::PrefixLimit& prefix_limits(int index) const;
  ::gobgpapi::PrefixLimit* mutable_prefix_limits(int index);
  ::gobgpapi::PrefixLimit* add_prefix_limits();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::PrefixLimit >*
      mutable_prefix_limits();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::PrefixLimit >&
      prefix_limits() const;

  // string auth_password = 1;
  void clear_auth_password();
  static const int kAuthPasswordFieldNumber = 1;
  const ::std::string& auth_password() const;
  void set_auth_password(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_password(::std::string&& value);
  #endif
  void set_auth_password(const char* value);
  void set_auth_password(const char* value, size_t size);
  ::std::string* mutable_auth_password();
  ::std::string* release_auth_password();
  void set_allocated_auth_password(::std::string* auth_password);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string neighbor_address = 4;
  void clear_neighbor_address();
  static const int kNeighborAddressFieldNumber = 4;
  const ::std::string& neighbor_address() const;
  void set_neighbor_address(const ::std::string& value);
  #if LANG_CXX11
  void set_neighbor_address(::std::string&& value);
  #endif
  void set_neighbor_address(const char* value);
  void set_neighbor_address(const char* value, size_t size);
  ::std::string* mutable_neighbor_address();
  ::std::string* release_neighbor_address();
  void set_allocated_neighbor_address(::std::string* neighbor_address);

  // string peer_group = 6;
  void clear_peer_group();
  static const int kPeerGroupFieldNumber = 6;
  const ::std::string& peer_group() const;
  void set_peer_group(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_group(::std::string&& value);
  #endif
  void set_peer_group(const char* value);
  void set_peer_group(const char* value, size_t size);
  ::std::string* mutable_peer_group();
  ::std::string* release_peer_group();
  void set_allocated_peer_group(::std::string* peer_group);

  // string id = 13;
  void clear_id();
  static const int kIdFieldNumber = 13;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string local_address = 15;
  void clear_local_address();
  static const int kLocalAddressFieldNumber = 15;
  const ::std::string& local_address() const;
  void set_local_address(const ::std::string& value);
  #if LANG_CXX11
  void set_local_address(::std::string&& value);
  #endif
  void set_local_address(const char* value);
  void set_local_address(const char* value, size_t size);
  ::std::string* mutable_local_address();
  ::std::string* release_local_address();
  void set_allocated_local_address(::std::string* local_address);

  // string neighbor_interface = 16;
  void clear_neighbor_interface();
  static const int kNeighborInterfaceFieldNumber = 16;
  const ::std::string& neighbor_interface() const;
  void set_neighbor_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_neighbor_interface(::std::string&& value);
  #endif
  void set_neighbor_interface(const char* value);
  void set_neighbor_interface(const char* value, size_t size);
  ::std::string* mutable_neighbor_interface();
  ::std::string* release_neighbor_interface();
  void set_allocated_neighbor_interface(::std::string* neighbor_interface);

  // string vrf = 17;
  void clear_vrf();
  static const int kVrfFieldNumber = 17;
  const ::std::string& vrf() const;
  void set_vrf(const ::std::string& value);
  #if LANG_CXX11
  void set_vrf(::std::string&& value);
  #endif
  void set_vrf(const char* value);
  void set_vrf(const char* value, size_t size);
  ::std::string* mutable_vrf();
  ::std::string* release_vrf();
  void set_allocated_vrf(::std::string* vrf);

  // uint32 local_as = 3;
  void clear_local_as();
  static const int kLocalAsFieldNumber = 3;
  ::google::protobuf::uint32 local_as() const;
  void set_local_as(::google::protobuf::uint32 value);

  // uint32 peer_as = 5;
  void clear_peer_as();
  static const int kPeerAsFieldNumber = 5;
  ::google::protobuf::uint32 peer_as() const;
  void set_peer_as(::google::protobuf::uint32 value);

  // uint32 peer_type = 7;
  void clear_peer_type();
  static const int kPeerTypeFieldNumber = 7;
  ::google::protobuf::uint32 peer_type() const;
  void set_peer_type(::google::protobuf::uint32 value);

  // .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
  void clear_remove_private_as();
  static const int kRemovePrivateAsFieldNumber = 8;
  ::gobgpapi::PeerConf_RemovePrivateAs remove_private_as() const;
  void set_remove_private_as(::gobgpapi::PeerConf_RemovePrivateAs value);

  // uint32 send_community = 10;
  void clear_send_community();
  static const int kSendCommunityFieldNumber = 10;
  ::google::protobuf::uint32 send_community() const;
  void set_send_community(::google::protobuf::uint32 value);

  // bool route_flap_damping = 9;
  void clear_route_flap_damping();
  static const int kRouteFlapDampingFieldNumber = 9;
  bool route_flap_damping() const;
  void set_route_flap_damping(bool value);

  // bool replace_peer_as = 19;
  void clear_replace_peer_as();
  static const int kReplacePeerAsFieldNumber = 19;
  bool replace_peer_as() const;
  void set_replace_peer_as(bool value);

  // uint32 allow_own_as = 18;
  void clear_allow_own_as();
  static const int kAllowOwnAsFieldNumber = 18;
  ::google::protobuf::uint32 allow_own_as() const;
  void set_allow_own_as(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.PeerConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remote_cap_;
  ::google::protobuf::RepeatedPtrField< ::std::string> local_cap_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::PrefixLimit > prefix_limits_;
  ::google::protobuf::internal::ArenaStringPtr auth_password_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr neighbor_address_;
  ::google::protobuf::internal::ArenaStringPtr peer_group_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr local_address_;
  ::google::protobuf::internal::ArenaStringPtr neighbor_interface_;
  ::google::protobuf::internal::ArenaStringPtr vrf_;
  ::google::protobuf::uint32 local_as_;
  ::google::protobuf::uint32 peer_as_;
  ::google::protobuf::uint32 peer_type_;
  int remove_private_as_;
  ::google::protobuf::uint32 send_community_;
  bool route_flap_damping_;
  bool replace_peer_as_;
  ::google::protobuf::uint32 allow_own_as_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsPeerConfImpl();
};
// -------------------------------------------------------------------

class EbgpMultihop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EbgpMultihop) */ {
 public:
  EbgpMultihop();
  virtual ~EbgpMultihop();

  EbgpMultihop(const EbgpMultihop& from);

  inline EbgpMultihop& operator=(const EbgpMultihop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EbgpMultihop(EbgpMultihop&& from) noexcept
    : EbgpMultihop() {
    *this = ::std::move(from);
  }

  inline EbgpMultihop& operator=(EbgpMultihop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EbgpMultihop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EbgpMultihop* internal_default_instance() {
    return reinterpret_cast<const EbgpMultihop*>(
               &_EbgpMultihop_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    109;

  void Swap(EbgpMultihop* other);
  friend void swap(EbgpMultihop& a, EbgpMultihop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EbgpMultihop* New() const PROTOBUF_FINAL { return New(NULL); }

  EbgpMultihop* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EbgpMultihop& from);
  void MergeFrom(const EbgpMultihop& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EbgpMultihop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 multihop_ttl = 2;
  void clear_multihop_ttl();
  static const int kMultihopTtlFieldNumber = 2;
  ::google::protobuf::uint32 multihop_ttl() const;
  void set_multihop_ttl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.EbgpMultihop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  ::google::protobuf::uint32 multihop_ttl_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEbgpMultihopImpl();
};
// -------------------------------------------------------------------

class RouteReflector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteReflector) */ {
 public:
  RouteReflector();
  virtual ~RouteReflector();

  RouteReflector(const RouteReflector& from);

  inline RouteReflector& operator=(const RouteReflector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteReflector(RouteReflector&& from) noexcept
    : RouteReflector() {
    *this = ::std::move(from);
  }

  inline RouteReflector& operator=(RouteReflector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteReflector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteReflector* internal_default_instance() {
    return reinterpret_cast<const RouteReflector*>(
               &_RouteReflector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    110;

  void Swap(RouteReflector* other);
  friend void swap(RouteReflector& a, RouteReflector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteReflector* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteReflector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteReflector& from);
  void MergeFrom(const RouteReflector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteReflector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string route_reflector_cluster_id = 2;
  void clear_route_reflector_cluster_id();
  static const int kRouteReflectorClusterIdFieldNumber = 2;
  const ::std::string& route_reflector_cluster_id() const;
  void set_route_reflector_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_route_reflector_cluster_id(::std::string&& value);
  #endif
  void set_route_reflector_cluster_id(const char* value);
  void set_route_reflector_cluster_id(const char* value, size_t size);
  ::std::string* mutable_route_reflector_cluster_id();
  ::std::string* release_route_reflector_cluster_id();
  void set_allocated_route_reflector_cluster_id(::std::string* route_reflector_cluster_id);

  // bool route_reflector_client = 1;
  void clear_route_reflector_client();
  static const int kRouteReflectorClientFieldNumber = 1;
  bool route_reflector_client() const;
  void set_route_reflector_client(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteReflector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr route_reflector_cluster_id_;
  bool route_reflector_client_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRouteReflectorImpl();
};
// -------------------------------------------------------------------

class PeerState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PeerState) */ {
 public:
  PeerState();
  virtual ~PeerState();

  PeerState(const PeerState& from);

  inline PeerState& operator=(const PeerState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerState(PeerState&& from) noexcept
    : PeerState() {
    *this = ::std::move(from);
  }

  inline PeerState& operator=(PeerState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerState* internal_default_instance() {
    return reinterpret_cast<const PeerState*>(
               &_PeerState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    111;

  void Swap(PeerState* other);
  friend void swap(PeerState& a, PeerState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerState* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PeerState& from);
  void MergeFrom(const PeerState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PeerState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PeerState_AdminState AdminState;
  static const AdminState UP =
    PeerState_AdminState_UP;
  static const AdminState DOWN =
    PeerState_AdminState_DOWN;
  static const AdminState PFX_CT =
    PeerState_AdminState_PFX_CT;
  static inline bool AdminState_IsValid(int value) {
    return PeerState_AdminState_IsValid(value);
  }
  static const AdminState AdminState_MIN =
    PeerState_AdminState_AdminState_MIN;
  static const AdminState AdminState_MAX =
    PeerState_AdminState_AdminState_MAX;
  static const int AdminState_ARRAYSIZE =
    PeerState_AdminState_AdminState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AdminState_descriptor() {
    return PeerState_AdminState_descriptor();
  }
  static inline const ::std::string& AdminState_Name(AdminState value) {
    return PeerState_AdminState_Name(value);
  }
  static inline bool AdminState_Parse(const ::std::string& name,
      AdminState* value) {
    return PeerState_AdminState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string supported_capabilities = 14;
  int supported_capabilities_size() const;
  void clear_supported_capabilities();
  static const int kSupportedCapabilitiesFieldNumber = 14;
  const ::std::string& supported_capabilities(int index) const;
  ::std::string* mutable_supported_capabilities(int index);
  void set_supported_capabilities(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_supported_capabilities(int index, ::std::string&& value);
  #endif
  void set_supported_capabilities(int index, const char* value);
  void set_supported_capabilities(int index, const char* value, size_t size);
  ::std::string* add_supported_capabilities();
  void add_supported_capabilities(const ::std::string& value);
  #if LANG_CXX11
  void add_supported_capabilities(::std::string&& value);
  #endif
  void add_supported_capabilities(const char* value);
  void add_supported_capabilities(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& supported_capabilities() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_supported_capabilities();

  // string auth_password = 1;
  void clear_auth_password();
  static const int kAuthPasswordFieldNumber = 1;
  const ::std::string& auth_password() const;
  void set_auth_password(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_password(::std::string&& value);
  #endif
  void set_auth_password(const char* value);
  void set_auth_password(const char* value, size_t size);
  ::std::string* mutable_auth_password();
  ::std::string* release_auth_password();
  void set_allocated_auth_password(::std::string* auth_password);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string neighbor_address = 5;
  void clear_neighbor_address();
  static const int kNeighborAddressFieldNumber = 5;
  const ::std::string& neighbor_address() const;
  void set_neighbor_address(const ::std::string& value);
  #if LANG_CXX11
  void set_neighbor_address(::std::string&& value);
  #endif
  void set_neighbor_address(const char* value);
  void set_neighbor_address(const char* value, size_t size);
  ::std::string* mutable_neighbor_address();
  ::std::string* release_neighbor_address();
  void set_allocated_neighbor_address(::std::string* neighbor_address);

  // string peer_group = 7;
  void clear_peer_group();
  static const int kPeerGroupFieldNumber = 7;
  const ::std::string& peer_group() const;
  void set_peer_group(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_group(::std::string&& value);
  #endif
  void set_peer_group(const char* value);
  void set_peer_group(const char* value, size_t size);
  ::std::string* mutable_peer_group();
  ::std::string* release_peer_group();
  void set_allocated_peer_group(::std::string* peer_group);

  // string bgp_state = 15;
  void clear_bgp_state();
  static const int kBgpStateFieldNumber = 15;
  const ::std::string& bgp_state() const;
  void set_bgp_state(const ::std::string& value);
  #if LANG_CXX11
  void set_bgp_state(::std::string&& value);
  #endif
  void set_bgp_state(const char* value);
  void set_bgp_state(const char* value, size_t size);
  ::std::string* mutable_bgp_state();
  ::std::string* release_bgp_state();
  void set_allocated_bgp_state(::std::string* bgp_state);

  // .gobgpapi.Messages messages = 4;
  bool has_messages() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 4;
  const ::gobgpapi::Messages& messages() const;
  ::gobgpapi::Messages* release_messages();
  ::gobgpapi::Messages* mutable_messages();
  void set_allocated_messages(::gobgpapi::Messages* messages);

  // .gobgpapi.Queues queues = 9;
  bool has_queues() const;
  void clear_queues();
  static const int kQueuesFieldNumber = 9;
  const ::gobgpapi::Queues& queues() const;
  ::gobgpapi::Queues* release_queues();
  ::gobgpapi::Queues* mutable_queues();
  void set_allocated_queues(::gobgpapi::Queues* queues);

  // uint32 local_as = 3;
  void clear_local_as();
  static const int kLocalAsFieldNumber = 3;
  ::google::protobuf::uint32 local_as() const;
  void set_local_as(::google::protobuf::uint32 value);

  // uint32 peer_as = 6;
  void clear_peer_as();
  static const int kPeerAsFieldNumber = 6;
  ::google::protobuf::uint32 peer_as() const;
  void set_peer_as(::google::protobuf::uint32 value);

  // uint32 peer_type = 8;
  void clear_peer_type();
  static const int kPeerTypeFieldNumber = 8;
  ::google::protobuf::uint32 peer_type() const;
  void set_peer_type(::google::protobuf::uint32 value);

  // uint32 remove_private_as = 10;
  void clear_remove_private_as();
  static const int kRemovePrivateAsFieldNumber = 10;
  ::google::protobuf::uint32 remove_private_as() const;
  void set_remove_private_as(::google::protobuf::uint32 value);

  // bool route_flap_damping = 11;
  void clear_route_flap_damping();
  static const int kRouteFlapDampingFieldNumber = 11;
  bool route_flap_damping() const;
  void set_route_flap_damping(bool value);

  // uint32 send_community = 12;
  void clear_send_community();
  static const int kSendCommunityFieldNumber = 12;
  ::google::protobuf::uint32 send_community() const;
  void set_send_community(::google::protobuf::uint32 value);

  // uint32 session_state = 13;
  void clear_session_state();
  static const int kSessionStateFieldNumber = 13;
  ::google::protobuf::uint32 session_state() const;
  void set_session_state(::google::protobuf::uint32 value);

  // .gobgpapi.PeerState.AdminState admin_state = 16;
  void clear_admin_state();
  static const int kAdminStateFieldNumber = 16;
  ::gobgpapi::PeerState_AdminState admin_state() const;
  void set_admin_state(::gobgpapi::PeerState_AdminState value);

  // uint32 received = 17;
  void clear_received();
  static const int kReceivedFieldNumber = 17;
  ::google::protobuf::uint32 received() const;
  void set_received(::google::protobuf::uint32 value);

  // uint32 accepted = 18;
  void clear_accepted();
  static const int kAcceptedFieldNumber = 18;
  ::google::protobuf::uint32 accepted() const;
  void set_accepted(::google::protobuf::uint32 value);

  // uint32 advertised = 19;
  void clear_advertised();
  static const int kAdvertisedFieldNumber = 19;
  ::google::protobuf::uint32 advertised() const;
  void set_advertised(::google::protobuf::uint32 value);

  // uint32 out_q = 20;
  void clear_out_q();
  static const int kOutQFieldNumber = 20;
  ::google::protobuf::uint32 out_q() const;
  void set_out_q(::google::protobuf::uint32 value);

  // uint32 flops = 21;
  void clear_flops();
  static const int kFlopsFieldNumber = 21;
  ::google::protobuf::uint32 flops() const;
  void set_flops(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.PeerState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> supported_capabilities_;
  ::google::protobuf::internal::ArenaStringPtr auth_password_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr neighbor_address_;
  ::google::protobuf::internal::ArenaStringPtr peer_group_;
  ::google::protobuf::internal::ArenaStringPtr bgp_state_;
  ::gobgpapi::Messages* messages_;
  ::gobgpapi::Queues* queues_;
  ::google::protobuf::uint32 local_as_;
  ::google::protobuf::uint32 peer_as_;
  ::google::protobuf::uint32 peer_type_;
  ::google::protobuf::uint32 remove_private_as_;
  bool route_flap_damping_;
  ::google::protobuf::uint32 send_community_;
  ::google::protobuf::uint32 session_state_;
  int admin_state_;
  ::google::protobuf::uint32 received_;
  ::google::protobuf::uint32 accepted_;
  ::google::protobuf::uint32 advertised_;
  ::google::protobuf::uint32 out_q_;
  ::google::protobuf::uint32 flops_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsPeerStateImpl();
};
// -------------------------------------------------------------------

class Messages : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Messages) */ {
 public:
  Messages();
  virtual ~Messages();

  Messages(const Messages& from);

  inline Messages& operator=(const Messages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Messages(Messages&& from) noexcept
    : Messages() {
    *this = ::std::move(from);
  }

  inline Messages& operator=(Messages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Messages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Messages* internal_default_instance() {
    return reinterpret_cast<const Messages*>(
               &_Messages_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    112;

  void Swap(Messages* other);
  friend void swap(Messages& a, Messages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Messages* New() const PROTOBUF_FINAL { return New(NULL); }

  Messages* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Messages& from);
  void MergeFrom(const Messages& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Messages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.Message received = 1;
  bool has_received() const;
  void clear_received();
  static const int kReceivedFieldNumber = 1;
  const ::gobgpapi::Message& received() const;
  ::gobgpapi::Message* release_received();
  ::gobgpapi::Message* mutable_received();
  void set_allocated_received(::gobgpapi::Message* received);

  // .gobgpapi.Message sent = 2;
  bool has_sent() const;
  void clear_sent();
  static const int kSentFieldNumber = 2;
  const ::gobgpapi::Message& sent() const;
  ::gobgpapi::Message* release_sent();
  ::gobgpapi::Message* mutable_sent();
  void set_allocated_sent(::gobgpapi::Message* sent);

  // @@protoc_insertion_point(class_scope:gobgpapi.Messages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Message* received_;
  ::gobgpapi::Message* sent_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsMessagesImpl();
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    113;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 NOTIFICATION = 1;
  void clear_notification();
  static const int kNOTIFICATIONFieldNumber = 1;
  ::google::protobuf::uint64 notification() const;
  void set_notification(::google::protobuf::uint64 value);

  // uint64 UPDATE = 2;
  void clear_update();
  static const int kUPDATEFieldNumber = 2;
  ::google::protobuf::uint64 update() const;
  void set_update(::google::protobuf::uint64 value);

  // uint64 OPEN = 3;
  void clear_open();
  static const int kOPENFieldNumber = 3;
  ::google::protobuf::uint64 open() const;
  void set_open(::google::protobuf::uint64 value);

  // uint64 KEEPALIVE = 4;
  void clear_keepalive();
  static const int kKEEPALIVEFieldNumber = 4;
  ::google::protobuf::uint64 keepalive() const;
  void set_keepalive(::google::protobuf::uint64 value);

  // uint64 REFRESH = 5;
  void clear_refresh();
  static const int kREFRESHFieldNumber = 5;
  ::google::protobuf::uint64 refresh() const;
  void set_refresh(::google::protobuf::uint64 value);

  // uint64 DISCARDED = 6;
  void clear_discarded();
  static const int kDISCARDEDFieldNumber = 6;
  ::google::protobuf::uint64 discarded() const;
  void set_discarded(::google::protobuf::uint64 value);

  // uint64 TOTAL = 7;
  void clear_total();
  static const int kTOTALFieldNumber = 7;
  ::google::protobuf::uint64 total() const;
  void set_total(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 notification_;
  ::google::protobuf::uint64 update_;
  ::google::protobuf::uint64 open_;
  ::google::protobuf::uint64 keepalive_;
  ::google::protobuf::uint64 refresh_;
  ::google::protobuf::uint64 discarded_;
  ::google::protobuf::uint64 total_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsMessageImpl();
};
// -------------------------------------------------------------------

class Queues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Queues) */ {
 public:
  Queues();
  virtual ~Queues();

  Queues(const Queues& from);

  inline Queues& operator=(const Queues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Queues(Queues&& from) noexcept
    : Queues() {
    *this = ::std::move(from);
  }

  inline Queues& operator=(Queues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Queues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Queues* internal_default_instance() {
    return reinterpret_cast<const Queues*>(
               &_Queues_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    114;

  void Swap(Queues* other);
  friend void swap(Queues& a, Queues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Queues* New() const PROTOBUF_FINAL { return New(NULL); }

  Queues* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Queues& from);
  void MergeFrom(const Queues& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Queues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 input = 1;
  void clear_input();
  static const int kInputFieldNumber = 1;
  ::google::protobuf::uint32 input() const;
  void set_input(::google::protobuf::uint32 value);

  // uint32 output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  ::google::protobuf::uint32 output() const;
  void set_output(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Queues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsQueuesImpl();
};
// -------------------------------------------------------------------

class Timers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Timers) */ {
 public:
  Timers();
  virtual ~Timers();

  Timers(const Timers& from);

  inline Timers& operator=(const Timers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timers(Timers&& from) noexcept
    : Timers() {
    *this = ::std::move(from);
  }

  inline Timers& operator=(Timers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Timers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timers* internal_default_instance() {
    return reinterpret_cast<const Timers*>(
               &_Timers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    115;

  void Swap(Timers* other);
  friend void swap(Timers& a, Timers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timers* New() const PROTOBUF_FINAL { return New(NULL); }

  Timers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Timers& from);
  void MergeFrom(const Timers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Timers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.TimersConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::TimersConfig& config() const;
  ::gobgpapi::TimersConfig* release_config();
  ::gobgpapi::TimersConfig* mutable_config();
  void set_allocated_config(::gobgpapi::TimersConfig* config);

  // .gobgpapi.TimersState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::TimersState& state() const;
  ::gobgpapi::TimersState* release_state();
  ::gobgpapi::TimersState* mutable_state();
  void set_allocated_state(::gobgpapi::TimersState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.Timers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::TimersConfig* config_;
  ::gobgpapi::TimersState* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsTimersImpl();
};
// -------------------------------------------------------------------

class TimersConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TimersConfig) */ {
 public:
  TimersConfig();
  virtual ~TimersConfig();

  TimersConfig(const TimersConfig& from);

  inline TimersConfig& operator=(const TimersConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimersConfig(TimersConfig&& from) noexcept
    : TimersConfig() {
    *this = ::std::move(from);
  }

  inline TimersConfig& operator=(TimersConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimersConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimersConfig* internal_default_instance() {
    return reinterpret_cast<const TimersConfig*>(
               &_TimersConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    116;

  void Swap(TimersConfig* other);
  friend void swap(TimersConfig& a, TimersConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimersConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  TimersConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimersConfig& from);
  void MergeFrom(const TimersConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimersConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 connect_retry = 1;
  void clear_connect_retry();
  static const int kConnectRetryFieldNumber = 1;
  ::google::protobuf::uint64 connect_retry() const;
  void set_connect_retry(::google::protobuf::uint64 value);

  // uint64 hold_time = 2;
  void clear_hold_time();
  static const int kHoldTimeFieldNumber = 2;
  ::google::protobuf::uint64 hold_time() const;
  void set_hold_time(::google::protobuf::uint64 value);

  // uint64 keepalive_interval = 3;
  void clear_keepalive_interval();
  static const int kKeepaliveIntervalFieldNumber = 3;
  ::google::protobuf::uint64 keepalive_interval() const;
  void set_keepalive_interval(::google::protobuf::uint64 value);

  // uint64 minimum_advertisement_interval = 4;
  void clear_minimum_advertisement_interval();
  static const int kMinimumAdvertisementIntervalFieldNumber = 4;
  ::google::protobuf::uint64 minimum_advertisement_interval() const;
  void set_minimum_advertisement_interval(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.TimersConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 connect_retry_;
  ::google::protobuf::uint64 hold_time_;
  ::google::protobuf::uint64 keepalive_interval_;
  ::google::protobuf::uint64 minimum_advertisement_interval_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsTimersConfigImpl();
};
// -------------------------------------------------------------------

class TimersState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TimersState) */ {
 public:
  TimersState();
  virtual ~TimersState();

  TimersState(const TimersState& from);

  inline TimersState& operator=(const TimersState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimersState(TimersState&& from) noexcept
    : TimersState() {
    *this = ::std::move(from);
  }

  inline TimersState& operator=(TimersState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimersState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimersState* internal_default_instance() {
    return reinterpret_cast<const TimersState*>(
               &_TimersState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    117;

  void Swap(TimersState* other);
  friend void swap(TimersState& a, TimersState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimersState* New() const PROTOBUF_FINAL { return New(NULL); }

  TimersState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimersState& from);
  void MergeFrom(const TimersState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimersState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 connect_retry = 1;
  void clear_connect_retry();
  static const int kConnectRetryFieldNumber = 1;
  ::google::protobuf::uint64 connect_retry() const;
  void set_connect_retry(::google::protobuf::uint64 value);

  // uint64 hold_time = 2;
  void clear_hold_time();
  static const int kHoldTimeFieldNumber = 2;
  ::google::protobuf::uint64 hold_time() const;
  void set_hold_time(::google::protobuf::uint64 value);

  // uint64 keepalive_interval = 3;
  void clear_keepalive_interval();
  static const int kKeepaliveIntervalFieldNumber = 3;
  ::google::protobuf::uint64 keepalive_interval() const;
  void set_keepalive_interval(::google::protobuf::uint64 value);

  // uint64 minimum_advertisement_interval = 4;
  void clear_minimum_advertisement_interval();
  static const int kMinimumAdvertisementIntervalFieldNumber = 4;
  ::google::protobuf::uint64 minimum_advertisement_interval() const;
  void set_minimum_advertisement_interval(::google::protobuf::uint64 value);

  // uint64 negotiated_hold_time = 5;
  void clear_negotiated_hold_time();
  static const int kNegotiatedHoldTimeFieldNumber = 5;
  ::google::protobuf::uint64 negotiated_hold_time() const;
  void set_negotiated_hold_time(::google::protobuf::uint64 value);

  // uint64 uptime = 6;
  void clear_uptime();
  static const int kUptimeFieldNumber = 6;
  ::google::protobuf::uint64 uptime() const;
  void set_uptime(::google::protobuf::uint64 value);

  // uint64 downtime = 7;
  void clear_downtime();
  static const int kDowntimeFieldNumber = 7;
  ::google::protobuf::uint64 downtime() const;
  void set_downtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.TimersState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 connect_retry_;
  ::google::protobuf::uint64 hold_time_;
  ::google::protobuf::uint64 keepalive_interval_;
  ::google::protobuf::uint64 minimum_advertisement_interval_;
  ::google::protobuf::uint64 negotiated_hold_time_;
  ::google::protobuf::uint64 uptime_;
  ::google::protobuf::uint64 downtime_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsTimersStateImpl();
};
// -------------------------------------------------------------------

class Transport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Transport) */ {
 public:
  Transport();
  virtual ~Transport();

  Transport(const Transport& from);

  inline Transport& operator=(const Transport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport(Transport&& from) noexcept
    : Transport() {
    *this = ::std::move(from);
  }

  inline Transport& operator=(Transport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transport* internal_default_instance() {
    return reinterpret_cast<const Transport*>(
               &_Transport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    118;

  void Swap(Transport* other);
  friend void swap(Transport& a, Transport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport& from);
  void MergeFrom(const Transport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string local_address = 1;
  void clear_local_address();
  static const int kLocalAddressFieldNumber = 1;
  const ::std::string& local_address() const;
  void set_local_address(const ::std::string& value);
  #if LANG_CXX11
  void set_local_address(::std::string&& value);
  #endif
  void set_local_address(const char* value);
  void set_local_address(const char* value, size_t size);
  ::std::string* mutable_local_address();
  ::std::string* release_local_address();
  void set_allocated_local_address(::std::string* local_address);

  // string remote_address = 5;
  void clear_remote_address();
  static const int kRemoteAddressFieldNumber = 5;
  const ::std::string& remote_address() const;
  void set_remote_address(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_address(::std::string&& value);
  #endif
  void set_remote_address(const char* value);
  void set_remote_address(const char* value, size_t size);
  ::std::string* mutable_remote_address();
  ::std::string* release_remote_address();
  void set_allocated_remote_address(::std::string* remote_address);

  // uint32 local_port = 2;
  void clear_local_port();
  static const int kLocalPortFieldNumber = 2;
  ::google::protobuf::uint32 local_port() const;
  void set_local_port(::google::protobuf::uint32 value);

  // bool mtu_discovery = 3;
  void clear_mtu_discovery();
  static const int kMtuDiscoveryFieldNumber = 3;
  bool mtu_discovery() const;
  void set_mtu_discovery(bool value);

  // bool passive_mode = 4;
  void clear_passive_mode();
  static const int kPassiveModeFieldNumber = 4;
  bool passive_mode() const;
  void set_passive_mode(bool value);

  // uint32 remote_port = 6;
  void clear_remote_port();
  static const int kRemotePortFieldNumber = 6;
  ::google::protobuf::uint32 remote_port() const;
  void set_remote_port(::google::protobuf::uint32 value);

  // uint32 tcp_mss = 7;
  void clear_tcp_mss();
  static const int kTcpMssFieldNumber = 7;
  ::google::protobuf::uint32 tcp_mss() const;
  void set_tcp_mss(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Transport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr local_address_;
  ::google::protobuf::internal::ArenaStringPtr remote_address_;
  ::google::protobuf::uint32 local_port_;
  bool mtu_discovery_;
  bool passive_mode_;
  ::google::protobuf::uint32 remote_port_;
  ::google::protobuf::uint32 tcp_mss_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsTransportImpl();
};
// -------------------------------------------------------------------

class RouteServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteServer) */ {
 public:
  RouteServer();
  virtual ~RouteServer();

  RouteServer(const RouteServer& from);

  inline RouteServer& operator=(const RouteServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteServer(RouteServer&& from) noexcept
    : RouteServer() {
    *this = ::std::move(from);
  }

  inline RouteServer& operator=(RouteServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteServer* internal_default_instance() {
    return reinterpret_cast<const RouteServer*>(
               &_RouteServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    119;

  void Swap(RouteServer* other);
  friend void swap(RouteServer& a, RouteServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteServer* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteServer& from);
  void MergeFrom(const RouteServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool route_server_client = 1;
  void clear_route_server_client();
  static const int kRouteServerClientFieldNumber = 1;
  bool route_server_client() const;
  void set_route_server_client(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool route_server_client_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRouteServerImpl();
};
// -------------------------------------------------------------------

class GracefulRestart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GracefulRestart) */ {
 public:
  GracefulRestart();
  virtual ~GracefulRestart();

  GracefulRestart(const GracefulRestart& from);

  inline GracefulRestart& operator=(const GracefulRestart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GracefulRestart(GracefulRestart&& from) noexcept
    : GracefulRestart() {
    *this = ::std::move(from);
  }

  inline GracefulRestart& operator=(GracefulRestart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GracefulRestart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GracefulRestart* internal_default_instance() {
    return reinterpret_cast<const GracefulRestart*>(
               &_GracefulRestart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    120;

  void Swap(GracefulRestart* other);
  friend void swap(GracefulRestart& a, GracefulRestart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GracefulRestart* New() const PROTOBUF_FINAL { return New(NULL); }

  GracefulRestart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GracefulRestart& from);
  void MergeFrom(const GracefulRestart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GracefulRestart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 restart_time = 2;
  void clear_restart_time();
  static const int kRestartTimeFieldNumber = 2;
  ::google::protobuf::uint32 restart_time() const;
  void set_restart_time(::google::protobuf::uint32 value);

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // bool helper_only = 3;
  void clear_helper_only();
  static const int kHelperOnlyFieldNumber = 3;
  bool helper_only() const;
  void set_helper_only(bool value);

  // bool notification_enabled = 5;
  void clear_notification_enabled();
  static const int kNotificationEnabledFieldNumber = 5;
  bool notification_enabled() const;
  void set_notification_enabled(bool value);

  // bool longlived_enabled = 6;
  void clear_longlived_enabled();
  static const int kLonglivedEnabledFieldNumber = 6;
  bool longlived_enabled() const;
  void set_longlived_enabled(bool value);

  // uint32 deferral_time = 4;
  void clear_deferral_time();
  static const int kDeferralTimeFieldNumber = 4;
  ::google::protobuf::uint32 deferral_time() const;
  void set_deferral_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.GracefulRestart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 restart_time_;
  bool enabled_;
  bool helper_only_;
  bool notification_enabled_;
  bool longlived_enabled_;
  ::google::protobuf::uint32 deferral_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGracefulRestartImpl();
};
// -------------------------------------------------------------------

class MpGracefulRestartConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MpGracefulRestartConfig) */ {
 public:
  MpGracefulRestartConfig();
  virtual ~MpGracefulRestartConfig();

  MpGracefulRestartConfig(const MpGracefulRestartConfig& from);

  inline MpGracefulRestartConfig& operator=(const MpGracefulRestartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpGracefulRestartConfig(MpGracefulRestartConfig&& from) noexcept
    : MpGracefulRestartConfig() {
    *this = ::std::move(from);
  }

  inline MpGracefulRestartConfig& operator=(MpGracefulRestartConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpGracefulRestartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpGracefulRestartConfig* internal_default_instance() {
    return reinterpret_cast<const MpGracefulRestartConfig*>(
               &_MpGracefulRestartConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    121;

  void Swap(MpGracefulRestartConfig* other);
  friend void swap(MpGracefulRestartConfig& a, MpGracefulRestartConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpGracefulRestartConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  MpGracefulRestartConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpGracefulRestartConfig& from);
  void MergeFrom(const MpGracefulRestartConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpGracefulRestartConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.MpGracefulRestartConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestartConfigImpl();
};
// -------------------------------------------------------------------

class MpGracefulRestartState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MpGracefulRestartState) */ {
 public:
  MpGracefulRestartState();
  virtual ~MpGracefulRestartState();

  MpGracefulRestartState(const MpGracefulRestartState& from);

  inline MpGracefulRestartState& operator=(const MpGracefulRestartState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpGracefulRestartState(MpGracefulRestartState&& from) noexcept
    : MpGracefulRestartState() {
    *this = ::std::move(from);
  }

  inline MpGracefulRestartState& operator=(MpGracefulRestartState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpGracefulRestartState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpGracefulRestartState* internal_default_instance() {
    return reinterpret_cast<const MpGracefulRestartState*>(
               &_MpGracefulRestartState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    122;

  void Swap(MpGracefulRestartState* other);
  friend void swap(MpGracefulRestartState& a, MpGracefulRestartState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpGracefulRestartState* New() const PROTOBUF_FINAL { return New(NULL); }

  MpGracefulRestartState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpGracefulRestartState& from);
  void MergeFrom(const MpGracefulRestartState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpGracefulRestartState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // bool received = 2;
  void clear_received();
  static const int kReceivedFieldNumber = 2;
  bool received() const;
  void set_received(bool value);

  // bool advertised = 3;
  void clear_advertised();
  static const int kAdvertisedFieldNumber = 3;
  bool advertised() const;
  void set_advertised(bool value);

  // bool end_of_rib_received = 4;
  void clear_end_of_rib_received();
  static const int kEndOfRibReceivedFieldNumber = 4;
  bool end_of_rib_received() const;
  void set_end_of_rib_received(bool value);

  // bool end_of_rib_sent = 5;
  void clear_end_of_rib_sent();
  static const int kEndOfRibSentFieldNumber = 5;
  bool end_of_rib_sent() const;
  void set_end_of_rib_sent(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.MpGracefulRestartState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  bool received_;
  bool advertised_;
  bool end_of_rib_received_;
  bool end_of_rib_sent_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestartStateImpl();
};
// -------------------------------------------------------------------

class MpGracefulRestart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MpGracefulRestart) */ {
 public:
  MpGracefulRestart();
  virtual ~MpGracefulRestart();

  MpGracefulRestart(const MpGracefulRestart& from);

  inline MpGracefulRestart& operator=(const MpGracefulRestart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpGracefulRestart(MpGracefulRestart&& from) noexcept
    : MpGracefulRestart() {
    *this = ::std::move(from);
  }

  inline MpGracefulRestart& operator=(MpGracefulRestart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpGracefulRestart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpGracefulRestart* internal_default_instance() {
    return reinterpret_cast<const MpGracefulRestart*>(
               &_MpGracefulRestart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    123;

  void Swap(MpGracefulRestart* other);
  friend void swap(MpGracefulRestart& a, MpGracefulRestart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpGracefulRestart* New() const PROTOBUF_FINAL { return New(NULL); }

  MpGracefulRestart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpGracefulRestart& from);
  void MergeFrom(const MpGracefulRestart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpGracefulRestart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.MpGracefulRestartConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::MpGracefulRestartConfig& config() const;
  ::gobgpapi::MpGracefulRestartConfig* release_config();
  ::gobgpapi::MpGracefulRestartConfig* mutable_config();
  void set_allocated_config(::gobgpapi::MpGracefulRestartConfig* config);

  // .gobgpapi.MpGracefulRestartState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::MpGracefulRestartState& state() const;
  ::gobgpapi::MpGracefulRestartState* release_state();
  ::gobgpapi::MpGracefulRestartState* mutable_state();
  void set_allocated_state(::gobgpapi::MpGracefulRestartState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.MpGracefulRestart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::MpGracefulRestartConfig* config_;
  ::gobgpapi::MpGracefulRestartState* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestartImpl();
};
// -------------------------------------------------------------------

class AfiSafiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AfiSafiConfig) */ {
 public:
  AfiSafiConfig();
  virtual ~AfiSafiConfig();

  AfiSafiConfig(const AfiSafiConfig& from);

  inline AfiSafiConfig& operator=(const AfiSafiConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AfiSafiConfig(AfiSafiConfig&& from) noexcept
    : AfiSafiConfig() {
    *this = ::std::move(from);
  }

  inline AfiSafiConfig& operator=(AfiSafiConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AfiSafiConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AfiSafiConfig* internal_default_instance() {
    return reinterpret_cast<const AfiSafiConfig*>(
               &_AfiSafiConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    124;

  void Swap(AfiSafiConfig* other);
  friend void swap(AfiSafiConfig& a, AfiSafiConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AfiSafiConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  AfiSafiConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AfiSafiConfig& from);
  void MergeFrom(const AfiSafiConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AfiSafiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 family = 1;
  void clear_family();
  static const int kFamilyFieldNumber = 1;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // bool enabled = 2;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AfiSafiConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 family_;
  bool enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAfiSafiConfigImpl();
};
// -------------------------------------------------------------------

class AfiSafiState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AfiSafiState) */ {
 public:
  AfiSafiState();
  virtual ~AfiSafiState();

  AfiSafiState(const AfiSafiState& from);

  inline AfiSafiState& operator=(const AfiSafiState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AfiSafiState(AfiSafiState&& from) noexcept
    : AfiSafiState() {
    *this = ::std::move(from);
  }

  inline AfiSafiState& operator=(AfiSafiState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AfiSafiState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AfiSafiState* internal_default_instance() {
    return reinterpret_cast<const AfiSafiState*>(
               &_AfiSafiState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    125;

  void Swap(AfiSafiState* other);
  friend void swap(AfiSafiState& a, AfiSafiState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AfiSafiState* New() const PROTOBUF_FINAL { return New(NULL); }

  AfiSafiState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AfiSafiState& from);
  void MergeFrom(const AfiSafiState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AfiSafiState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 family = 1;
  void clear_family();
  static const int kFamilyFieldNumber = 1;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // bool enabled = 2;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 total_paths = 3;
  void clear_total_paths();
  static const int kTotalPathsFieldNumber = 3;
  ::google::protobuf::uint32 total_paths() const;
  void set_total_paths(::google::protobuf::uint32 value);

  // uint32 total_prefixes = 4;
  void clear_total_prefixes();
  static const int kTotalPrefixesFieldNumber = 4;
  ::google::protobuf::uint32 total_prefixes() const;
  void set_total_prefixes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AfiSafiState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 family_;
  bool enabled_;
  ::google::protobuf::uint32 total_paths_;
  ::google::protobuf::uint32 total_prefixes_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAfiSafiStateImpl();
};
// -------------------------------------------------------------------

class RouteSelectionOptionsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteSelectionOptionsConfig) */ {
 public:
  RouteSelectionOptionsConfig();
  virtual ~RouteSelectionOptionsConfig();

  RouteSelectionOptionsConfig(const RouteSelectionOptionsConfig& from);

  inline RouteSelectionOptionsConfig& operator=(const RouteSelectionOptionsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteSelectionOptionsConfig(RouteSelectionOptionsConfig&& from) noexcept
    : RouteSelectionOptionsConfig() {
    *this = ::std::move(from);
  }

  inline RouteSelectionOptionsConfig& operator=(RouteSelectionOptionsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteSelectionOptionsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteSelectionOptionsConfig* internal_default_instance() {
    return reinterpret_cast<const RouteSelectionOptionsConfig*>(
               &_RouteSelectionOptionsConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    126;

  void Swap(RouteSelectionOptionsConfig* other);
  friend void swap(RouteSelectionOptionsConfig& a, RouteSelectionOptionsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteSelectionOptionsConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteSelectionOptionsConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteSelectionOptionsConfig& from);
  void MergeFrom(const RouteSelectionOptionsConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteSelectionOptionsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool always_compare_med = 1;
  void clear_always_compare_med();
  static const int kAlwaysCompareMedFieldNumber = 1;
  bool always_compare_med() const;
  void set_always_compare_med(bool value);

  // bool ignore_as_path_length = 2;
  void clear_ignore_as_path_length();
  static const int kIgnoreAsPathLengthFieldNumber = 2;
  bool ignore_as_path_length() const;
  void set_ignore_as_path_length(bool value);

  // bool external_compare_router_id = 3;
  void clear_external_compare_router_id();
  static const int kExternalCompareRouterIdFieldNumber = 3;
  bool external_compare_router_id() const;
  void set_external_compare_router_id(bool value);

  // bool advertise_inactive_routes = 4;
  void clear_advertise_inactive_routes();
  static const int kAdvertiseInactiveRoutesFieldNumber = 4;
  bool advertise_inactive_routes() const;
  void set_advertise_inactive_routes(bool value);

  // bool enable_aigp = 5;
  void clear_enable_aigp();
  static const int kEnableAigpFieldNumber = 5;
  bool enable_aigp() const;
  void set_enable_aigp(bool value);

  // bool ignore_next_hop_igp_metric = 6;
  void clear_ignore_next_hop_igp_metric();
  static const int kIgnoreNextHopIgpMetricFieldNumber = 6;
  bool ignore_next_hop_igp_metric() const;
  void set_ignore_next_hop_igp_metric(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteSelectionOptionsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool always_compare_med_;
  bool ignore_as_path_length_;
  bool external_compare_router_id_;
  bool advertise_inactive_routes_;
  bool enable_aigp_;
  bool ignore_next_hop_igp_metric_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptionsConfigImpl();
};
// -------------------------------------------------------------------

class RouteSelectionOptionsState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteSelectionOptionsState) */ {
 public:
  RouteSelectionOptionsState();
  virtual ~RouteSelectionOptionsState();

  RouteSelectionOptionsState(const RouteSelectionOptionsState& from);

  inline RouteSelectionOptionsState& operator=(const RouteSelectionOptionsState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteSelectionOptionsState(RouteSelectionOptionsState&& from) noexcept
    : RouteSelectionOptionsState() {
    *this = ::std::move(from);
  }

  inline RouteSelectionOptionsState& operator=(RouteSelectionOptionsState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteSelectionOptionsState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteSelectionOptionsState* internal_default_instance() {
    return reinterpret_cast<const RouteSelectionOptionsState*>(
               &_RouteSelectionOptionsState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    127;

  void Swap(RouteSelectionOptionsState* other);
  friend void swap(RouteSelectionOptionsState& a, RouteSelectionOptionsState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteSelectionOptionsState* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteSelectionOptionsState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteSelectionOptionsState& from);
  void MergeFrom(const RouteSelectionOptionsState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteSelectionOptionsState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool always_compare_med = 1;
  void clear_always_compare_med();
  static const int kAlwaysCompareMedFieldNumber = 1;
  bool always_compare_med() const;
  void set_always_compare_med(bool value);

  // bool ignore_as_path_length = 2;
  void clear_ignore_as_path_length();
  static const int kIgnoreAsPathLengthFieldNumber = 2;
  bool ignore_as_path_length() const;
  void set_ignore_as_path_length(bool value);

  // bool external_compare_router_id = 3;
  void clear_external_compare_router_id();
  static const int kExternalCompareRouterIdFieldNumber = 3;
  bool external_compare_router_id() const;
  void set_external_compare_router_id(bool value);

  // bool advertise_inactive_routes = 4;
  void clear_advertise_inactive_routes();
  static const int kAdvertiseInactiveRoutesFieldNumber = 4;
  bool advertise_inactive_routes() const;
  void set_advertise_inactive_routes(bool value);

  // bool enable_aigp = 5;
  void clear_enable_aigp();
  static const int kEnableAigpFieldNumber = 5;
  bool enable_aigp() const;
  void set_enable_aigp(bool value);

  // bool ignore_next_hop_igp_metric = 6;
  void clear_ignore_next_hop_igp_metric();
  static const int kIgnoreNextHopIgpMetricFieldNumber = 6;
  bool ignore_next_hop_igp_metric() const;
  void set_ignore_next_hop_igp_metric(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteSelectionOptionsState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool always_compare_med_;
  bool ignore_as_path_length_;
  bool external_compare_router_id_;
  bool advertise_inactive_routes_;
  bool enable_aigp_;
  bool ignore_next_hop_igp_metric_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptionsStateImpl();
};
// -------------------------------------------------------------------

class RouteSelectionOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteSelectionOptions) */ {
 public:
  RouteSelectionOptions();
  virtual ~RouteSelectionOptions();

  RouteSelectionOptions(const RouteSelectionOptions& from);

  inline RouteSelectionOptions& operator=(const RouteSelectionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteSelectionOptions(RouteSelectionOptions&& from) noexcept
    : RouteSelectionOptions() {
    *this = ::std::move(from);
  }

  inline RouteSelectionOptions& operator=(RouteSelectionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteSelectionOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteSelectionOptions* internal_default_instance() {
    return reinterpret_cast<const RouteSelectionOptions*>(
               &_RouteSelectionOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    128;

  void Swap(RouteSelectionOptions* other);
  friend void swap(RouteSelectionOptions& a, RouteSelectionOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteSelectionOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteSelectionOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteSelectionOptions& from);
  void MergeFrom(const RouteSelectionOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteSelectionOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.RouteSelectionOptionsConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::RouteSelectionOptionsConfig& config() const;
  ::gobgpapi::RouteSelectionOptionsConfig* release_config();
  ::gobgpapi::RouteSelectionOptionsConfig* mutable_config();
  void set_allocated_config(::gobgpapi::RouteSelectionOptionsConfig* config);

  // .gobgpapi.RouteSelectionOptionsState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::RouteSelectionOptionsState& state() const;
  ::gobgpapi::RouteSelectionOptionsState* release_state();
  ::gobgpapi::RouteSelectionOptionsState* mutable_state();
  void set_allocated_state(::gobgpapi::RouteSelectionOptionsState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteSelectionOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::RouteSelectionOptionsConfig* config_;
  ::gobgpapi::RouteSelectionOptionsState* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptionsImpl();
};
// -------------------------------------------------------------------

class UseMultiplePathsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UseMultiplePathsConfig) */ {
 public:
  UseMultiplePathsConfig();
  virtual ~UseMultiplePathsConfig();

  UseMultiplePathsConfig(const UseMultiplePathsConfig& from);

  inline UseMultiplePathsConfig& operator=(const UseMultiplePathsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UseMultiplePathsConfig(UseMultiplePathsConfig&& from) noexcept
    : UseMultiplePathsConfig() {
    *this = ::std::move(from);
  }

  inline UseMultiplePathsConfig& operator=(UseMultiplePathsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UseMultiplePathsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseMultiplePathsConfig* internal_default_instance() {
    return reinterpret_cast<const UseMultiplePathsConfig*>(
               &_UseMultiplePathsConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    129;

  void Swap(UseMultiplePathsConfig* other);
  friend void swap(UseMultiplePathsConfig& a, UseMultiplePathsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UseMultiplePathsConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  UseMultiplePathsConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UseMultiplePathsConfig& from);
  void MergeFrom(const UseMultiplePathsConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UseMultiplePathsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.UseMultiplePathsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsUseMultiplePathsConfigImpl();
};
// -------------------------------------------------------------------

class UseMultiplePathsState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UseMultiplePathsState) */ {
 public:
  UseMultiplePathsState();
  virtual ~UseMultiplePathsState();

  UseMultiplePathsState(const UseMultiplePathsState& from);

  inline UseMultiplePathsState& operator=(const UseMultiplePathsState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UseMultiplePathsState(UseMultiplePathsState&& from) noexcept
    : UseMultiplePathsState() {
    *this = ::std::move(from);
  }

  inline UseMultiplePathsState& operator=(UseMultiplePathsState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UseMultiplePathsState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseMultiplePathsState* internal_default_instance() {
    return reinterpret_cast<const UseMultiplePathsState*>(
               &_UseMultiplePathsState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    130;

  void Swap(UseMultiplePathsState* other);
  friend void swap(UseMultiplePathsState& a, UseMultiplePathsState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UseMultiplePathsState* New() const PROTOBUF_FINAL { return New(NULL); }

  UseMultiplePathsState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UseMultiplePathsState& from);
  void MergeFrom(const UseMultiplePathsState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UseMultiplePathsState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.UseMultiplePathsState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsUseMultiplePathsStateImpl();
};
// -------------------------------------------------------------------

class EbgpConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EbgpConfig) */ {
 public:
  EbgpConfig();
  virtual ~EbgpConfig();

  EbgpConfig(const EbgpConfig& from);

  inline EbgpConfig& operator=(const EbgpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EbgpConfig(EbgpConfig&& from) noexcept
    : EbgpConfig() {
    *this = ::std::move(from);
  }

  inline EbgpConfig& operator=(EbgpConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EbgpConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EbgpConfig* internal_default_instance() {
    return reinterpret_cast<const EbgpConfig*>(
               &_EbgpConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    131;

  void Swap(EbgpConfig* other);
  friend void swap(EbgpConfig& a, EbgpConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EbgpConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  EbgpConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EbgpConfig& from);
  void MergeFrom(const EbgpConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EbgpConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool allow_multiple_as = 1;
  void clear_allow_multiple_as();
  static const int kAllowMultipleAsFieldNumber = 1;
  bool allow_multiple_as() const;
  void set_allow_multiple_as(bool value);

  // uint32 maximum_paths = 2;
  void clear_maximum_paths();
  static const int kMaximumPathsFieldNumber = 2;
  ::google::protobuf::uint32 maximum_paths() const;
  void set_maximum_paths(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.EbgpConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool allow_multiple_as_;
  ::google::protobuf::uint32 maximum_paths_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEbgpConfigImpl();
};
// -------------------------------------------------------------------

class EbgpState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EbgpState) */ {
 public:
  EbgpState();
  virtual ~EbgpState();

  EbgpState(const EbgpState& from);

  inline EbgpState& operator=(const EbgpState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EbgpState(EbgpState&& from) noexcept
    : EbgpState() {
    *this = ::std::move(from);
  }

  inline EbgpState& operator=(EbgpState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EbgpState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EbgpState* internal_default_instance() {
    return reinterpret_cast<const EbgpState*>(
               &_EbgpState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    132;

  void Swap(EbgpState* other);
  friend void swap(EbgpState& a, EbgpState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EbgpState* New() const PROTOBUF_FINAL { return New(NULL); }

  EbgpState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EbgpState& from);
  void MergeFrom(const EbgpState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EbgpState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool allow_multiple_as = 1;
  void clear_allow_multiple_as();
  static const int kAllowMultipleAsFieldNumber = 1;
  bool allow_multiple_as() const;
  void set_allow_multiple_as(bool value);

  // uint32 maximum_paths = 2;
  void clear_maximum_paths();
  static const int kMaximumPathsFieldNumber = 2;
  ::google::protobuf::uint32 maximum_paths() const;
  void set_maximum_paths(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.EbgpState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool allow_multiple_as_;
  ::google::protobuf::uint32 maximum_paths_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEbgpStateImpl();
};
// -------------------------------------------------------------------

class Ebgp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Ebgp) */ {
 public:
  Ebgp();
  virtual ~Ebgp();

  Ebgp(const Ebgp& from);

  inline Ebgp& operator=(const Ebgp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ebgp(Ebgp&& from) noexcept
    : Ebgp() {
    *this = ::std::move(from);
  }

  inline Ebgp& operator=(Ebgp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ebgp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ebgp* internal_default_instance() {
    return reinterpret_cast<const Ebgp*>(
               &_Ebgp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    133;

  void Swap(Ebgp* other);
  friend void swap(Ebgp& a, Ebgp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ebgp* New() const PROTOBUF_FINAL { return New(NULL); }

  Ebgp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ebgp& from);
  void MergeFrom(const Ebgp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ebgp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.EbgpConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::EbgpConfig& config() const;
  ::gobgpapi::EbgpConfig* release_config();
  ::gobgpapi::EbgpConfig* mutable_config();
  void set_allocated_config(::gobgpapi::EbgpConfig* config);

  // .gobgpapi.EbgpState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::EbgpState& state() const;
  ::gobgpapi::EbgpState* release_state();
  ::gobgpapi::EbgpState* mutable_state();
  void set_allocated_state(::gobgpapi::EbgpState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.Ebgp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::EbgpConfig* config_;
  ::gobgpapi::EbgpState* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsEbgpImpl();
};
// -------------------------------------------------------------------

class IbgpConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.IbgpConfig) */ {
 public:
  IbgpConfig();
  virtual ~IbgpConfig();

  IbgpConfig(const IbgpConfig& from);

  inline IbgpConfig& operator=(const IbgpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IbgpConfig(IbgpConfig&& from) noexcept
    : IbgpConfig() {
    *this = ::std::move(from);
  }

  inline IbgpConfig& operator=(IbgpConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IbgpConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IbgpConfig* internal_default_instance() {
    return reinterpret_cast<const IbgpConfig*>(
               &_IbgpConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    134;

  void Swap(IbgpConfig* other);
  friend void swap(IbgpConfig& a, IbgpConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IbgpConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  IbgpConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IbgpConfig& from);
  void MergeFrom(const IbgpConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IbgpConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 maximum_paths = 1;
  void clear_maximum_paths();
  static const int kMaximumPathsFieldNumber = 1;
  ::google::protobuf::uint32 maximum_paths() const;
  void set_maximum_paths(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.IbgpConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 maximum_paths_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsIbgpConfigImpl();
};
// -------------------------------------------------------------------

class IbgpState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.IbgpState) */ {
 public:
  IbgpState();
  virtual ~IbgpState();

  IbgpState(const IbgpState& from);

  inline IbgpState& operator=(const IbgpState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IbgpState(IbgpState&& from) noexcept
    : IbgpState() {
    *this = ::std::move(from);
  }

  inline IbgpState& operator=(IbgpState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IbgpState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IbgpState* internal_default_instance() {
    return reinterpret_cast<const IbgpState*>(
               &_IbgpState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    135;

  void Swap(IbgpState* other);
  friend void swap(IbgpState& a, IbgpState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IbgpState* New() const PROTOBUF_FINAL { return New(NULL); }

  IbgpState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IbgpState& from);
  void MergeFrom(const IbgpState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IbgpState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 maximum_paths = 1;
  void clear_maximum_paths();
  static const int kMaximumPathsFieldNumber = 1;
  ::google::protobuf::uint32 maximum_paths() const;
  void set_maximum_paths(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.IbgpState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 maximum_paths_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsIbgpStateImpl();
};
// -------------------------------------------------------------------

class Ibgp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Ibgp) */ {
 public:
  Ibgp();
  virtual ~Ibgp();

  Ibgp(const Ibgp& from);

  inline Ibgp& operator=(const Ibgp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ibgp(Ibgp&& from) noexcept
    : Ibgp() {
    *this = ::std::move(from);
  }

  inline Ibgp& operator=(Ibgp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ibgp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ibgp* internal_default_instance() {
    return reinterpret_cast<const Ibgp*>(
               &_Ibgp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    136;

  void Swap(Ibgp* other);
  friend void swap(Ibgp& a, Ibgp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ibgp* New() const PROTOBUF_FINAL { return New(NULL); }

  Ibgp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ibgp& from);
  void MergeFrom(const Ibgp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ibgp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.IbgpConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::IbgpConfig& config() const;
  ::gobgpapi::IbgpConfig* release_config();
  ::gobgpapi::IbgpConfig* mutable_config();
  void set_allocated_config(::gobgpapi::IbgpConfig* config);

  // .gobgpapi.IbgpState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::IbgpState& state() const;
  ::gobgpapi::IbgpState* release_state();
  ::gobgpapi::IbgpState* mutable_state();
  void set_allocated_state(::gobgpapi::IbgpState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.Ibgp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::IbgpConfig* config_;
  ::gobgpapi::IbgpState* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsIbgpImpl();
};
// -------------------------------------------------------------------

class UseMultiplePaths : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UseMultiplePaths) */ {
 public:
  UseMultiplePaths();
  virtual ~UseMultiplePaths();

  UseMultiplePaths(const UseMultiplePaths& from);

  inline UseMultiplePaths& operator=(const UseMultiplePaths& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UseMultiplePaths(UseMultiplePaths&& from) noexcept
    : UseMultiplePaths() {
    *this = ::std::move(from);
  }

  inline UseMultiplePaths& operator=(UseMultiplePaths&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UseMultiplePaths& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseMultiplePaths* internal_default_instance() {
    return reinterpret_cast<const UseMultiplePaths*>(
               &_UseMultiplePaths_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    137;

  void Swap(UseMultiplePaths* other);
  friend void swap(UseMultiplePaths& a, UseMultiplePaths& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UseMultiplePaths* New() const PROTOBUF_FINAL { return New(NULL); }

  UseMultiplePaths* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UseMultiplePaths& from);
  void MergeFrom(const UseMultiplePaths& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UseMultiplePaths* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.UseMultiplePathsConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::UseMultiplePathsConfig& config() const;
  ::gobgpapi::UseMultiplePathsConfig* release_config();
  ::gobgpapi::UseMultiplePathsConfig* mutable_config();
  void set_allocated_config(::gobgpapi::UseMultiplePathsConfig* config);

  // .gobgpapi.UseMultiplePathsState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::UseMultiplePathsState& state() const;
  ::gobgpapi::UseMultiplePathsState* release_state();
  ::gobgpapi::UseMultiplePathsState* mutable_state();
  void set_allocated_state(::gobgpapi::UseMultiplePathsState* state);

  // .gobgpapi.Ebgp ebgp = 3;
  bool has_ebgp() const;
  void clear_ebgp();
  static const int kEbgpFieldNumber = 3;
  const ::gobgpapi::Ebgp& ebgp() const;
  ::gobgpapi::Ebgp* release_ebgp();
  ::gobgpapi::Ebgp* mutable_ebgp();
  void set_allocated_ebgp(::gobgpapi::Ebgp* ebgp);

  // .gobgpapi.Ibgp ibgp = 4;
  bool has_ibgp() const;
  void clear_ibgp();
  static const int kIbgpFieldNumber = 4;
  const ::gobgpapi::Ibgp& ibgp() const;
  ::gobgpapi::Ibgp* release_ibgp();
  ::gobgpapi::Ibgp* mutable_ibgp();
  void set_allocated_ibgp(::gobgpapi::Ibgp* ibgp);

  // @@protoc_insertion_point(class_scope:gobgpapi.UseMultiplePaths)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::UseMultiplePathsConfig* config_;
  ::gobgpapi::UseMultiplePathsState* state_;
  ::gobgpapi::Ebgp* ebgp_;
  ::gobgpapi::Ibgp* ibgp_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsUseMultiplePathsImpl();
};
// -------------------------------------------------------------------

class RouteTargetMembershipConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteTargetMembershipConfig) */ {
 public:
  RouteTargetMembershipConfig();
  virtual ~RouteTargetMembershipConfig();

  RouteTargetMembershipConfig(const RouteTargetMembershipConfig& from);

  inline RouteTargetMembershipConfig& operator=(const RouteTargetMembershipConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteTargetMembershipConfig(RouteTargetMembershipConfig&& from) noexcept
    : RouteTargetMembershipConfig() {
    *this = ::std::move(from);
  }

  inline RouteTargetMembershipConfig& operator=(RouteTargetMembershipConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteTargetMembershipConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteTargetMembershipConfig* internal_default_instance() {
    return reinterpret_cast<const RouteTargetMembershipConfig*>(
               &_RouteTargetMembershipConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    138;

  void Swap(RouteTargetMembershipConfig* other);
  friend void swap(RouteTargetMembershipConfig& a, RouteTargetMembershipConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteTargetMembershipConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteTargetMembershipConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteTargetMembershipConfig& from);
  void MergeFrom(const RouteTargetMembershipConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteTargetMembershipConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deferral_time = 1;
  void clear_deferral_time();
  static const int kDeferralTimeFieldNumber = 1;
  ::google::protobuf::uint32 deferral_time() const;
  void set_deferral_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteTargetMembershipConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deferral_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembershipConfigImpl();
};
// -------------------------------------------------------------------

class RouteTargetMembershipState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteTargetMembershipState) */ {
 public:
  RouteTargetMembershipState();
  virtual ~RouteTargetMembershipState();

  RouteTargetMembershipState(const RouteTargetMembershipState& from);

  inline RouteTargetMembershipState& operator=(const RouteTargetMembershipState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteTargetMembershipState(RouteTargetMembershipState&& from) noexcept
    : RouteTargetMembershipState() {
    *this = ::std::move(from);
  }

  inline RouteTargetMembershipState& operator=(RouteTargetMembershipState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteTargetMembershipState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteTargetMembershipState* internal_default_instance() {
    return reinterpret_cast<const RouteTargetMembershipState*>(
               &_RouteTargetMembershipState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    139;

  void Swap(RouteTargetMembershipState* other);
  friend void swap(RouteTargetMembershipState& a, RouteTargetMembershipState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteTargetMembershipState* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteTargetMembershipState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteTargetMembershipState& from);
  void MergeFrom(const RouteTargetMembershipState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteTargetMembershipState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deferral_time = 1;
  void clear_deferral_time();
  static const int kDeferralTimeFieldNumber = 1;
  ::google::protobuf::uint32 deferral_time() const;
  void set_deferral_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteTargetMembershipState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deferral_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembershipStateImpl();
};
// -------------------------------------------------------------------

class RouteTargetMembership : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteTargetMembership) */ {
 public:
  RouteTargetMembership();
  virtual ~RouteTargetMembership();

  RouteTargetMembership(const RouteTargetMembership& from);

  inline RouteTargetMembership& operator=(const RouteTargetMembership& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteTargetMembership(RouteTargetMembership&& from) noexcept
    : RouteTargetMembership() {
    *this = ::std::move(from);
  }

  inline RouteTargetMembership& operator=(RouteTargetMembership&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteTargetMembership& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteTargetMembership* internal_default_instance() {
    return reinterpret_cast<const RouteTargetMembership*>(
               &_RouteTargetMembership_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    140;

  void Swap(RouteTargetMembership* other);
  friend void swap(RouteTargetMembership& a, RouteTargetMembership& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteTargetMembership* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteTargetMembership* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteTargetMembership& from);
  void MergeFrom(const RouteTargetMembership& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteTargetMembership* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.RouteTargetMembershipConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::RouteTargetMembershipConfig& config() const;
  ::gobgpapi::RouteTargetMembershipConfig* release_config();
  ::gobgpapi::RouteTargetMembershipConfig* mutable_config();
  void set_allocated_config(::gobgpapi::RouteTargetMembershipConfig* config);

  // .gobgpapi.RouteTargetMembershipState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::RouteTargetMembershipState& state() const;
  ::gobgpapi::RouteTargetMembershipState* release_state();
  ::gobgpapi::RouteTargetMembershipState* mutable_state();
  void set_allocated_state(::gobgpapi::RouteTargetMembershipState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteTargetMembership)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::RouteTargetMembershipConfig* config_;
  ::gobgpapi::RouteTargetMembershipState* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembershipImpl();
};
// -------------------------------------------------------------------

class LongLivedGracefulRestartConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LongLivedGracefulRestartConfig) */ {
 public:
  LongLivedGracefulRestartConfig();
  virtual ~LongLivedGracefulRestartConfig();

  LongLivedGracefulRestartConfig(const LongLivedGracefulRestartConfig& from);

  inline LongLivedGracefulRestartConfig& operator=(const LongLivedGracefulRestartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LongLivedGracefulRestartConfig(LongLivedGracefulRestartConfig&& from) noexcept
    : LongLivedGracefulRestartConfig() {
    *this = ::std::move(from);
  }

  inline LongLivedGracefulRestartConfig& operator=(LongLivedGracefulRestartConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LongLivedGracefulRestartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongLivedGracefulRestartConfig* internal_default_instance() {
    return reinterpret_cast<const LongLivedGracefulRestartConfig*>(
               &_LongLivedGracefulRestartConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    141;

  void Swap(LongLivedGracefulRestartConfig* other);
  friend void swap(LongLivedGracefulRestartConfig& a, LongLivedGracefulRestartConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LongLivedGracefulRestartConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  LongLivedGracefulRestartConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LongLivedGracefulRestartConfig& from);
  void MergeFrom(const LongLivedGracefulRestartConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LongLivedGracefulRestartConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 restart_time = 2;
  void clear_restart_time();
  static const int kRestartTimeFieldNumber = 2;
  ::google::protobuf::uint32 restart_time() const;
  void set_restart_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.LongLivedGracefulRestartConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  ::google::protobuf::uint32 restart_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestartConfigImpl();
};
// -------------------------------------------------------------------

class LongLivedGracefulRestartState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LongLivedGracefulRestartState) */ {
 public:
  LongLivedGracefulRestartState();
  virtual ~LongLivedGracefulRestartState();

  LongLivedGracefulRestartState(const LongLivedGracefulRestartState& from);

  inline LongLivedGracefulRestartState& operator=(const LongLivedGracefulRestartState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LongLivedGracefulRestartState(LongLivedGracefulRestartState&& from) noexcept
    : LongLivedGracefulRestartState() {
    *this = ::std::move(from);
  }

  inline LongLivedGracefulRestartState& operator=(LongLivedGracefulRestartState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LongLivedGracefulRestartState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongLivedGracefulRestartState* internal_default_instance() {
    return reinterpret_cast<const LongLivedGracefulRestartState*>(
               &_LongLivedGracefulRestartState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    142;

  void Swap(LongLivedGracefulRestartState* other);
  friend void swap(LongLivedGracefulRestartState& a, LongLivedGracefulRestartState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LongLivedGracefulRestartState* New() const PROTOBUF_FINAL { return New(NULL); }

  LongLivedGracefulRestartState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LongLivedGracefulRestartState& from);
  void MergeFrom(const LongLivedGracefulRestartState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LongLivedGracefulRestartState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // bool received = 2;
  void clear_received();
  static const int kReceivedFieldNumber = 2;
  bool received() const;
  void set_received(bool value);

  // bool advertised = 3;
  void clear_advertised();
  static const int kAdvertisedFieldNumber = 3;
  bool advertised() const;
  void set_advertised(bool value);

  // bool peer_restart_timer_expired = 5;
  void clear_peer_restart_timer_expired();
  static const int kPeerRestartTimerExpiredFieldNumber = 5;
  bool peer_restart_timer_expired() const;
  void set_peer_restart_timer_expired(bool value);

  // uint32 peer_restart_time = 4;
  void clear_peer_restart_time();
  static const int kPeerRestartTimeFieldNumber = 4;
  ::google::protobuf::uint32 peer_restart_time() const;
  void set_peer_restart_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.LongLivedGracefulRestartState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  bool received_;
  bool advertised_;
  bool peer_restart_timer_expired_;
  ::google::protobuf::uint32 peer_restart_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestartStateImpl();
};
// -------------------------------------------------------------------

class LongLivedGracefulRestart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LongLivedGracefulRestart) */ {
 public:
  LongLivedGracefulRestart();
  virtual ~LongLivedGracefulRestart();

  LongLivedGracefulRestart(const LongLivedGracefulRestart& from);

  inline LongLivedGracefulRestart& operator=(const LongLivedGracefulRestart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LongLivedGracefulRestart(LongLivedGracefulRestart&& from) noexcept
    : LongLivedGracefulRestart() {
    *this = ::std::move(from);
  }

  inline LongLivedGracefulRestart& operator=(LongLivedGracefulRestart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LongLivedGracefulRestart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongLivedGracefulRestart* internal_default_instance() {
    return reinterpret_cast<const LongLivedGracefulRestart*>(
               &_LongLivedGracefulRestart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    143;

  void Swap(LongLivedGracefulRestart* other);
  friend void swap(LongLivedGracefulRestart& a, LongLivedGracefulRestart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LongLivedGracefulRestart* New() const PROTOBUF_FINAL { return New(NULL); }

  LongLivedGracefulRestart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LongLivedGracefulRestart& from);
  void MergeFrom(const LongLivedGracefulRestart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LongLivedGracefulRestart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.LongLivedGracefulRestartConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::LongLivedGracefulRestartConfig& config() const;
  ::gobgpapi::LongLivedGracefulRestartConfig* release_config();
  ::gobgpapi::LongLivedGracefulRestartConfig* mutable_config();
  void set_allocated_config(::gobgpapi::LongLivedGracefulRestartConfig* config);

  // .gobgpapi.LongLivedGracefulRestartState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::LongLivedGracefulRestartState& state() const;
  ::gobgpapi::LongLivedGracefulRestartState* release_state();
  ::gobgpapi::LongLivedGracefulRestartState* mutable_state();
  void set_allocated_state(::gobgpapi::LongLivedGracefulRestartState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.LongLivedGracefulRestart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::LongLivedGracefulRestartConfig* config_;
  ::gobgpapi::LongLivedGracefulRestartState* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestartImpl();
};
// -------------------------------------------------------------------

class AfiSafi : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AfiSafi) */ {
 public:
  AfiSafi();
  virtual ~AfiSafi();

  AfiSafi(const AfiSafi& from);

  inline AfiSafi& operator=(const AfiSafi& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AfiSafi(AfiSafi&& from) noexcept
    : AfiSafi() {
    *this = ::std::move(from);
  }

  inline AfiSafi& operator=(AfiSafi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AfiSafi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AfiSafi* internal_default_instance() {
    return reinterpret_cast<const AfiSafi*>(
               &_AfiSafi_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    144;

  void Swap(AfiSafi* other);
  friend void swap(AfiSafi& a, AfiSafi& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AfiSafi* New() const PROTOBUF_FINAL { return New(NULL); }

  AfiSafi* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AfiSafi& from);
  void MergeFrom(const AfiSafi& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AfiSafi* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
  bool has_mp_graceful_restart() const;
  void clear_mp_graceful_restart();
  static const int kMpGracefulRestartFieldNumber = 1;
  const ::gobgpapi::MpGracefulRestart& mp_graceful_restart() const;
  ::gobgpapi::MpGracefulRestart* release_mp_graceful_restart();
  ::gobgpapi::MpGracefulRestart* mutable_mp_graceful_restart();
  void set_allocated_mp_graceful_restart(::gobgpapi::MpGracefulRestart* mp_graceful_restart);

  // .gobgpapi.AfiSafiConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::gobgpapi::AfiSafiConfig& config() const;
  ::gobgpapi::AfiSafiConfig* release_config();
  ::gobgpapi::AfiSafiConfig* mutable_config();
  void set_allocated_config(::gobgpapi::AfiSafiConfig* config);

  // .gobgpapi.ApplyPolicy apply_policy = 3;
  bool has_apply_policy() const;
  void clear_apply_policy();
  static const int kApplyPolicyFieldNumber = 3;
  const ::gobgpapi::ApplyPolicy& apply_policy() const;
  ::gobgpapi::ApplyPolicy* release_apply_policy();
  ::gobgpapi::ApplyPolicy* mutable_apply_policy();
  void set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy);

  // .gobgpapi.RouteSelectionOptions route_selection_options = 4;
  bool has_route_selection_options() const;
  void clear_route_selection_options();
  static const int kRouteSelectionOptionsFieldNumber = 4;
  const ::gobgpapi::RouteSelectionOptions& route_selection_options() const;
  ::gobgpapi::RouteSelectionOptions* release_route_selection_options();
  ::gobgpapi::RouteSelectionOptions* mutable_route_selection_options();
  void set_allocated_route_selection_options(::gobgpapi::RouteSelectionOptions* route_selection_options);

  // .gobgpapi.UseMultiplePaths use_multiple_paths = 5;
  bool has_use_multiple_paths() const;
  void clear_use_multiple_paths();
  static const int kUseMultiplePathsFieldNumber = 5;
  const ::gobgpapi::UseMultiplePaths& use_multiple_paths() const;
  ::gobgpapi::UseMultiplePaths* release_use_multiple_paths();
  ::gobgpapi::UseMultiplePaths* mutable_use_multiple_paths();
  void set_allocated_use_multiple_paths(::gobgpapi::UseMultiplePaths* use_multiple_paths);

  // .gobgpapi.PrefixLimit prefix_limits = 6;
  bool has_prefix_limits() const;
  void clear_prefix_limits();
  static const int kPrefixLimitsFieldNumber = 6;
  const ::gobgpapi::PrefixLimit& prefix_limits() const;
  ::gobgpapi::PrefixLimit* release_prefix_limits();
  ::gobgpapi::PrefixLimit* mutable_prefix_limits();
  void set_allocated_prefix_limits(::gobgpapi::PrefixLimit* prefix_limits);

  // .gobgpapi.RouteTargetMembership route_target_membership = 7;
  bool has_route_target_membership() const;
  void clear_route_target_membership();
  static const int kRouteTargetMembershipFieldNumber = 7;
  const ::gobgpapi::RouteTargetMembership& route_target_membership() const;
  ::gobgpapi::RouteTargetMembership* release_route_target_membership();
  ::gobgpapi::RouteTargetMembership* mutable_route_target_membership();
  void set_allocated_route_target_membership(::gobgpapi::RouteTargetMembership* route_target_membership);

  // .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 8;
  bool has_long_lived_graceful_restart() const;
  void clear_long_lived_graceful_restart();
  static const int kLongLivedGracefulRestartFieldNumber = 8;
  const ::gobgpapi::LongLivedGracefulRestart& long_lived_graceful_restart() const;
  ::gobgpapi::LongLivedGracefulRestart* release_long_lived_graceful_restart();
  ::gobgpapi::LongLivedGracefulRestart* mutable_long_lived_graceful_restart();
  void set_allocated_long_lived_graceful_restart(::gobgpapi::LongLivedGracefulRestart* long_lived_graceful_restart);

  // .gobgpapi.AddPaths add_paths = 9;
  bool has_add_paths() const;
  void clear_add_paths();
  static const int kAddPathsFieldNumber = 9;
  const ::gobgpapi::AddPaths& add_paths() const;
  ::gobgpapi::AddPaths* release_add_paths();
  ::gobgpapi::AddPaths* mutable_add_paths();
  void set_allocated_add_paths(::gobgpapi::AddPaths* add_paths);

  // @@protoc_insertion_point(class_scope:gobgpapi.AfiSafi)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::MpGracefulRestart* mp_graceful_restart_;
  ::gobgpapi::AfiSafiConfig* config_;
  ::gobgpapi::ApplyPolicy* apply_policy_;
  ::gobgpapi::RouteSelectionOptions* route_selection_options_;
  ::gobgpapi::UseMultiplePaths* use_multiple_paths_;
  ::gobgpapi::PrefixLimit* prefix_limits_;
  ::gobgpapi::RouteTargetMembership* route_target_membership_;
  ::gobgpapi::LongLivedGracefulRestart* long_lived_graceful_restart_;
  ::gobgpapi::AddPaths* add_paths_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAfiSafiImpl();
};
// -------------------------------------------------------------------

class AddPathsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPathsConfig) */ {
 public:
  AddPathsConfig();
  virtual ~AddPathsConfig();

  AddPathsConfig(const AddPathsConfig& from);

  inline AddPathsConfig& operator=(const AddPathsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPathsConfig(AddPathsConfig&& from) noexcept
    : AddPathsConfig() {
    *this = ::std::move(from);
  }

  inline AddPathsConfig& operator=(AddPathsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPathsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPathsConfig* internal_default_instance() {
    return reinterpret_cast<const AddPathsConfig*>(
               &_AddPathsConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    145;

  void Swap(AddPathsConfig* other);
  friend void swap(AddPathsConfig& a, AddPathsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPathsConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  AddPathsConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddPathsConfig& from);
  void MergeFrom(const AddPathsConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddPathsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool receive = 1;
  void clear_receive();
  static const int kReceiveFieldNumber = 1;
  bool receive() const;
  void set_receive(bool value);

  // uint32 send_max = 2;
  void clear_send_max();
  static const int kSendMaxFieldNumber = 2;
  ::google::protobuf::uint32 send_max() const;
  void set_send_max(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPathsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool receive_;
  ::google::protobuf::uint32 send_max_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddPathsConfigImpl();
};
// -------------------------------------------------------------------

class AddPathsState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPathsState) */ {
 public:
  AddPathsState();
  virtual ~AddPathsState();

  AddPathsState(const AddPathsState& from);

  inline AddPathsState& operator=(const AddPathsState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPathsState(AddPathsState&& from) noexcept
    : AddPathsState() {
    *this = ::std::move(from);
  }

  inline AddPathsState& operator=(AddPathsState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPathsState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPathsState* internal_default_instance() {
    return reinterpret_cast<const AddPathsState*>(
               &_AddPathsState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    146;

  void Swap(AddPathsState* other);
  friend void swap(AddPathsState& a, AddPathsState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPathsState* New() const PROTOBUF_FINAL { return New(NULL); }

  AddPathsState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddPathsState& from);
  void MergeFrom(const AddPathsState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddPathsState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool receive = 1;
  void clear_receive();
  static const int kReceiveFieldNumber = 1;
  bool receive() const;
  void set_receive(bool value);

  // uint32 send_max = 2;
  void clear_send_max();
  static const int kSendMaxFieldNumber = 2;
  ::google::protobuf::uint32 send_max() const;
  void set_send_max(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPathsState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool receive_;
  ::google::protobuf::uint32 send_max_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddPathsStateImpl();
};
// -------------------------------------------------------------------

class AddPaths : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPaths) */ {
 public:
  AddPaths();
  virtual ~AddPaths();

  AddPaths(const AddPaths& from);

  inline AddPaths& operator=(const AddPaths& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPaths(AddPaths&& from) noexcept
    : AddPaths() {
    *this = ::std::move(from);
  }

  inline AddPaths& operator=(AddPaths&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPaths& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPaths* internal_default_instance() {
    return reinterpret_cast<const AddPaths*>(
               &_AddPaths_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    147;

  void Swap(AddPaths* other);
  friend void swap(AddPaths& a, AddPaths& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPaths* New() const PROTOBUF_FINAL { return New(NULL); }

  AddPaths* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddPaths& from);
  void MergeFrom(const AddPaths& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddPaths* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.AddPathsConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::AddPathsConfig& config() const;
  ::gobgpapi::AddPathsConfig* release_config();
  ::gobgpapi::AddPathsConfig* mutable_config();
  void set_allocated_config(::gobgpapi::AddPathsConfig* config);

  // .gobgpapi.AddPathsState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::AddPathsState& state() const;
  ::gobgpapi::AddPathsState* release_state();
  ::gobgpapi::AddPathsState* mutable_state();
  void set_allocated_state(::gobgpapi::AddPathsState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPaths)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::AddPathsConfig* config_;
  ::gobgpapi::AddPathsState* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAddPathsImpl();
};
// -------------------------------------------------------------------

class Prefix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Prefix) */ {
 public:
  Prefix();
  virtual ~Prefix();

  Prefix(const Prefix& from);

  inline Prefix& operator=(const Prefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Prefix(Prefix&& from) noexcept
    : Prefix() {
    *this = ::std::move(from);
  }

  inline Prefix& operator=(Prefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Prefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prefix* internal_default_instance() {
    return reinterpret_cast<const Prefix*>(
               &_Prefix_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    148;

  void Swap(Prefix* other);
  friend void swap(Prefix& a, Prefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Prefix* New() const PROTOBUF_FINAL { return New(NULL); }

  Prefix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Prefix& from);
  void MergeFrom(const Prefix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Prefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_prefix = 1;
  void clear_ip_prefix();
  static const int kIpPrefixFieldNumber = 1;
  const ::std::string& ip_prefix() const;
  void set_ip_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_prefix(::std::string&& value);
  #endif
  void set_ip_prefix(const char* value);
  void set_ip_prefix(const char* value, size_t size);
  ::std::string* mutable_ip_prefix();
  ::std::string* release_ip_prefix();
  void set_allocated_ip_prefix(::std::string* ip_prefix);

  // uint32 mask_length_min = 2;
  void clear_mask_length_min();
  static const int kMaskLengthMinFieldNumber = 2;
  ::google::protobuf::uint32 mask_length_min() const;
  void set_mask_length_min(::google::protobuf::uint32 value);

  // uint32 mask_length_max = 3;
  void clear_mask_length_max();
  static const int kMaskLengthMaxFieldNumber = 3;
  ::google::protobuf::uint32 mask_length_max() const;
  void set_mask_length_max(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Prefix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_prefix_;
  ::google::protobuf::uint32 mask_length_min_;
  ::google::protobuf::uint32 mask_length_max_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsPrefixImpl();
};
// -------------------------------------------------------------------

class DefinedSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DefinedSet) */ {
 public:
  DefinedSet();
  virtual ~DefinedSet();

  DefinedSet(const DefinedSet& from);

  inline DefinedSet& operator=(const DefinedSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DefinedSet(DefinedSet&& from) noexcept
    : DefinedSet() {
    *this = ::std::move(from);
  }

  inline DefinedSet& operator=(DefinedSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DefinedSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefinedSet* internal_default_instance() {
    return reinterpret_cast<const DefinedSet*>(
               &_DefinedSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    149;

  void Swap(DefinedSet* other);
  friend void swap(DefinedSet& a, DefinedSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DefinedSet* New() const PROTOBUF_FINAL { return New(NULL); }

  DefinedSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DefinedSet& from);
  void MergeFrom(const DefinedSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DefinedSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::std::string& list(int index) const;
  ::std::string* mutable_list(int index);
  void set_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_list(int index, ::std::string&& value);
  #endif
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  ::std::string* add_list();
  void add_list(const ::std::string& value);
  #if LANG_CXX11
  void add_list(::std::string&& value);
  #endif
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // repeated .gobgpapi.Prefix prefixes = 4;
  int prefixes_size() const;
  void clear_prefixes();
  static const int kPrefixesFieldNumber = 4;
  const ::gobgpapi::Prefix& prefixes(int index) const;
  ::gobgpapi::Prefix* mutable_prefixes(int index);
  ::gobgpapi::Prefix* add_prefixes();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >*
      mutable_prefixes();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >&
      prefixes() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gobgpapi.DefinedType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::DefinedType type() const;
  void set_type(::gobgpapi::DefinedType value);

  // @@protoc_insertion_point(class_scope:gobgpapi.DefinedSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix > prefixes_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsDefinedSetImpl();
};
// -------------------------------------------------------------------

class MatchSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MatchSet) */ {
 public:
  MatchSet();
  virtual ~MatchSet();

  MatchSet(const MatchSet& from);

  inline MatchSet& operator=(const MatchSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchSet(MatchSet&& from) noexcept
    : MatchSet() {
    *this = ::std::move(from);
  }

  inline MatchSet& operator=(MatchSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchSet* internal_default_instance() {
    return reinterpret_cast<const MatchSet*>(
               &_MatchSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    150;

  void Swap(MatchSet* other);
  friend void swap(MatchSet& a, MatchSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchSet* New() const PROTOBUF_FINAL { return New(NULL); }

  MatchSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MatchSet& from);
  void MergeFrom(const MatchSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MatchSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gobgpapi.MatchType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::MatchType type() const;
  void set_type(::gobgpapi::MatchType value);

  // @@protoc_insertion_point(class_scope:gobgpapi.MatchSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsMatchSetImpl();
};
// -------------------------------------------------------------------

class AsPathLength : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AsPathLength) */ {
 public:
  AsPathLength();
  virtual ~AsPathLength();

  AsPathLength(const AsPathLength& from);

  inline AsPathLength& operator=(const AsPathLength& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AsPathLength(AsPathLength&& from) noexcept
    : AsPathLength() {
    *this = ::std::move(from);
  }

  inline AsPathLength& operator=(AsPathLength&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AsPathLength& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsPathLength* internal_default_instance() {
    return reinterpret_cast<const AsPathLength*>(
               &_AsPathLength_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    151;

  void Swap(AsPathLength* other);
  friend void swap(AsPathLength& a, AsPathLength& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AsPathLength* New() const PROTOBUF_FINAL { return New(NULL); }

  AsPathLength* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AsPathLength& from);
  void MergeFrom(const AsPathLength& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AsPathLength* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.AsPathLengthType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::AsPathLengthType type() const;
  void set_type(::gobgpapi::AsPathLengthType value);

  // uint32 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AsPathLength)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::google::protobuf::uint32 length_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAsPathLengthImpl();
};
// -------------------------------------------------------------------

class Conditions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Conditions) */ {
 public:
  Conditions();
  virtual ~Conditions();

  Conditions(const Conditions& from);

  inline Conditions& operator=(const Conditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Conditions(Conditions&& from) noexcept
    : Conditions() {
    *this = ::std::move(from);
  }

  inline Conditions& operator=(Conditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Conditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conditions* internal_default_instance() {
    return reinterpret_cast<const Conditions*>(
               &_Conditions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    152;

  void Swap(Conditions* other);
  friend void swap(Conditions& a, Conditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Conditions* New() const PROTOBUF_FINAL { return New(NULL); }

  Conditions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Conditions& from);
  void MergeFrom(const Conditions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Conditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Conditions_RouteType RouteType;
  static const RouteType ROUTE_TYPE_NONE =
    Conditions_RouteType_ROUTE_TYPE_NONE;
  static const RouteType ROUTE_TYPE_INTERNAL =
    Conditions_RouteType_ROUTE_TYPE_INTERNAL;
  static const RouteType ROUTE_TYPE_EXTERNAL =
    Conditions_RouteType_ROUTE_TYPE_EXTERNAL;
  static const RouteType ROUTE_TYPE_LOCAL =
    Conditions_RouteType_ROUTE_TYPE_LOCAL;
  static inline bool RouteType_IsValid(int value) {
    return Conditions_RouteType_IsValid(value);
  }
  static const RouteType RouteType_MIN =
    Conditions_RouteType_RouteType_MIN;
  static const RouteType RouteType_MAX =
    Conditions_RouteType_RouteType_MAX;
  static const int RouteType_ARRAYSIZE =
    Conditions_RouteType_RouteType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RouteType_descriptor() {
    return Conditions_RouteType_descriptor();
  }
  static inline const ::std::string& RouteType_Name(RouteType value) {
    return Conditions_RouteType_Name(value);
  }
  static inline bool RouteType_Parse(const ::std::string& name,
      RouteType* value) {
    return Conditions_RouteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .gobgpapi.MatchSet prefix_set = 1;
  bool has_prefix_set() const;
  void clear_prefix_set();
  static const int kPrefixSetFieldNumber = 1;
  const ::gobgpapi::MatchSet& prefix_set() const;
  ::gobgpapi::MatchSet* release_prefix_set();
  ::gobgpapi::MatchSet* mutable_prefix_set();
  void set_allocated_prefix_set(::gobgpapi::MatchSet* prefix_set);

  // .gobgpapi.MatchSet neighbor_set = 2;
  bool has_neighbor_set() const;
  void clear_neighbor_set();
  static const int kNeighborSetFieldNumber = 2;
  const ::gobgpapi::MatchSet& neighbor_set() const;
  ::gobgpapi::MatchSet* release_neighbor_set();
  ::gobgpapi::MatchSet* mutable_neighbor_set();
  void set_allocated_neighbor_set(::gobgpapi::MatchSet* neighbor_set);

  // .gobgpapi.AsPathLength as_path_length = 3;
  bool has_as_path_length() const;
  void clear_as_path_length();
  static const int kAsPathLengthFieldNumber = 3;
  const ::gobgpapi::AsPathLength& as_path_length() const;
  ::gobgpapi::AsPathLength* release_as_path_length();
  ::gobgpapi::AsPathLength* mutable_as_path_length();
  void set_allocated_as_path_length(::gobgpapi::AsPathLength* as_path_length);

  // .gobgpapi.MatchSet as_path_set = 4;
  bool has_as_path_set() const;
  void clear_as_path_set();
  static const int kAsPathSetFieldNumber = 4;
  const ::gobgpapi::MatchSet& as_path_set() const;
  ::gobgpapi::MatchSet* release_as_path_set();
  ::gobgpapi::MatchSet* mutable_as_path_set();
  void set_allocated_as_path_set(::gobgpapi::MatchSet* as_path_set);

  // .gobgpapi.MatchSet community_set = 5;
  bool has_community_set() const;
  void clear_community_set();
  static const int kCommunitySetFieldNumber = 5;
  const ::gobgpapi::MatchSet& community_set() const;
  ::gobgpapi::MatchSet* release_community_set();
  ::gobgpapi::MatchSet* mutable_community_set();
  void set_allocated_community_set(::gobgpapi::MatchSet* community_set);

  // .gobgpapi.MatchSet ext_community_set = 6;
  bool has_ext_community_set() const;
  void clear_ext_community_set();
  static const int kExtCommunitySetFieldNumber = 6;
  const ::gobgpapi::MatchSet& ext_community_set() const;
  ::gobgpapi::MatchSet* release_ext_community_set();
  ::gobgpapi::MatchSet* mutable_ext_community_set();
  void set_allocated_ext_community_set(::gobgpapi::MatchSet* ext_community_set);

  // .gobgpapi.MatchSet large_community_set = 9;
  bool has_large_community_set() const;
  void clear_large_community_set();
  static const int kLargeCommunitySetFieldNumber = 9;
  const ::gobgpapi::MatchSet& large_community_set() const;
  ::gobgpapi::MatchSet* release_large_community_set();
  ::gobgpapi::MatchSet* mutable_large_community_set();
  void set_allocated_large_community_set(::gobgpapi::MatchSet* large_community_set);

  // int32 rpki_result = 7;
  void clear_rpki_result();
  static const int kRpkiResultFieldNumber = 7;
  ::google::protobuf::int32 rpki_result() const;
  void set_rpki_result(::google::protobuf::int32 value);

  // .gobgpapi.Conditions.RouteType route_type = 8;
  void clear_route_type();
  static const int kRouteTypeFieldNumber = 8;
  ::gobgpapi::Conditions_RouteType route_type() const;
  void set_route_type(::gobgpapi::Conditions_RouteType value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Conditions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::MatchSet* prefix_set_;
  ::gobgpapi::MatchSet* neighbor_set_;
  ::gobgpapi::AsPathLength* as_path_length_;
  ::gobgpapi::MatchSet* as_path_set_;
  ::gobgpapi::MatchSet* community_set_;
  ::gobgpapi::MatchSet* ext_community_set_;
  ::gobgpapi::MatchSet* large_community_set_;
  ::google::protobuf::int32 rpki_result_;
  int route_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsConditionsImpl();
};
// -------------------------------------------------------------------

class CommunityAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.CommunityAction) */ {
 public:
  CommunityAction();
  virtual ~CommunityAction();

  CommunityAction(const CommunityAction& from);

  inline CommunityAction& operator=(const CommunityAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunityAction(CommunityAction&& from) noexcept
    : CommunityAction() {
    *this = ::std::move(from);
  }

  inline CommunityAction& operator=(CommunityAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunityAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunityAction* internal_default_instance() {
    return reinterpret_cast<const CommunityAction*>(
               &_CommunityAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    153;

  void Swap(CommunityAction* other);
  friend void swap(CommunityAction& a, CommunityAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunityAction* New() const PROTOBUF_FINAL { return New(NULL); }

  CommunityAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommunityAction& from);
  void MergeFrom(const CommunityAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommunityAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string communities = 2;
  int communities_size() const;
  void clear_communities();
  static const int kCommunitiesFieldNumber = 2;
  const ::std::string& communities(int index) const;
  ::std::string* mutable_communities(int index);
  void set_communities(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_communities(int index, ::std::string&& value);
  #endif
  void set_communities(int index, const char* value);
  void set_communities(int index, const char* value, size_t size);
  ::std::string* add_communities();
  void add_communities(const ::std::string& value);
  #if LANG_CXX11
  void add_communities(::std::string&& value);
  #endif
  void add_communities(const char* value);
  void add_communities(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& communities() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_communities();

  // .gobgpapi.CommunityActionType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::CommunityActionType type() const;
  void set_type(::gobgpapi::CommunityActionType value);

  // @@protoc_insertion_point(class_scope:gobgpapi.CommunityAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> communities_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsCommunityActionImpl();
};
// -------------------------------------------------------------------

class MedAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MedAction) */ {
 public:
  MedAction();
  virtual ~MedAction();

  MedAction(const MedAction& from);

  inline MedAction& operator=(const MedAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MedAction(MedAction&& from) noexcept
    : MedAction() {
    *this = ::std::move(from);
  }

  inline MedAction& operator=(MedAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MedAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MedAction* internal_default_instance() {
    return reinterpret_cast<const MedAction*>(
               &_MedAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    154;

  void Swap(MedAction* other);
  friend void swap(MedAction& a, MedAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MedAction* New() const PROTOBUF_FINAL { return New(NULL); }

  MedAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MedAction& from);
  void MergeFrom(const MedAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MedAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // .gobgpapi.MedActionType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::MedActionType type() const;
  void set_type(::gobgpapi::MedActionType value);

  // @@protoc_insertion_point(class_scope:gobgpapi.MedAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 value_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsMedActionImpl();
};
// -------------------------------------------------------------------

class AsPrependAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AsPrependAction) */ {
 public:
  AsPrependAction();
  virtual ~AsPrependAction();

  AsPrependAction(const AsPrependAction& from);

  inline AsPrependAction& operator=(const AsPrependAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AsPrependAction(AsPrependAction&& from) noexcept
    : AsPrependAction() {
    *this = ::std::move(from);
  }

  inline AsPrependAction& operator=(AsPrependAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AsPrependAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsPrependAction* internal_default_instance() {
    return reinterpret_cast<const AsPrependAction*>(
               &_AsPrependAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    155;

  void Swap(AsPrependAction* other);
  friend void swap(AsPrependAction& a, AsPrependAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AsPrependAction* New() const PROTOBUF_FINAL { return New(NULL); }

  AsPrependAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AsPrependAction& from);
  void MergeFrom(const AsPrependAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AsPrependAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 asn = 1;
  void clear_asn();
  static const int kAsnFieldNumber = 1;
  ::google::protobuf::uint32 asn() const;
  void set_asn(::google::protobuf::uint32 value);

  // uint32 repeat = 2;
  void clear_repeat();
  static const int kRepeatFieldNumber = 2;
  ::google::protobuf::uint32 repeat() const;
  void set_repeat(::google::protobuf::uint32 value);

  // bool use_left_most = 3;
  void clear_use_left_most();
  static const int kUseLeftMostFieldNumber = 3;
  bool use_left_most() const;
  void set_use_left_most(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AsPrependAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 asn_;
  ::google::protobuf::uint32 repeat_;
  bool use_left_most_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsAsPrependActionImpl();
};
// -------------------------------------------------------------------

class NexthopAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.NexthopAction) */ {
 public:
  NexthopAction();
  virtual ~NexthopAction();

  NexthopAction(const NexthopAction& from);

  inline NexthopAction& operator=(const NexthopAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NexthopAction(NexthopAction&& from) noexcept
    : NexthopAction() {
    *this = ::std::move(from);
  }

  inline NexthopAction& operator=(NexthopAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NexthopAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NexthopAction* internal_default_instance() {
    return reinterpret_cast<const NexthopAction*>(
               &_NexthopAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    156;

  void Swap(NexthopAction* other);
  friend void swap(NexthopAction& a, NexthopAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NexthopAction* New() const PROTOBUF_FINAL { return New(NULL); }

  NexthopAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NexthopAction& from);
  void MergeFrom(const NexthopAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NexthopAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // bool self = 2;
  void clear_self();
  static const int kSelfFieldNumber = 2;
  bool self() const;
  void set_self(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.NexthopAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  bool self_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsNexthopActionImpl();
};
// -------------------------------------------------------------------

class LocalPrefAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LocalPrefAction) */ {
 public:
  LocalPrefAction();
  virtual ~LocalPrefAction();

  LocalPrefAction(const LocalPrefAction& from);

  inline LocalPrefAction& operator=(const LocalPrefAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalPrefAction(LocalPrefAction&& from) noexcept
    : LocalPrefAction() {
    *this = ::std::move(from);
  }

  inline LocalPrefAction& operator=(LocalPrefAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalPrefAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPrefAction* internal_default_instance() {
    return reinterpret_cast<const LocalPrefAction*>(
               &_LocalPrefAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    157;

  void Swap(LocalPrefAction* other);
  friend void swap(LocalPrefAction& a, LocalPrefAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalPrefAction* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalPrefAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocalPrefAction& from);
  void MergeFrom(const LocalPrefAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocalPrefAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.LocalPrefAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 value_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsLocalPrefActionImpl();
};
// -------------------------------------------------------------------

class Actions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Actions) */ {
 public:
  Actions();
  virtual ~Actions();

  Actions(const Actions& from);

  inline Actions& operator=(const Actions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Actions(Actions&& from) noexcept
    : Actions() {
    *this = ::std::move(from);
  }

  inline Actions& operator=(Actions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Actions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Actions* internal_default_instance() {
    return reinterpret_cast<const Actions*>(
               &_Actions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    158;

  void Swap(Actions* other);
  friend void swap(Actions& a, Actions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Actions* New() const PROTOBUF_FINAL { return New(NULL); }

  Actions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Actions& from);
  void MergeFrom(const Actions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Actions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.CommunityAction community = 2;
  bool has_community() const;
  void clear_community();
  static const int kCommunityFieldNumber = 2;
  const ::gobgpapi::CommunityAction& community() const;
  ::gobgpapi::CommunityAction* release_community();
  ::gobgpapi::CommunityAction* mutable_community();
  void set_allocated_community(::gobgpapi::CommunityAction* community);

  // .gobgpapi.MedAction med = 3;
  bool has_med() const;
  void clear_med();
  static const int kMedFieldNumber = 3;
  const ::gobgpapi::MedAction& med() const;
  ::gobgpapi::MedAction* release_med();
  ::gobgpapi::MedAction* mutable_med();
  void set_allocated_med(::gobgpapi::MedAction* med);

  // .gobgpapi.AsPrependAction as_prepend = 4;
  bool has_as_prepend() const;
  void clear_as_prepend();
  static const int kAsPrependFieldNumber = 4;
  const ::gobgpapi::AsPrependAction& as_prepend() const;
  ::gobgpapi::AsPrependAction* release_as_prepend();
  ::gobgpapi::AsPrependAction* mutable_as_prepend();
  void set_allocated_as_prepend(::gobgpapi::AsPrependAction* as_prepend);

  // .gobgpapi.CommunityAction ext_community = 5;
  bool has_ext_community() const;
  void clear_ext_community();
  static const int kExtCommunityFieldNumber = 5;
  const ::gobgpapi::CommunityAction& ext_community() const;
  ::gobgpapi::CommunityAction* release_ext_community();
  ::gobgpapi::CommunityAction* mutable_ext_community();
  void set_allocated_ext_community(::gobgpapi::CommunityAction* ext_community);

  // .gobgpapi.NexthopAction nexthop = 6;
  bool has_nexthop() const;
  void clear_nexthop();
  static const int kNexthopFieldNumber = 6;
  const ::gobgpapi::NexthopAction& nexthop() const;
  ::gobgpapi::NexthopAction* release_nexthop();
  ::gobgpapi::NexthopAction* mutable_nexthop();
  void set_allocated_nexthop(::gobgpapi::NexthopAction* nexthop);

  // .gobgpapi.LocalPrefAction local_pref = 7;
  bool has_local_pref() const;
  void clear_local_pref();
  static const int kLocalPrefFieldNumber = 7;
  const ::gobgpapi::LocalPrefAction& local_pref() const;
  ::gobgpapi::LocalPrefAction* release_local_pref();
  ::gobgpapi::LocalPrefAction* mutable_local_pref();
  void set_allocated_local_pref(::gobgpapi::LocalPrefAction* local_pref);

  // .gobgpapi.CommunityAction large_community = 8;
  bool has_large_community() const;
  void clear_large_community();
  static const int kLargeCommunityFieldNumber = 8;
  const ::gobgpapi::CommunityAction& large_community() const;
  ::gobgpapi::CommunityAction* release_large_community();
  ::gobgpapi::CommunityAction* mutable_large_community();
  void set_allocated_large_community(::gobgpapi::CommunityAction* large_community);

  // .gobgpapi.RouteAction route_action = 1;
  void clear_route_action();
  static const int kRouteActionFieldNumber = 1;
  ::gobgpapi::RouteAction route_action() const;
  void set_route_action(::gobgpapi::RouteAction value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Actions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::CommunityAction* community_;
  ::gobgpapi::MedAction* med_;
  ::gobgpapi::AsPrependAction* as_prepend_;
  ::gobgpapi::CommunityAction* ext_community_;
  ::gobgpapi::NexthopAction* nexthop_;
  ::gobgpapi::LocalPrefAction* local_pref_;
  ::gobgpapi::CommunityAction* large_community_;
  int route_action_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsActionsImpl();
};
// -------------------------------------------------------------------

class Statement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Statement) */ {
 public:
  Statement();
  virtual ~Statement();

  Statement(const Statement& from);

  inline Statement& operator=(const Statement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Statement(Statement&& from) noexcept
    : Statement() {
    *this = ::std::move(from);
  }

  inline Statement& operator=(Statement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Statement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statement* internal_default_instance() {
    return reinterpret_cast<const Statement*>(
               &_Statement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    159;

  void Swap(Statement* other);
  friend void swap(Statement& a, Statement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Statement* New() const PROTOBUF_FINAL { return New(NULL); }

  Statement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Statement& from);
  void MergeFrom(const Statement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Statement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gobgpapi.Conditions conditions = 2;
  bool has_conditions() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 2;
  const ::gobgpapi::Conditions& conditions() const;
  ::gobgpapi::Conditions* release_conditions();
  ::gobgpapi::Conditions* mutable_conditions();
  void set_allocated_conditions(::gobgpapi::Conditions* conditions);

  // .gobgpapi.Actions actions = 3;
  bool has_actions() const;
  void clear_actions();
  static const int kActionsFieldNumber = 3;
  const ::gobgpapi::Actions& actions() const;
  ::gobgpapi::Actions* release_actions();
  ::gobgpapi::Actions* mutable_actions();
  void set_allocated_actions(::gobgpapi::Actions* actions);

  // @@protoc_insertion_point(class_scope:gobgpapi.Statement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gobgpapi::Conditions* conditions_;
  ::gobgpapi::Actions* actions_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsStatementImpl();
};
// -------------------------------------------------------------------

class Policy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Policy) */ {
 public:
  Policy();
  virtual ~Policy();

  Policy(const Policy& from);

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Policy(Policy&& from) noexcept
    : Policy() {
    *this = ::std::move(from);
  }

  inline Policy& operator=(Policy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Policy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Policy* internal_default_instance() {
    return reinterpret_cast<const Policy*>(
               &_Policy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    160;

  void Swap(Policy* other);
  friend void swap(Policy& a, Policy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Policy* New() const PROTOBUF_FINAL { return New(NULL); }

  Policy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Policy& from);
  void MergeFrom(const Policy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Policy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Statement statements = 2;
  int statements_size() const;
  void clear_statements();
  static const int kStatementsFieldNumber = 2;
  const ::gobgpapi::Statement& statements(int index) const;
  ::gobgpapi::Statement* mutable_statements(int index);
  ::gobgpapi::Statement* add_statements();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >*
      mutable_statements();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >&
      statements() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gobgpapi.Policy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement > statements_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsPolicyImpl();
};
// -------------------------------------------------------------------

class PolicyAssignment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PolicyAssignment) */ {
 public:
  PolicyAssignment();
  virtual ~PolicyAssignment();

  PolicyAssignment(const PolicyAssignment& from);

  inline PolicyAssignment& operator=(const PolicyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PolicyAssignment(PolicyAssignment&& from) noexcept
    : PolicyAssignment() {
    *this = ::std::move(from);
  }

  inline PolicyAssignment& operator=(PolicyAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PolicyAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyAssignment* internal_default_instance() {
    return reinterpret_cast<const PolicyAssignment*>(
               &_PolicyAssignment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    161;

  void Swap(PolicyAssignment* other);
  friend void swap(PolicyAssignment& a, PolicyAssignment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PolicyAssignment* New() const PROTOBUF_FINAL { return New(NULL); }

  PolicyAssignment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PolicyAssignment& from);
  void MergeFrom(const PolicyAssignment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PolicyAssignment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Policy policies = 4;
  int policies_size() const;
  void clear_policies();
  static const int kPoliciesFieldNumber = 4;
  const ::gobgpapi::Policy& policies(int index) const;
  ::gobgpapi::Policy* mutable_policies(int index);
  ::gobgpapi::Policy* add_policies();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >*
      mutable_policies();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >&
      policies() const;

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gobgpapi.PolicyType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::PolicyType type() const;
  void set_type(::gobgpapi::PolicyType value);

  // .gobgpapi.Resource resource = 2;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // .gobgpapi.RouteAction default = 5;
  void clear_default_();
  static const int kDefaultFieldNumber = 5;
  ::gobgpapi::RouteAction default_() const;
  void set_default_(::gobgpapi::RouteAction value);

  // @@protoc_insertion_point(class_scope:gobgpapi.PolicyAssignment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy > policies_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  int resource_;
  int default__;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsPolicyAssignmentImpl();
};
// -------------------------------------------------------------------

class Roa : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Roa) */ {
 public:
  Roa();
  virtual ~Roa();

  Roa(const Roa& from);

  inline Roa& operator=(const Roa& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Roa(Roa&& from) noexcept
    : Roa() {
    *this = ::std::move(from);
  }

  inline Roa& operator=(Roa&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Roa& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Roa* internal_default_instance() {
    return reinterpret_cast<const Roa*>(
               &_Roa_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    162;

  void Swap(Roa* other);
  friend void swap(Roa& a, Roa& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Roa* New() const PROTOBUF_FINAL { return New(NULL); }

  Roa* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Roa& from);
  void MergeFrom(const Roa& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Roa* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string prefix = 4;
  void clear_prefix();
  static const int kPrefixFieldNumber = 4;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // .gobgpapi.RPKIConf conf = 5;
  bool has_conf() const;
  void clear_conf();
  static const int kConfFieldNumber = 5;
  const ::gobgpapi::RPKIConf& conf() const;
  ::gobgpapi::RPKIConf* release_conf();
  ::gobgpapi::RPKIConf* mutable_conf();
  void set_allocated_conf(::gobgpapi::RPKIConf* conf);

  // uint32 as = 1;
  void clear_as();
  static const int kAsFieldNumber = 1;
  ::google::protobuf::uint32 as() const;
  void set_as(::google::protobuf::uint32 value);

  // uint32 prefixlen = 2;
  void clear_prefixlen();
  static const int kPrefixlenFieldNumber = 2;
  ::google::protobuf::uint32 prefixlen() const;
  void set_prefixlen(::google::protobuf::uint32 value);

  // uint32 maxlen = 3;
  void clear_maxlen();
  static const int kMaxlenFieldNumber = 3;
  ::google::protobuf::uint32 maxlen() const;
  void set_maxlen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Roa)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::gobgpapi::RPKIConf* conf_;
  ::google::protobuf::uint32 as_;
  ::google::protobuf::uint32 prefixlen_;
  ::google::protobuf::uint32 maxlen_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsRoaImpl();
};
// -------------------------------------------------------------------

class GetRoaRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetRoaRequest) */ {
 public:
  GetRoaRequest();
  virtual ~GetRoaRequest();

  GetRoaRequest(const GetRoaRequest& from);

  inline GetRoaRequest& operator=(const GetRoaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRoaRequest(GetRoaRequest&& from) noexcept
    : GetRoaRequest() {
    *this = ::std::move(from);
  }

  inline GetRoaRequest& operator=(GetRoaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRoaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRoaRequest* internal_default_instance() {
    return reinterpret_cast<const GetRoaRequest*>(
               &_GetRoaRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    163;

  void Swap(GetRoaRequest* other);
  friend void swap(GetRoaRequest& a, GetRoaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRoaRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRoaRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRoaRequest& from);
  void MergeFrom(const GetRoaRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRoaRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 family = 1;
  void clear_family();
  static const int kFamilyFieldNumber = 1;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetRoaRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 family_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetRoaRequestImpl();
};
// -------------------------------------------------------------------

class GetRoaResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetRoaResponse) */ {
 public:
  GetRoaResponse();
  virtual ~GetRoaResponse();

  GetRoaResponse(const GetRoaResponse& from);

  inline GetRoaResponse& operator=(const GetRoaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRoaResponse(GetRoaResponse&& from) noexcept
    : GetRoaResponse() {
    *this = ::std::move(from);
  }

  inline GetRoaResponse& operator=(GetRoaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRoaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRoaResponse* internal_default_instance() {
    return reinterpret_cast<const GetRoaResponse*>(
               &_GetRoaResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    164;

  void Swap(GetRoaResponse* other);
  friend void swap(GetRoaResponse& a, GetRoaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRoaResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRoaResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRoaResponse& from);
  void MergeFrom(const GetRoaResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRoaResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gobgpapi.Roa roas = 1;
  int roas_size() const;
  void clear_roas();
  static const int kRoasFieldNumber = 1;
  const ::gobgpapi::Roa& roas(int index) const;
  ::gobgpapi::Roa* mutable_roas(int index);
  ::gobgpapi::Roa* add_roas();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >*
      mutable_roas();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >&
      roas() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.GetRoaResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa > roas_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetRoaResponseImpl();
};
// -------------------------------------------------------------------

class Vrf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Vrf) */ {
 public:
  Vrf();
  virtual ~Vrf();

  Vrf(const Vrf& from);

  inline Vrf& operator=(const Vrf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vrf(Vrf&& from) noexcept
    : Vrf() {
    *this = ::std::move(from);
  }

  inline Vrf& operator=(Vrf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vrf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vrf* internal_default_instance() {
    return reinterpret_cast<const Vrf*>(
               &_Vrf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    165;

  void Swap(Vrf* other);
  friend void swap(Vrf& a, Vrf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vrf* New() const PROTOBUF_FINAL { return New(NULL); }

  Vrf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vrf& from);
  void MergeFrom(const Vrf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vrf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes import_rt = 3;
  int import_rt_size() const;
  void clear_import_rt();
  static const int kImportRtFieldNumber = 3;
  const ::std::string& import_rt(int index) const;
  ::std::string* mutable_import_rt(int index);
  void set_import_rt(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_import_rt(int index, ::std::string&& value);
  #endif
  void set_import_rt(int index, const char* value);
  void set_import_rt(int index, const void* value, size_t size);
  ::std::string* add_import_rt();
  void add_import_rt(const ::std::string& value);
  #if LANG_CXX11
  void add_import_rt(::std::string&& value);
  #endif
  void add_import_rt(const char* value);
  void add_import_rt(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& import_rt() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_import_rt();

  // repeated bytes export_rt = 4;
  int export_rt_size() const;
  void clear_export_rt();
  static const int kExportRtFieldNumber = 4;
  const ::std::string& export_rt(int index) const;
  ::std::string* mutable_export_rt(int index);
  void set_export_rt(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_export_rt(int index, ::std::string&& value);
  #endif
  void set_export_rt(int index, const char* value);
  void set_export_rt(int index, const void* value, size_t size);
  ::std::string* add_export_rt();
  void add_export_rt(const ::std::string& value);
  #if LANG_CXX11
  void add_export_rt(::std::string&& value);
  #endif
  void add_export_rt(const char* value);
  void add_export_rt(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& export_rt() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_export_rt();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes rd = 2;
  void clear_rd();
  static const int kRdFieldNumber = 2;
  const ::std::string& rd() const;
  void set_rd(const ::std::string& value);
  #if LANG_CXX11
  void set_rd(::std::string&& value);
  #endif
  void set_rd(const char* value);
  void set_rd(const void* value, size_t size);
  ::std::string* mutable_rd();
  ::std::string* release_rd();
  void set_allocated_rd(::std::string* rd);

  // uint32 id = 5;
  void clear_id();
  static const int kIdFieldNumber = 5;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Vrf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> import_rt_;
  ::google::protobuf::RepeatedPtrField< ::std::string> export_rt_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr rd_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsVrfImpl();
};
// -------------------------------------------------------------------

class Global : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Global) */ {
 public:
  Global();
  virtual ~Global();

  Global(const Global& from);

  inline Global& operator=(const Global& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Global(Global&& from) noexcept
    : Global() {
    *this = ::std::move(from);
  }

  inline Global& operator=(Global&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Global& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Global* internal_default_instance() {
    return reinterpret_cast<const Global*>(
               &_Global_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    166;

  void Swap(Global* other);
  friend void swap(Global& a, Global& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Global* New() const PROTOBUF_FINAL { return New(NULL); }

  Global* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Global& from);
  void MergeFrom(const Global& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Global* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string listen_addresses = 4;
  int listen_addresses_size() const;
  void clear_listen_addresses();
  static const int kListenAddressesFieldNumber = 4;
  const ::std::string& listen_addresses(int index) const;
  ::std::string* mutable_listen_addresses(int index);
  void set_listen_addresses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_listen_addresses(int index, ::std::string&& value);
  #endif
  void set_listen_addresses(int index, const char* value);
  void set_listen_addresses(int index, const char* value, size_t size);
  ::std::string* add_listen_addresses();
  void add_listen_addresses(const ::std::string& value);
  #if LANG_CXX11
  void add_listen_addresses(::std::string&& value);
  #endif
  void add_listen_addresses(const char* value);
  void add_listen_addresses(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& listen_addresses() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_listen_addresses();

  // repeated uint32 families = 5;
  int families_size() const;
  void clear_families();
  static const int kFamiliesFieldNumber = 5;
  ::google::protobuf::uint32 families(int index) const;
  void set_families(int index, ::google::protobuf::uint32 value);
  void add_families(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      families() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_families();

  // string router_id = 2;
  void clear_router_id();
  static const int kRouterIdFieldNumber = 2;
  const ::std::string& router_id() const;
  void set_router_id(const ::std::string& value);
  #if LANG_CXX11
  void set_router_id(::std::string&& value);
  #endif
  void set_router_id(const char* value);
  void set_router_id(const char* value, size_t size);
  ::std::string* mutable_router_id();
  ::std::string* release_router_id();
  void set_allocated_router_id(::std::string* router_id);

  // uint32 as = 1;
  void clear_as();
  static const int kAsFieldNumber = 1;
  ::google::protobuf::uint32 as() const;
  void set_as(::google::protobuf::uint32 value);

  // int32 listen_port = 3;
  void clear_listen_port();
  static const int kListenPortFieldNumber = 3;
  ::google::protobuf::int32 listen_port() const;
  void set_listen_port(::google::protobuf::int32 value);

  // bool use_multiple_paths = 6;
  void clear_use_multiple_paths();
  static const int kUseMultiplePathsFieldNumber = 6;
  bool use_multiple_paths() const;
  void set_use_multiple_paths(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Global)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> listen_addresses_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > families_;
  mutable int _families_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr router_id_;
  ::google::protobuf::uint32 as_;
  ::google::protobuf::int32 listen_port_;
  bool use_multiple_paths_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGlobalImpl();
};
// -------------------------------------------------------------------

class TableInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TableInfo) */ {
 public:
  TableInfo();
  virtual ~TableInfo();

  TableInfo(const TableInfo& from);

  inline TableInfo& operator=(const TableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableInfo(TableInfo&& from) noexcept
    : TableInfo() {
    *this = ::std::move(from);
  }

  inline TableInfo& operator=(TableInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableInfo* internal_default_instance() {
    return reinterpret_cast<const TableInfo*>(
               &_TableInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    167;

  void Swap(TableInfo* other);
  friend void swap(TableInfo& a, TableInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TableInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableInfo& from);
  void MergeFrom(const TableInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gobgpapi.Resource type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::Resource type() const;
  void set_type(::gobgpapi::Resource value);

  // uint32 family = 3;
  void clear_family();
  static const int kFamilyFieldNumber = 3;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // uint64 num_destination = 4;
  void clear_num_destination();
  static const int kNumDestinationFieldNumber = 4;
  ::google::protobuf::uint64 num_destination() const;
  void set_num_destination(::google::protobuf::uint64 value);

  // uint64 num_path = 5;
  void clear_num_path();
  static const int kNumPathFieldNumber = 5;
  ::google::protobuf::uint64 num_path() const;
  void set_num_path(::google::protobuf::uint64 value);

  // uint64 num_accepted = 6;
  void clear_num_accepted();
  static const int kNumAcceptedFieldNumber = 6;
  ::google::protobuf::uint64 num_accepted() const;
  void set_num_accepted(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.TableInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::uint32 family_;
  ::google::protobuf::uint64 num_destination_;
  ::google::protobuf::uint64 num_path_;
  ::google::protobuf::uint64 num_accepted_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsTableInfoImpl();
};
// -------------------------------------------------------------------

class GetRibInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetRibInfoRequest) */ {
 public:
  GetRibInfoRequest();
  virtual ~GetRibInfoRequest();

  GetRibInfoRequest(const GetRibInfoRequest& from);

  inline GetRibInfoRequest& operator=(const GetRibInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRibInfoRequest(GetRibInfoRequest&& from) noexcept
    : GetRibInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetRibInfoRequest& operator=(GetRibInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRibInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRibInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetRibInfoRequest*>(
               &_GetRibInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    168;

  void Swap(GetRibInfoRequest* other);
  friend void swap(GetRibInfoRequest& a, GetRibInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRibInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRibInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRibInfoRequest& from);
  void MergeFrom(const GetRibInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRibInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.TableInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::gobgpapi::TableInfo& info() const;
  ::gobgpapi::TableInfo* release_info();
  ::gobgpapi::TableInfo* mutable_info();
  void set_allocated_info(::gobgpapi::TableInfo* info);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetRibInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::TableInfo* info_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetRibInfoRequestImpl();
};
// -------------------------------------------------------------------

class GetRibInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetRibInfoResponse) */ {
 public:
  GetRibInfoResponse();
  virtual ~GetRibInfoResponse();

  GetRibInfoResponse(const GetRibInfoResponse& from);

  inline GetRibInfoResponse& operator=(const GetRibInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRibInfoResponse(GetRibInfoResponse&& from) noexcept
    : GetRibInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetRibInfoResponse& operator=(GetRibInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRibInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRibInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetRibInfoResponse*>(
               &_GetRibInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    169;

  void Swap(GetRibInfoResponse* other);
  friend void swap(GetRibInfoResponse& a, GetRibInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRibInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRibInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRibInfoResponse& from);
  void MergeFrom(const GetRibInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRibInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gobgpapi.TableInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::gobgpapi::TableInfo& info() const;
  ::gobgpapi::TableInfo* release_info();
  ::gobgpapi::TableInfo* mutable_info();
  void set_allocated_info(::gobgpapi::TableInfo* info);

  // @@protoc_insertion_point(class_scope:gobgpapi.GetRibInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::TableInfo* info_;
  mutable int _cached_size_;
  friend struct ::protobuf_gobgp_2eproto::TableStruct;
  friend void ::protobuf_gobgp_2eproto::InitDefaultsGetRibInfoResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetNeighborRequest

// bool enableAdvertised = 1;
inline void GetNeighborRequest::clear_enableadvertised() {
  enableadvertised_ = false;
}
inline bool GetNeighborRequest::enableadvertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetNeighborRequest.enableAdvertised)
  return enableadvertised_;
}
inline void GetNeighborRequest::set_enableadvertised(bool value) {
  
  enableadvertised_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GetNeighborRequest.enableAdvertised)
}

// string address = 2;
inline void GetNeighborRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNeighborRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetNeighborRequest.address)
  return address_.GetNoArena();
}
inline void GetNeighborRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.GetNeighborRequest.address)
}
#if LANG_CXX11
inline void GetNeighborRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.GetNeighborRequest.address)
}
#endif
inline void GetNeighborRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.GetNeighborRequest.address)
}
inline void GetNeighborRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.GetNeighborRequest.address)
}
inline ::std::string* GetNeighborRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetNeighborRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNeighborRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetNeighborRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNeighborRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetNeighborRequest.address)
}

// -------------------------------------------------------------------

// GetNeighborResponse

// repeated .gobgpapi.Peer peers = 1;
inline int GetNeighborResponse::peers_size() const {
  return peers_.size();
}
inline void GetNeighborResponse::clear_peers() {
  peers_.Clear();
}
inline const ::gobgpapi::Peer& GetNeighborResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetNeighborResponse.peers)
  return peers_.Get(index);
}
inline ::gobgpapi::Peer* GetNeighborResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetNeighborResponse.peers)
  return peers_.Mutable(index);
}
inline ::gobgpapi::Peer* GetNeighborResponse::add_peers() {
  // @@protoc_insertion_point(field_add:gobgpapi.GetNeighborResponse.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Peer >*
GetNeighborResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.GetNeighborResponse.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Peer >&
GetNeighborResponse::peers() const {
  // @@protoc_insertion_point(field_list:gobgpapi.GetNeighborResponse.peers)
  return peers_;
}

// -------------------------------------------------------------------

// Arguments

// .gobgpapi.Resource resource = 1;
inline void Arguments::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource Arguments::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void Arguments::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.resource)
}

// uint32 family = 2;
inline void Arguments::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 Arguments::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.family)
  return family_;
}
inline void Arguments::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.family)
}

// string name = 3;
inline void Arguments::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Arguments::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.name)
  return name_.GetNoArena();
}
inline void Arguments::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.name)
}
#if LANG_CXX11
inline void Arguments::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Arguments.name)
}
#endif
inline void Arguments::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Arguments.name)
}
inline void Arguments::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Arguments.name)
}
inline ::std::string* Arguments::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Arguments.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Arguments::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.Arguments.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Arguments::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Arguments.name)
}

// bool current = 4;
inline void Arguments::clear_current() {
  current_ = false;
}
inline bool Arguments::current() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.current)
  return current_;
}
inline void Arguments::set_current(bool value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.current)
}

// -------------------------------------------------------------------

// AddPathRequest

// .gobgpapi.Resource resource = 1;
inline void AddPathRequest::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource AddPathRequest::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathRequest.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void AddPathRequest::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathRequest.resource)
}

// string vrf_id = 2;
inline void AddPathRequest::clear_vrf_id() {
  vrf_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddPathRequest::vrf_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathRequest.vrf_id)
  return vrf_id_.GetNoArena();
}
inline void AddPathRequest::set_vrf_id(const ::std::string& value) {
  
  vrf_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathRequest.vrf_id)
}
#if LANG_CXX11
inline void AddPathRequest::set_vrf_id(::std::string&& value) {
  
  vrf_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddPathRequest.vrf_id)
}
#endif
inline void AddPathRequest::set_vrf_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vrf_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddPathRequest.vrf_id)
}
inline void AddPathRequest::set_vrf_id(const char* value, size_t size) {
  
  vrf_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddPathRequest.vrf_id)
}
inline ::std::string* AddPathRequest::mutable_vrf_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPathRequest.vrf_id)
  return vrf_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddPathRequest::release_vrf_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPathRequest.vrf_id)
  
  return vrf_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddPathRequest::set_allocated_vrf_id(::std::string* vrf_id) {
  if (vrf_id != NULL) {
    
  } else {
    
  }
  vrf_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrf_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPathRequest.vrf_id)
}

// .gobgpapi.Path path = 3;
inline bool AddPathRequest::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
inline void AddPathRequest::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
}
inline const ::gobgpapi::Path& AddPathRequest::path() const {
  const ::gobgpapi::Path* p = path_;
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathRequest.path)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Path*>(
      &::gobgpapi::_Path_default_instance_);
}
inline ::gobgpapi::Path* AddPathRequest::release_path() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPathRequest.path)
  
  ::gobgpapi::Path* temp = path_;
  path_ = NULL;
  return temp;
}
inline ::gobgpapi::Path* AddPathRequest::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::gobgpapi::Path;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPathRequest.path)
  return path_;
}
inline void AddPathRequest::set_allocated_path(::gobgpapi::Path* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete path_;
  }
  if (path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPathRequest.path)
}

// -------------------------------------------------------------------

// AddPathResponse

// bytes uuid = 1;
inline void AddPathResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddPathResponse::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathResponse.uuid)
  return uuid_.GetNoArena();
}
inline void AddPathResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathResponse.uuid)
}
#if LANG_CXX11
inline void AddPathResponse::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddPathResponse.uuid)
}
#endif
inline void AddPathResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddPathResponse.uuid)
}
inline void AddPathResponse::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddPathResponse.uuid)
}
inline ::std::string* AddPathResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPathResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddPathResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPathResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddPathResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPathResponse.uuid)
}

// -------------------------------------------------------------------

// DeletePathRequest

// .gobgpapi.Resource resource = 1;
inline void DeletePathRequest::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource DeletePathRequest::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void DeletePathRequest::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePathRequest.resource)
}

// string vrf_id = 2;
inline void DeletePathRequest::clear_vrf_id() {
  vrf_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeletePathRequest::vrf_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.vrf_id)
  return vrf_id_.GetNoArena();
}
inline void DeletePathRequest::set_vrf_id(const ::std::string& value) {
  
  vrf_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePathRequest.vrf_id)
}
#if LANG_CXX11
inline void DeletePathRequest::set_vrf_id(::std::string&& value) {
  
  vrf_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeletePathRequest.vrf_id)
}
#endif
inline void DeletePathRequest::set_vrf_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vrf_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeletePathRequest.vrf_id)
}
inline void DeletePathRequest::set_vrf_id(const char* value, size_t size) {
  
  vrf_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeletePathRequest.vrf_id)
}
inline ::std::string* DeletePathRequest::mutable_vrf_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePathRequest.vrf_id)
  return vrf_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeletePathRequest::release_vrf_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePathRequest.vrf_id)
  
  return vrf_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePathRequest::set_allocated_vrf_id(::std::string* vrf_id) {
  if (vrf_id != NULL) {
    
  } else {
    
  }
  vrf_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrf_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePathRequest.vrf_id)
}

// uint32 family = 3;
inline void DeletePathRequest::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 DeletePathRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.family)
  return family_;
}
inline void DeletePathRequest::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePathRequest.family)
}

// .gobgpapi.Path path = 4;
inline bool DeletePathRequest::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
inline void DeletePathRequest::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
}
inline const ::gobgpapi::Path& DeletePathRequest::path() const {
  const ::gobgpapi::Path* p = path_;
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.path)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Path*>(
      &::gobgpapi::_Path_default_instance_);
}
inline ::gobgpapi::Path* DeletePathRequest::release_path() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePathRequest.path)
  
  ::gobgpapi::Path* temp = path_;
  path_ = NULL;
  return temp;
}
inline ::gobgpapi::Path* DeletePathRequest::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::gobgpapi::Path;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePathRequest.path)
  return path_;
}
inline void DeletePathRequest::set_allocated_path(::gobgpapi::Path* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete path_;
  }
  if (path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePathRequest.path)
}

// bytes uuid = 5;
inline void DeletePathRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeletePathRequest::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.uuid)
  return uuid_.GetNoArena();
}
inline void DeletePathRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePathRequest.uuid)
}
#if LANG_CXX11
inline void DeletePathRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeletePathRequest.uuid)
}
#endif
inline void DeletePathRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeletePathRequest.uuid)
}
inline void DeletePathRequest::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeletePathRequest.uuid)
}
inline ::std::string* DeletePathRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePathRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeletePathRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePathRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePathRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePathRequest.uuid)
}

// -------------------------------------------------------------------

// DeletePathResponse

// -------------------------------------------------------------------

// AddNeighborRequest

// .gobgpapi.Peer peer = 1;
inline bool AddNeighborRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void AddNeighborRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::gobgpapi::Peer& AddNeighborRequest::peer() const {
  const ::gobgpapi::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:gobgpapi.AddNeighborRequest.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Peer*>(
      &::gobgpapi::_Peer_default_instance_);
}
inline ::gobgpapi::Peer* AddNeighborRequest::release_peer() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddNeighborRequest.peer)
  
  ::gobgpapi::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::gobgpapi::Peer* AddNeighborRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::gobgpapi::Peer;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddNeighborRequest.peer)
  return peer_;
}
inline void AddNeighborRequest::set_allocated_peer(::gobgpapi::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddNeighborRequest.peer)
}

// -------------------------------------------------------------------

// AddNeighborResponse

// -------------------------------------------------------------------

// DeleteNeighborRequest

// .gobgpapi.Peer peer = 1;
inline bool DeleteNeighborRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void DeleteNeighborRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::gobgpapi::Peer& DeleteNeighborRequest::peer() const {
  const ::gobgpapi::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteNeighborRequest.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Peer*>(
      &::gobgpapi::_Peer_default_instance_);
}
inline ::gobgpapi::Peer* DeleteNeighborRequest::release_peer() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteNeighborRequest.peer)
  
  ::gobgpapi::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::gobgpapi::Peer* DeleteNeighborRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::gobgpapi::Peer;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteNeighborRequest.peer)
  return peer_;
}
inline void DeleteNeighborRequest::set_allocated_peer(::gobgpapi::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteNeighborRequest.peer)
}

// -------------------------------------------------------------------

// DeleteNeighborResponse

// -------------------------------------------------------------------

// ResetNeighborRequest

// string address = 1;
inline void ResetNeighborRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResetNeighborRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetNeighborRequest.address)
  return address_.GetNoArena();
}
inline void ResetNeighborRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetNeighborRequest.address)
}
#if LANG_CXX11
inline void ResetNeighborRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ResetNeighborRequest.address)
}
#endif
inline void ResetNeighborRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ResetNeighborRequest.address)
}
inline void ResetNeighborRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ResetNeighborRequest.address)
}
inline ::std::string* ResetNeighborRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ResetNeighborRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResetNeighborRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.ResetNeighborRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResetNeighborRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ResetNeighborRequest.address)
}

// string communication = 2;
inline void ResetNeighborRequest::clear_communication() {
  communication_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResetNeighborRequest::communication() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetNeighborRequest.communication)
  return communication_.GetNoArena();
}
inline void ResetNeighborRequest::set_communication(const ::std::string& value) {
  
  communication_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetNeighborRequest.communication)
}
#if LANG_CXX11
inline void ResetNeighborRequest::set_communication(::std::string&& value) {
  
  communication_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ResetNeighborRequest.communication)
}
#endif
inline void ResetNeighborRequest::set_communication(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  communication_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ResetNeighborRequest.communication)
}
inline void ResetNeighborRequest::set_communication(const char* value, size_t size) {
  
  communication_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ResetNeighborRequest.communication)
}
inline ::std::string* ResetNeighborRequest::mutable_communication() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ResetNeighborRequest.communication)
  return communication_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResetNeighborRequest::release_communication() {
  // @@protoc_insertion_point(field_release:gobgpapi.ResetNeighborRequest.communication)
  
  return communication_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResetNeighborRequest::set_allocated_communication(::std::string* communication) {
  if (communication != NULL) {
    
  } else {
    
  }
  communication_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), communication);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ResetNeighborRequest.communication)
}

// -------------------------------------------------------------------

// ResetNeighborResponse

// -------------------------------------------------------------------

// SoftResetNeighborRequest

// string address = 1;
inline void SoftResetNeighborRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftResetNeighborRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.SoftResetNeighborRequest.address)
  return address_.GetNoArena();
}
inline void SoftResetNeighborRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.SoftResetNeighborRequest.address)
}
#if LANG_CXX11
inline void SoftResetNeighborRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.SoftResetNeighborRequest.address)
}
#endif
inline void SoftResetNeighborRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.SoftResetNeighborRequest.address)
}
inline void SoftResetNeighborRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.SoftResetNeighborRequest.address)
}
inline ::std::string* SoftResetNeighborRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.SoftResetNeighborRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftResetNeighborRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.SoftResetNeighborRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftResetNeighborRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.SoftResetNeighborRequest.address)
}

// .gobgpapi.SoftResetNeighborRequest.SoftResetDirection direction = 2;
inline void SoftResetNeighborRequest::clear_direction() {
  direction_ = 0;
}
inline ::gobgpapi::SoftResetNeighborRequest_SoftResetDirection SoftResetNeighborRequest::direction() const {
  // @@protoc_insertion_point(field_get:gobgpapi.SoftResetNeighborRequest.direction)
  return static_cast< ::gobgpapi::SoftResetNeighborRequest_SoftResetDirection >(direction_);
}
inline void SoftResetNeighborRequest::set_direction(::gobgpapi::SoftResetNeighborRequest_SoftResetDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.SoftResetNeighborRequest.direction)
}

// -------------------------------------------------------------------

// SoftResetNeighborResponse

// -------------------------------------------------------------------

// ShutdownNeighborRequest

// string address = 1;
inline void ShutdownNeighborRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShutdownNeighborRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ShutdownNeighborRequest.address)
  return address_.GetNoArena();
}
inline void ShutdownNeighborRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ShutdownNeighborRequest.address)
}
#if LANG_CXX11
inline void ShutdownNeighborRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ShutdownNeighborRequest.address)
}
#endif
inline void ShutdownNeighborRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ShutdownNeighborRequest.address)
}
inline void ShutdownNeighborRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ShutdownNeighborRequest.address)
}
inline ::std::string* ShutdownNeighborRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ShutdownNeighborRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShutdownNeighborRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.ShutdownNeighborRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShutdownNeighborRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ShutdownNeighborRequest.address)
}

// string communication = 2;
inline void ShutdownNeighborRequest::clear_communication() {
  communication_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShutdownNeighborRequest::communication() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ShutdownNeighborRequest.communication)
  return communication_.GetNoArena();
}
inline void ShutdownNeighborRequest::set_communication(const ::std::string& value) {
  
  communication_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ShutdownNeighborRequest.communication)
}
#if LANG_CXX11
inline void ShutdownNeighborRequest::set_communication(::std::string&& value) {
  
  communication_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ShutdownNeighborRequest.communication)
}
#endif
inline void ShutdownNeighborRequest::set_communication(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  communication_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ShutdownNeighborRequest.communication)
}
inline void ShutdownNeighborRequest::set_communication(const char* value, size_t size) {
  
  communication_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ShutdownNeighborRequest.communication)
}
inline ::std::string* ShutdownNeighborRequest::mutable_communication() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ShutdownNeighborRequest.communication)
  return communication_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShutdownNeighborRequest::release_communication() {
  // @@protoc_insertion_point(field_release:gobgpapi.ShutdownNeighborRequest.communication)
  
  return communication_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShutdownNeighborRequest::set_allocated_communication(::std::string* communication) {
  if (communication != NULL) {
    
  } else {
    
  }
  communication_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), communication);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ShutdownNeighborRequest.communication)
}

// -------------------------------------------------------------------

// ShutdownNeighborResponse

// -------------------------------------------------------------------

// EnableNeighborRequest

// string address = 1;
inline void EnableNeighborRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnableNeighborRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableNeighborRequest.address)
  return address_.GetNoArena();
}
inline void EnableNeighborRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableNeighborRequest.address)
}
#if LANG_CXX11
inline void EnableNeighborRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EnableNeighborRequest.address)
}
#endif
inline void EnableNeighborRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableNeighborRequest.address)
}
inline void EnableNeighborRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableNeighborRequest.address)
}
inline ::std::string* EnableNeighborRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableNeighborRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnableNeighborRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EnableNeighborRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnableNeighborRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EnableNeighborRequest.address)
}

// -------------------------------------------------------------------

// EnableNeighborResponse

// -------------------------------------------------------------------

// DisableNeighborRequest

// string address = 1;
inline void DisableNeighborRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisableNeighborRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DisableNeighborRequest.address)
  return address_.GetNoArena();
}
inline void DisableNeighborRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DisableNeighborRequest.address)
}
#if LANG_CXX11
inline void DisableNeighborRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DisableNeighborRequest.address)
}
#endif
inline void DisableNeighborRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DisableNeighborRequest.address)
}
inline void DisableNeighborRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DisableNeighborRequest.address)
}
inline ::std::string* DisableNeighborRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DisableNeighborRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisableNeighborRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.DisableNeighborRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisableNeighborRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DisableNeighborRequest.address)
}

// string communication = 2;
inline void DisableNeighborRequest::clear_communication() {
  communication_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisableNeighborRequest::communication() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DisableNeighborRequest.communication)
  return communication_.GetNoArena();
}
inline void DisableNeighborRequest::set_communication(const ::std::string& value) {
  
  communication_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DisableNeighborRequest.communication)
}
#if LANG_CXX11
inline void DisableNeighborRequest::set_communication(::std::string&& value) {
  
  communication_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DisableNeighborRequest.communication)
}
#endif
inline void DisableNeighborRequest::set_communication(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  communication_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DisableNeighborRequest.communication)
}
inline void DisableNeighborRequest::set_communication(const char* value, size_t size) {
  
  communication_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DisableNeighborRequest.communication)
}
inline ::std::string* DisableNeighborRequest::mutable_communication() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DisableNeighborRequest.communication)
  return communication_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisableNeighborRequest::release_communication() {
  // @@protoc_insertion_point(field_release:gobgpapi.DisableNeighborRequest.communication)
  
  return communication_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisableNeighborRequest::set_allocated_communication(::std::string* communication) {
  if (communication != NULL) {
    
  } else {
    
  }
  communication_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), communication);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DisableNeighborRequest.communication)
}

// -------------------------------------------------------------------

// DisableNeighborResponse

// -------------------------------------------------------------------

// EnableMrtRequest

// int32 dump_type = 1;
inline void EnableMrtRequest::clear_dump_type() {
  dump_type_ = 0;
}
inline ::google::protobuf::int32 EnableMrtRequest::dump_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableMrtRequest.dump_type)
  return dump_type_;
}
inline void EnableMrtRequest::set_dump_type(::google::protobuf::int32 value) {
  
  dump_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EnableMrtRequest.dump_type)
}

// string filename = 2;
inline void EnableMrtRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnableMrtRequest::filename() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableMrtRequest.filename)
  return filename_.GetNoArena();
}
inline void EnableMrtRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableMrtRequest.filename)
}
#if LANG_CXX11
inline void EnableMrtRequest::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EnableMrtRequest.filename)
}
#endif
inline void EnableMrtRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableMrtRequest.filename)
}
inline void EnableMrtRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableMrtRequest.filename)
}
inline ::std::string* EnableMrtRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableMrtRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnableMrtRequest::release_filename() {
  // @@protoc_insertion_point(field_release:gobgpapi.EnableMrtRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnableMrtRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EnableMrtRequest.filename)
}

// uint64 interval = 3;
inline void EnableMrtRequest::clear_interval() {
  interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EnableMrtRequest::interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableMrtRequest.interval)
  return interval_;
}
inline void EnableMrtRequest::set_interval(::google::protobuf::uint64 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EnableMrtRequest.interval)
}

// -------------------------------------------------------------------

// EnableMrtResponse

// -------------------------------------------------------------------

// DisableMrtRequest

// -------------------------------------------------------------------

// DisableMrtResponse

// -------------------------------------------------------------------

// InjectMrtRequest

// .gobgpapi.Resource resource = 1;
inline void InjectMrtRequest::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource InjectMrtRequest::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.InjectMrtRequest.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void InjectMrtRequest::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.InjectMrtRequest.resource)
}

// string vrf_id = 2;
inline void InjectMrtRequest::clear_vrf_id() {
  vrf_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InjectMrtRequest::vrf_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.InjectMrtRequest.vrf_id)
  return vrf_id_.GetNoArena();
}
inline void InjectMrtRequest::set_vrf_id(const ::std::string& value) {
  
  vrf_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.InjectMrtRequest.vrf_id)
}
#if LANG_CXX11
inline void InjectMrtRequest::set_vrf_id(::std::string&& value) {
  
  vrf_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.InjectMrtRequest.vrf_id)
}
#endif
inline void InjectMrtRequest::set_vrf_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vrf_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.InjectMrtRequest.vrf_id)
}
inline void InjectMrtRequest::set_vrf_id(const char* value, size_t size) {
  
  vrf_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.InjectMrtRequest.vrf_id)
}
inline ::std::string* InjectMrtRequest::mutable_vrf_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.InjectMrtRequest.vrf_id)
  return vrf_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InjectMrtRequest::release_vrf_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.InjectMrtRequest.vrf_id)
  
  return vrf_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InjectMrtRequest::set_allocated_vrf_id(::std::string* vrf_id) {
  if (vrf_id != NULL) {
    
  } else {
    
  }
  vrf_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrf_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.InjectMrtRequest.vrf_id)
}

// repeated .gobgpapi.Path paths = 3;
inline int InjectMrtRequest::paths_size() const {
  return paths_.size();
}
inline void InjectMrtRequest::clear_paths() {
  paths_.Clear();
}
inline const ::gobgpapi::Path& InjectMrtRequest::paths(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.InjectMrtRequest.paths)
  return paths_.Get(index);
}
inline ::gobgpapi::Path* InjectMrtRequest::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.InjectMrtRequest.paths)
  return paths_.Mutable(index);
}
inline ::gobgpapi::Path* InjectMrtRequest::add_paths() {
  // @@protoc_insertion_point(field_add:gobgpapi.InjectMrtRequest.paths)
  return paths_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
InjectMrtRequest::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.InjectMrtRequest.paths)
  return &paths_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
InjectMrtRequest::paths() const {
  // @@protoc_insertion_point(field_list:gobgpapi.InjectMrtRequest.paths)
  return paths_;
}

// -------------------------------------------------------------------

// InjectMrtResponse

// -------------------------------------------------------------------

// AddBmpRequest

// string address = 1;
inline void AddBmpRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddBmpRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddBmpRequest.address)
  return address_.GetNoArena();
}
inline void AddBmpRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddBmpRequest.address)
}
#if LANG_CXX11
inline void AddBmpRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddBmpRequest.address)
}
#endif
inline void AddBmpRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddBmpRequest.address)
}
inline void AddBmpRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddBmpRequest.address)
}
inline ::std::string* AddBmpRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddBmpRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddBmpRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddBmpRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddBmpRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddBmpRequest.address)
}

// uint32 port = 2;
inline void AddBmpRequest::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 AddBmpRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddBmpRequest.port)
  return port_;
}
inline void AddBmpRequest::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddBmpRequest.port)
}

// .gobgpapi.AddBmpRequest.MonitoringPolicy type = 3;
inline void AddBmpRequest::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::AddBmpRequest_MonitoringPolicy AddBmpRequest::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddBmpRequest.type)
  return static_cast< ::gobgpapi::AddBmpRequest_MonitoringPolicy >(type_);
}
inline void AddBmpRequest::set_type(::gobgpapi::AddBmpRequest_MonitoringPolicy value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddBmpRequest.type)
}

// -------------------------------------------------------------------

// AddBmpResponse

// -------------------------------------------------------------------

// DeleteBmpRequest

// string address = 1;
inline void DeleteBmpRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteBmpRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteBmpRequest.address)
  return address_.GetNoArena();
}
inline void DeleteBmpRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteBmpRequest.address)
}
#if LANG_CXX11
inline void DeleteBmpRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeleteBmpRequest.address)
}
#endif
inline void DeleteBmpRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeleteBmpRequest.address)
}
inline void DeleteBmpRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeleteBmpRequest.address)
}
inline ::std::string* DeleteBmpRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteBmpRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteBmpRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteBmpRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBmpRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteBmpRequest.address)
}

// uint32 port = 2;
inline void DeleteBmpRequest::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 DeleteBmpRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteBmpRequest.port)
  return port_;
}
inline void DeleteBmpRequest::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteBmpRequest.port)
}

// -------------------------------------------------------------------

// DeleteBmpResponse

// -------------------------------------------------------------------

// MonitorRibRequest

// .gobgpapi.Table table = 1;
inline bool MonitorRibRequest::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
inline void MonitorRibRequest::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
}
inline const ::gobgpapi::Table& MonitorRibRequest::table() const {
  const ::gobgpapi::Table* p = table_;
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorRibRequest.table)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Table*>(
      &::gobgpapi::_Table_default_instance_);
}
inline ::gobgpapi::Table* MonitorRibRequest::release_table() {
  // @@protoc_insertion_point(field_release:gobgpapi.MonitorRibRequest.table)
  
  ::gobgpapi::Table* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::gobgpapi::Table* MonitorRibRequest::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::gobgpapi::Table;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.MonitorRibRequest.table)
  return table_;
}
inline void MonitorRibRequest::set_allocated_table(::gobgpapi::Table* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_;
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MonitorRibRequest.table)
}

// bool current = 2;
inline void MonitorRibRequest::clear_current() {
  current_ = false;
}
inline bool MonitorRibRequest::current() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorRibRequest.current)
  return current_;
}
inline void MonitorRibRequest::set_current(bool value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MonitorRibRequest.current)
}

// -------------------------------------------------------------------

// RPKIConf

// string address = 1;
inline void RPKIConf::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPKIConf::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIConf.address)
  return address_.GetNoArena();
}
inline void RPKIConf::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIConf.address)
}
#if LANG_CXX11
inline void RPKIConf::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.RPKIConf.address)
}
#endif
inline void RPKIConf::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RPKIConf.address)
}
inline void RPKIConf::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RPKIConf.address)
}
inline ::std::string* RPKIConf::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIConf.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPKIConf::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.RPKIConf.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPKIConf::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKIConf.address)
}

// string remote_port = 2;
inline void RPKIConf::clear_remote_port() {
  remote_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPKIConf::remote_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIConf.remote_port)
  return remote_port_.GetNoArena();
}
inline void RPKIConf::set_remote_port(const ::std::string& value) {
  
  remote_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIConf.remote_port)
}
#if LANG_CXX11
inline void RPKIConf::set_remote_port(::std::string&& value) {
  
  remote_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.RPKIConf.remote_port)
}
#endif
inline void RPKIConf::set_remote_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RPKIConf.remote_port)
}
inline void RPKIConf::set_remote_port(const char* value, size_t size) {
  
  remote_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RPKIConf.remote_port)
}
inline ::std::string* RPKIConf::mutable_remote_port() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIConf.remote_port)
  return remote_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPKIConf::release_remote_port() {
  // @@protoc_insertion_point(field_release:gobgpapi.RPKIConf.remote_port)
  
  return remote_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPKIConf::set_allocated_remote_port(::std::string* remote_port) {
  if (remote_port != NULL) {
    
  } else {
    
  }
  remote_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_port);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKIConf.remote_port)
}

// -------------------------------------------------------------------

// RPKIState

// int64 uptime = 1;
inline void RPKIState::clear_uptime() {
  uptime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::uptime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.uptime)
  return uptime_;
}
inline void RPKIState::set_uptime(::google::protobuf::int64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.uptime)
}

// int64 downtime = 2;
inline void RPKIState::clear_downtime() {
  downtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::downtime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.downtime)
  return downtime_;
}
inline void RPKIState::set_downtime(::google::protobuf::int64 value) {
  
  downtime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.downtime)
}

// bool up = 3;
inline void RPKIState::clear_up() {
  up_ = false;
}
inline bool RPKIState::up() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.up)
  return up_;
}
inline void RPKIState::set_up(bool value) {
  
  up_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.up)
}

// uint32 record_ipv4 = 4;
inline void RPKIState::clear_record_ipv4() {
  record_ipv4_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::record_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.record_ipv4)
  return record_ipv4_;
}
inline void RPKIState::set_record_ipv4(::google::protobuf::uint32 value) {
  
  record_ipv4_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.record_ipv4)
}

// uint32 record_ipv6 = 5;
inline void RPKIState::clear_record_ipv6() {
  record_ipv6_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::record_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.record_ipv6)
  return record_ipv6_;
}
inline void RPKIState::set_record_ipv6(::google::protobuf::uint32 value) {
  
  record_ipv6_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.record_ipv6)
}

// uint32 prefix_ipv4 = 6;
inline void RPKIState::clear_prefix_ipv4() {
  prefix_ipv4_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::prefix_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.prefix_ipv4)
  return prefix_ipv4_;
}
inline void RPKIState::set_prefix_ipv4(::google::protobuf::uint32 value) {
  
  prefix_ipv4_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.prefix_ipv4)
}

// uint32 prefix_ipv6 = 7;
inline void RPKIState::clear_prefix_ipv6() {
  prefix_ipv6_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::prefix_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.prefix_ipv6)
  return prefix_ipv6_;
}
inline void RPKIState::set_prefix_ipv6(::google::protobuf::uint32 value) {
  
  prefix_ipv6_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.prefix_ipv6)
}

// uint32 serial = 8;
inline void RPKIState::clear_serial() {
  serial_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::serial() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial)
  return serial_;
}
inline void RPKIState::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial)
}

// int64 received_ipv4 = 9;
inline void RPKIState::clear_received_ipv4() {
  received_ipv4_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::received_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.received_ipv4)
  return received_ipv4_;
}
inline void RPKIState::set_received_ipv4(::google::protobuf::int64 value) {
  
  received_ipv4_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.received_ipv4)
}

// int64 received_ipv6 = 10;
inline void RPKIState::clear_received_ipv6() {
  received_ipv6_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::received_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.received_ipv6)
  return received_ipv6_;
}
inline void RPKIState::set_received_ipv6(::google::protobuf::int64 value) {
  
  received_ipv6_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.received_ipv6)
}

// int64 serial_notify = 11;
inline void RPKIState::clear_serial_notify() {
  serial_notify_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::serial_notify() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial_notify)
  return serial_notify_;
}
inline void RPKIState::set_serial_notify(::google::protobuf::int64 value) {
  
  serial_notify_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial_notify)
}

// int64 cache_reset = 12;
inline void RPKIState::clear_cache_reset() {
  cache_reset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::cache_reset() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.cache_reset)
  return cache_reset_;
}
inline void RPKIState::set_cache_reset(::google::protobuf::int64 value) {
  
  cache_reset_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.cache_reset)
}

// int64 cache_response = 13;
inline void RPKIState::clear_cache_response() {
  cache_response_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::cache_response() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.cache_response)
  return cache_response_;
}
inline void RPKIState::set_cache_response(::google::protobuf::int64 value) {
  
  cache_response_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.cache_response)
}

// int64 end_of_data = 14;
inline void RPKIState::clear_end_of_data() {
  end_of_data_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::end_of_data() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.end_of_data)
  return end_of_data_;
}
inline void RPKIState::set_end_of_data(::google::protobuf::int64 value) {
  
  end_of_data_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.end_of_data)
}

// int64 error = 15;
inline void RPKIState::clear_error() {
  error_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::error() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.error)
  return error_;
}
inline void RPKIState::set_error(::google::protobuf::int64 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.error)
}

// int64 serial_query = 16;
inline void RPKIState::clear_serial_query() {
  serial_query_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::serial_query() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial_query)
  return serial_query_;
}
inline void RPKIState::set_serial_query(::google::protobuf::int64 value) {
  
  serial_query_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial_query)
}

// int64 reset_query = 17;
inline void RPKIState::clear_reset_query() {
  reset_query_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::reset_query() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.reset_query)
  return reset_query_;
}
inline void RPKIState::set_reset_query(::google::protobuf::int64 value) {
  
  reset_query_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.reset_query)
}

// -------------------------------------------------------------------

// Rpki

// .gobgpapi.RPKIConf conf = 1;
inline bool Rpki::has_conf() const {
  return this != internal_default_instance() && conf_ != NULL;
}
inline void Rpki::clear_conf() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) {
    delete conf_;
  }
  conf_ = NULL;
}
inline const ::gobgpapi::RPKIConf& Rpki::conf() const {
  const ::gobgpapi::RPKIConf* p = conf_;
  // @@protoc_insertion_point(field_get:gobgpapi.Rpki.conf)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RPKIConf*>(
      &::gobgpapi::_RPKIConf_default_instance_);
}
inline ::gobgpapi::RPKIConf* Rpki::release_conf() {
  // @@protoc_insertion_point(field_release:gobgpapi.Rpki.conf)
  
  ::gobgpapi::RPKIConf* temp = conf_;
  conf_ = NULL;
  return temp;
}
inline ::gobgpapi::RPKIConf* Rpki::mutable_conf() {
  
  if (conf_ == NULL) {
    conf_ = new ::gobgpapi::RPKIConf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Rpki.conf)
  return conf_;
}
inline void Rpki::set_allocated_conf(::gobgpapi::RPKIConf* conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conf_;
  }
  if (conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Rpki.conf)
}

// .gobgpapi.RPKIState state = 2;
inline bool Rpki::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Rpki::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::RPKIState& Rpki::state() const {
  const ::gobgpapi::RPKIState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.Rpki.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RPKIState*>(
      &::gobgpapi::_RPKIState_default_instance_);
}
inline ::gobgpapi::RPKIState* Rpki::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.Rpki.state)
  
  ::gobgpapi::RPKIState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::RPKIState* Rpki::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::RPKIState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Rpki.state)
  return state_;
}
inline void Rpki::set_allocated_state(::gobgpapi::RPKIState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Rpki.state)
}

// -------------------------------------------------------------------

// GetRpkiRequest

// uint32 family = 1;
inline void GetRpkiRequest::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 GetRpkiRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetRpkiRequest.family)
  return family_;
}
inline void GetRpkiRequest::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GetRpkiRequest.family)
}

// -------------------------------------------------------------------

// GetRpkiResponse

// repeated .gobgpapi.Rpki servers = 1;
inline int GetRpkiResponse::servers_size() const {
  return servers_.size();
}
inline void GetRpkiResponse::clear_servers() {
  servers_.Clear();
}
inline const ::gobgpapi::Rpki& GetRpkiResponse::servers(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetRpkiResponse.servers)
  return servers_.Get(index);
}
inline ::gobgpapi::Rpki* GetRpkiResponse::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetRpkiResponse.servers)
  return servers_.Mutable(index);
}
inline ::gobgpapi::Rpki* GetRpkiResponse::add_servers() {
  // @@protoc_insertion_point(field_add:gobgpapi.GetRpkiResponse.servers)
  return servers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Rpki >*
GetRpkiResponse::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.GetRpkiResponse.servers)
  return &servers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Rpki >&
GetRpkiResponse::servers() const {
  // @@protoc_insertion_point(field_list:gobgpapi.GetRpkiResponse.servers)
  return servers_;
}

// -------------------------------------------------------------------

// AddRpkiRequest

// string address = 1;
inline void AddRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddRpkiRequest.address)
  return address_.GetNoArena();
}
inline void AddRpkiRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddRpkiRequest.address)
}
#if LANG_CXX11
inline void AddRpkiRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddRpkiRequest.address)
}
#endif
inline void AddRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddRpkiRequest.address)
}
inline void AddRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddRpkiRequest.address)
}
inline ::std::string* AddRpkiRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddRpkiRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddRpkiRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddRpkiRequest.address)
}

// uint32 port = 2;
inline void AddRpkiRequest::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 AddRpkiRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddRpkiRequest.port)
  return port_;
}
inline void AddRpkiRequest::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddRpkiRequest.port)
}

// int64 lifetime = 3;
inline void AddRpkiRequest::clear_lifetime() {
  lifetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AddRpkiRequest::lifetime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddRpkiRequest.lifetime)
  return lifetime_;
}
inline void AddRpkiRequest::set_lifetime(::google::protobuf::int64 value) {
  
  lifetime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddRpkiRequest.lifetime)
}

// -------------------------------------------------------------------

// AddRpkiResponse

// -------------------------------------------------------------------

// DeleteRpkiRequest

// string address = 1;
inline void DeleteRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteRpkiRequest.address)
  return address_.GetNoArena();
}
inline void DeleteRpkiRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteRpkiRequest.address)
}
#if LANG_CXX11
inline void DeleteRpkiRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeleteRpkiRequest.address)
}
#endif
inline void DeleteRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeleteRpkiRequest.address)
}
inline void DeleteRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeleteRpkiRequest.address)
}
inline ::std::string* DeleteRpkiRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteRpkiRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRpkiRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteRpkiRequest.address)
}

// uint32 port = 2;
inline void DeleteRpkiRequest::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 DeleteRpkiRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteRpkiRequest.port)
  return port_;
}
inline void DeleteRpkiRequest::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteRpkiRequest.port)
}

// -------------------------------------------------------------------

// DeleteRpkiResponse

// -------------------------------------------------------------------

// EnableRpkiRequest

// string address = 1;
inline void EnableRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnableRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableRpkiRequest.address)
  return address_.GetNoArena();
}
inline void EnableRpkiRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableRpkiRequest.address)
}
#if LANG_CXX11
inline void EnableRpkiRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EnableRpkiRequest.address)
}
#endif
inline void EnableRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableRpkiRequest.address)
}
inline void EnableRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableRpkiRequest.address)
}
inline ::std::string* EnableRpkiRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableRpkiRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnableRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EnableRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnableRpkiRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EnableRpkiRequest.address)
}

// -------------------------------------------------------------------

// EnableRpkiResponse

// -------------------------------------------------------------------

// DisableRpkiRequest

// string address = 1;
inline void DisableRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisableRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DisableRpkiRequest.address)
  return address_.GetNoArena();
}
inline void DisableRpkiRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DisableRpkiRequest.address)
}
#if LANG_CXX11
inline void DisableRpkiRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DisableRpkiRequest.address)
}
#endif
inline void DisableRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DisableRpkiRequest.address)
}
inline void DisableRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DisableRpkiRequest.address)
}
inline ::std::string* DisableRpkiRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DisableRpkiRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisableRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.DisableRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisableRpkiRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DisableRpkiRequest.address)
}

// -------------------------------------------------------------------

// DisableRpkiResponse

// -------------------------------------------------------------------

// ResetRpkiRequest

// string address = 1;
inline void ResetRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResetRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetRpkiRequest.address)
  return address_.GetNoArena();
}
inline void ResetRpkiRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetRpkiRequest.address)
}
#if LANG_CXX11
inline void ResetRpkiRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ResetRpkiRequest.address)
}
#endif
inline void ResetRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ResetRpkiRequest.address)
}
inline void ResetRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ResetRpkiRequest.address)
}
inline ::std::string* ResetRpkiRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ResetRpkiRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResetRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.ResetRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResetRpkiRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ResetRpkiRequest.address)
}

// -------------------------------------------------------------------

// ResetRpkiResponse

// -------------------------------------------------------------------

// SoftResetRpkiRequest

// string address = 1;
inline void SoftResetRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftResetRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.SoftResetRpkiRequest.address)
  return address_.GetNoArena();
}
inline void SoftResetRpkiRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.SoftResetRpkiRequest.address)
}
#if LANG_CXX11
inline void SoftResetRpkiRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.SoftResetRpkiRequest.address)
}
#endif
inline void SoftResetRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.SoftResetRpkiRequest.address)
}
inline void SoftResetRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.SoftResetRpkiRequest.address)
}
inline ::std::string* SoftResetRpkiRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.SoftResetRpkiRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftResetRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.SoftResetRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftResetRpkiRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.SoftResetRpkiRequest.address)
}

// -------------------------------------------------------------------

// SoftResetRpkiResponse

// -------------------------------------------------------------------

// EnableZebraRequest

// string url = 1;
inline void EnableZebraRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnableZebraRequest::url() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.url)
  return url_.GetNoArena();
}
inline void EnableZebraRequest::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.url)
}
#if LANG_CXX11
inline void EnableZebraRequest::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EnableZebraRequest.url)
}
#endif
inline void EnableZebraRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableZebraRequest.url)
}
inline void EnableZebraRequest::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableZebraRequest.url)
}
inline ::std::string* EnableZebraRequest::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableZebraRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnableZebraRequest::release_url() {
  // @@protoc_insertion_point(field_release:gobgpapi.EnableZebraRequest.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnableZebraRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EnableZebraRequest.url)
}

// repeated string route_types = 2;
inline int EnableZebraRequest::route_types_size() const {
  return route_types_.size();
}
inline void EnableZebraRequest::clear_route_types() {
  route_types_.Clear();
}
inline const ::std::string& EnableZebraRequest::route_types(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.route_types)
  return route_types_.Get(index);
}
inline ::std::string* EnableZebraRequest::mutable_route_types(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableZebraRequest.route_types)
  return route_types_.Mutable(index);
}
inline void EnableZebraRequest::set_route_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.route_types)
  route_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EnableZebraRequest::set_route_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.route_types)
  route_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EnableZebraRequest::set_route_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  route_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableZebraRequest.route_types)
}
inline void EnableZebraRequest::set_route_types(int index, const char* value, size_t size) {
  route_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableZebraRequest.route_types)
}
inline ::std::string* EnableZebraRequest::add_route_types() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.EnableZebraRequest.route_types)
  return route_types_.Add();
}
inline void EnableZebraRequest::add_route_types(const ::std::string& value) {
  route_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.EnableZebraRequest.route_types)
}
#if LANG_CXX11
inline void EnableZebraRequest::add_route_types(::std::string&& value) {
  route_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.EnableZebraRequest.route_types)
}
#endif
inline void EnableZebraRequest::add_route_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  route_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.EnableZebraRequest.route_types)
}
inline void EnableZebraRequest::add_route_types(const char* value, size_t size) {
  route_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.EnableZebraRequest.route_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EnableZebraRequest::route_types() const {
  // @@protoc_insertion_point(field_list:gobgpapi.EnableZebraRequest.route_types)
  return route_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EnableZebraRequest::mutable_route_types() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.EnableZebraRequest.route_types)
  return &route_types_;
}

// uint32 version = 3;
inline void EnableZebraRequest::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 EnableZebraRequest::version() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.version)
  return version_;
}
inline void EnableZebraRequest::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.version)
}

// bool nexthop_trigger_enable = 4;
inline void EnableZebraRequest::clear_nexthop_trigger_enable() {
  nexthop_trigger_enable_ = false;
}
inline bool EnableZebraRequest::nexthop_trigger_enable() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.nexthop_trigger_enable)
  return nexthop_trigger_enable_;
}
inline void EnableZebraRequest::set_nexthop_trigger_enable(bool value) {
  
  nexthop_trigger_enable_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.nexthop_trigger_enable)
}

// uint32 nexthop_trigger_delay = 5;
inline void EnableZebraRequest::clear_nexthop_trigger_delay() {
  nexthop_trigger_delay_ = 0u;
}
inline ::google::protobuf::uint32 EnableZebraRequest::nexthop_trigger_delay() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.nexthop_trigger_delay)
  return nexthop_trigger_delay_;
}
inline void EnableZebraRequest::set_nexthop_trigger_delay(::google::protobuf::uint32 value) {
  
  nexthop_trigger_delay_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.nexthop_trigger_delay)
}

// -------------------------------------------------------------------

// EnableZebraResponse

// -------------------------------------------------------------------

// GetVrfRequest

// -------------------------------------------------------------------

// GetVrfResponse

// repeated .gobgpapi.Vrf vrfs = 1;
inline int GetVrfResponse::vrfs_size() const {
  return vrfs_.size();
}
inline void GetVrfResponse::clear_vrfs() {
  vrfs_.Clear();
}
inline const ::gobgpapi::Vrf& GetVrfResponse::vrfs(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetVrfResponse.vrfs)
  return vrfs_.Get(index);
}
inline ::gobgpapi::Vrf* GetVrfResponse::mutable_vrfs(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetVrfResponse.vrfs)
  return vrfs_.Mutable(index);
}
inline ::gobgpapi::Vrf* GetVrfResponse::add_vrfs() {
  // @@protoc_insertion_point(field_add:gobgpapi.GetVrfResponse.vrfs)
  return vrfs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Vrf >*
GetVrfResponse::mutable_vrfs() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.GetVrfResponse.vrfs)
  return &vrfs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Vrf >&
GetVrfResponse::vrfs() const {
  // @@protoc_insertion_point(field_list:gobgpapi.GetVrfResponse.vrfs)
  return vrfs_;
}

// -------------------------------------------------------------------

// AddVrfRequest

// .gobgpapi.Vrf vrf = 1;
inline bool AddVrfRequest::has_vrf() const {
  return this != internal_default_instance() && vrf_ != NULL;
}
inline void AddVrfRequest::clear_vrf() {
  if (GetArenaNoVirtual() == NULL && vrf_ != NULL) {
    delete vrf_;
  }
  vrf_ = NULL;
}
inline const ::gobgpapi::Vrf& AddVrfRequest::vrf() const {
  const ::gobgpapi::Vrf* p = vrf_;
  // @@protoc_insertion_point(field_get:gobgpapi.AddVrfRequest.vrf)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Vrf*>(
      &::gobgpapi::_Vrf_default_instance_);
}
inline ::gobgpapi::Vrf* AddVrfRequest::release_vrf() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddVrfRequest.vrf)
  
  ::gobgpapi::Vrf* temp = vrf_;
  vrf_ = NULL;
  return temp;
}
inline ::gobgpapi::Vrf* AddVrfRequest::mutable_vrf() {
  
  if (vrf_ == NULL) {
    vrf_ = new ::gobgpapi::Vrf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddVrfRequest.vrf)
  return vrf_;
}
inline void AddVrfRequest::set_allocated_vrf(::gobgpapi::Vrf* vrf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vrf_;
  }
  if (vrf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vrf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vrf, submessage_arena);
    }
    
  } else {
    
  }
  vrf_ = vrf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddVrfRequest.vrf)
}

// -------------------------------------------------------------------

// AddVrfResponse

// -------------------------------------------------------------------

// DeleteVrfRequest

// .gobgpapi.Vrf vrf = 1;
inline bool DeleteVrfRequest::has_vrf() const {
  return this != internal_default_instance() && vrf_ != NULL;
}
inline void DeleteVrfRequest::clear_vrf() {
  if (GetArenaNoVirtual() == NULL && vrf_ != NULL) {
    delete vrf_;
  }
  vrf_ = NULL;
}
inline const ::gobgpapi::Vrf& DeleteVrfRequest::vrf() const {
  const ::gobgpapi::Vrf* p = vrf_;
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteVrfRequest.vrf)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Vrf*>(
      &::gobgpapi::_Vrf_default_instance_);
}
inline ::gobgpapi::Vrf* DeleteVrfRequest::release_vrf() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteVrfRequest.vrf)
  
  ::gobgpapi::Vrf* temp = vrf_;
  vrf_ = NULL;
  return temp;
}
inline ::gobgpapi::Vrf* DeleteVrfRequest::mutable_vrf() {
  
  if (vrf_ == NULL) {
    vrf_ = new ::gobgpapi::Vrf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteVrfRequest.vrf)
  return vrf_;
}
inline void DeleteVrfRequest::set_allocated_vrf(::gobgpapi::Vrf* vrf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vrf_;
  }
  if (vrf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vrf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vrf, submessage_arena);
    }
    
  } else {
    
  }
  vrf_ = vrf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteVrfRequest.vrf)
}

// -------------------------------------------------------------------

// DeleteVrfResponse

// -------------------------------------------------------------------

// GetDefinedSetRequest

// .gobgpapi.DefinedType type = 1;
inline void GetDefinedSetRequest::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::DefinedType GetDefinedSetRequest::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetDefinedSetRequest.type)
  return static_cast< ::gobgpapi::DefinedType >(type_);
}
inline void GetDefinedSetRequest::set_type(::gobgpapi::DefinedType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GetDefinedSetRequest.type)
}

// string name = 2;
inline void GetDefinedSetRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDefinedSetRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetDefinedSetRequest.name)
  return name_.GetNoArena();
}
inline void GetDefinedSetRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.GetDefinedSetRequest.name)
}
#if LANG_CXX11
inline void GetDefinedSetRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.GetDefinedSetRequest.name)
}
#endif
inline void GetDefinedSetRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.GetDefinedSetRequest.name)
}
inline void GetDefinedSetRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.GetDefinedSetRequest.name)
}
inline ::std::string* GetDefinedSetRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetDefinedSetRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDefinedSetRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetDefinedSetRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDefinedSetRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetDefinedSetRequest.name)
}

// -------------------------------------------------------------------

// GetDefinedSetResponse

// repeated .gobgpapi.DefinedSet sets = 1;
inline int GetDefinedSetResponse::sets_size() const {
  return sets_.size();
}
inline void GetDefinedSetResponse::clear_sets() {
  sets_.Clear();
}
inline const ::gobgpapi::DefinedSet& GetDefinedSetResponse::sets(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetDefinedSetResponse.sets)
  return sets_.Get(index);
}
inline ::gobgpapi::DefinedSet* GetDefinedSetResponse::mutable_sets(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetDefinedSetResponse.sets)
  return sets_.Mutable(index);
}
inline ::gobgpapi::DefinedSet* GetDefinedSetResponse::add_sets() {
  // @@protoc_insertion_point(field_add:gobgpapi.GetDefinedSetResponse.sets)
  return sets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::DefinedSet >*
GetDefinedSetResponse::mutable_sets() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.GetDefinedSetResponse.sets)
  return &sets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::DefinedSet >&
GetDefinedSetResponse::sets() const {
  // @@protoc_insertion_point(field_list:gobgpapi.GetDefinedSetResponse.sets)
  return sets_;
}

// -------------------------------------------------------------------

// AddDefinedSetRequest

// .gobgpapi.DefinedSet set = 1;
inline bool AddDefinedSetRequest::has_set() const {
  return this != internal_default_instance() && set_ != NULL;
}
inline void AddDefinedSetRequest::clear_set() {
  if (GetArenaNoVirtual() == NULL && set_ != NULL) {
    delete set_;
  }
  set_ = NULL;
}
inline const ::gobgpapi::DefinedSet& AddDefinedSetRequest::set() const {
  const ::gobgpapi::DefinedSet* p = set_;
  // @@protoc_insertion_point(field_get:gobgpapi.AddDefinedSetRequest.set)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::DefinedSet*>(
      &::gobgpapi::_DefinedSet_default_instance_);
}
inline ::gobgpapi::DefinedSet* AddDefinedSetRequest::release_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddDefinedSetRequest.set)
  
  ::gobgpapi::DefinedSet* temp = set_;
  set_ = NULL;
  return temp;
}
inline ::gobgpapi::DefinedSet* AddDefinedSetRequest::mutable_set() {
  
  if (set_ == NULL) {
    set_ = new ::gobgpapi::DefinedSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddDefinedSetRequest.set)
  return set_;
}
inline void AddDefinedSetRequest::set_allocated_set(::gobgpapi::DefinedSet* set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete set_;
  }
  if (set) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    
  } else {
    
  }
  set_ = set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddDefinedSetRequest.set)
}

// -------------------------------------------------------------------

// AddDefinedSetResponse

// -------------------------------------------------------------------

// DeleteDefinedSetRequest

// .gobgpapi.DefinedSet set = 1;
inline bool DeleteDefinedSetRequest::has_set() const {
  return this != internal_default_instance() && set_ != NULL;
}
inline void DeleteDefinedSetRequest::clear_set() {
  if (GetArenaNoVirtual() == NULL && set_ != NULL) {
    delete set_;
  }
  set_ = NULL;
}
inline const ::gobgpapi::DefinedSet& DeleteDefinedSetRequest::set() const {
  const ::gobgpapi::DefinedSet* p = set_;
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteDefinedSetRequest.set)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::DefinedSet*>(
      &::gobgpapi::_DefinedSet_default_instance_);
}
inline ::gobgpapi::DefinedSet* DeleteDefinedSetRequest::release_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteDefinedSetRequest.set)
  
  ::gobgpapi::DefinedSet* temp = set_;
  set_ = NULL;
  return temp;
}
inline ::gobgpapi::DefinedSet* DeleteDefinedSetRequest::mutable_set() {
  
  if (set_ == NULL) {
    set_ = new ::gobgpapi::DefinedSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteDefinedSetRequest.set)
  return set_;
}
inline void DeleteDefinedSetRequest::set_allocated_set(::gobgpapi::DefinedSet* set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete set_;
  }
  if (set) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    
  } else {
    
  }
  set_ = set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteDefinedSetRequest.set)
}

// bool all = 2;
inline void DeleteDefinedSetRequest::clear_all() {
  all_ = false;
}
inline bool DeleteDefinedSetRequest::all() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteDefinedSetRequest.all)
  return all_;
}
inline void DeleteDefinedSetRequest::set_all(bool value) {
  
  all_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteDefinedSetRequest.all)
}

// -------------------------------------------------------------------

// DeleteDefinedSetResponse

// -------------------------------------------------------------------

// ReplaceDefinedSetRequest

// .gobgpapi.DefinedSet set = 1;
inline bool ReplaceDefinedSetRequest::has_set() const {
  return this != internal_default_instance() && set_ != NULL;
}
inline void ReplaceDefinedSetRequest::clear_set() {
  if (GetArenaNoVirtual() == NULL && set_ != NULL) {
    delete set_;
  }
  set_ = NULL;
}
inline const ::gobgpapi::DefinedSet& ReplaceDefinedSetRequest::set() const {
  const ::gobgpapi::DefinedSet* p = set_;
  // @@protoc_insertion_point(field_get:gobgpapi.ReplaceDefinedSetRequest.set)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::DefinedSet*>(
      &::gobgpapi::_DefinedSet_default_instance_);
}
inline ::gobgpapi::DefinedSet* ReplaceDefinedSetRequest::release_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.ReplaceDefinedSetRequest.set)
  
  ::gobgpapi::DefinedSet* temp = set_;
  set_ = NULL;
  return temp;
}
inline ::gobgpapi::DefinedSet* ReplaceDefinedSetRequest::mutable_set() {
  
  if (set_ == NULL) {
    set_ = new ::gobgpapi::DefinedSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ReplaceDefinedSetRequest.set)
  return set_;
}
inline void ReplaceDefinedSetRequest::set_allocated_set(::gobgpapi::DefinedSet* set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete set_;
  }
  if (set) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    
  } else {
    
  }
  set_ = set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ReplaceDefinedSetRequest.set)
}

// -------------------------------------------------------------------

// ReplaceDefinedSetResponse

// -------------------------------------------------------------------

// GetStatementRequest

// -------------------------------------------------------------------

// GetStatementResponse

// repeated .gobgpapi.Statement statements = 1;
inline int GetStatementResponse::statements_size() const {
  return statements_.size();
}
inline void GetStatementResponse::clear_statements() {
  statements_.Clear();
}
inline const ::gobgpapi::Statement& GetStatementResponse::statements(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetStatementResponse.statements)
  return statements_.Get(index);
}
inline ::gobgpapi::Statement* GetStatementResponse::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetStatementResponse.statements)
  return statements_.Mutable(index);
}
inline ::gobgpapi::Statement* GetStatementResponse::add_statements() {
  // @@protoc_insertion_point(field_add:gobgpapi.GetStatementResponse.statements)
  return statements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >*
GetStatementResponse::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.GetStatementResponse.statements)
  return &statements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >&
GetStatementResponse::statements() const {
  // @@protoc_insertion_point(field_list:gobgpapi.GetStatementResponse.statements)
  return statements_;
}

// -------------------------------------------------------------------

// AddStatementRequest

// .gobgpapi.Statement statement = 1;
inline bool AddStatementRequest::has_statement() const {
  return this != internal_default_instance() && statement_ != NULL;
}
inline void AddStatementRequest::clear_statement() {
  if (GetArenaNoVirtual() == NULL && statement_ != NULL) {
    delete statement_;
  }
  statement_ = NULL;
}
inline const ::gobgpapi::Statement& AddStatementRequest::statement() const {
  const ::gobgpapi::Statement* p = statement_;
  // @@protoc_insertion_point(field_get:gobgpapi.AddStatementRequest.statement)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Statement*>(
      &::gobgpapi::_Statement_default_instance_);
}
inline ::gobgpapi::Statement* AddStatementRequest::release_statement() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddStatementRequest.statement)
  
  ::gobgpapi::Statement* temp = statement_;
  statement_ = NULL;
  return temp;
}
inline ::gobgpapi::Statement* AddStatementRequest::mutable_statement() {
  
  if (statement_ == NULL) {
    statement_ = new ::gobgpapi::Statement;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddStatementRequest.statement)
  return statement_;
}
inline void AddStatementRequest::set_allocated_statement(::gobgpapi::Statement* statement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete statement_;
  }
  if (statement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      statement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statement, submessage_arena);
    }
    
  } else {
    
  }
  statement_ = statement;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddStatementRequest.statement)
}

// -------------------------------------------------------------------

// AddStatementResponse

// -------------------------------------------------------------------

// DeleteStatementRequest

// .gobgpapi.Statement statement = 1;
inline bool DeleteStatementRequest::has_statement() const {
  return this != internal_default_instance() && statement_ != NULL;
}
inline void DeleteStatementRequest::clear_statement() {
  if (GetArenaNoVirtual() == NULL && statement_ != NULL) {
    delete statement_;
  }
  statement_ = NULL;
}
inline const ::gobgpapi::Statement& DeleteStatementRequest::statement() const {
  const ::gobgpapi::Statement* p = statement_;
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteStatementRequest.statement)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Statement*>(
      &::gobgpapi::_Statement_default_instance_);
}
inline ::gobgpapi::Statement* DeleteStatementRequest::release_statement() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteStatementRequest.statement)
  
  ::gobgpapi::Statement* temp = statement_;
  statement_ = NULL;
  return temp;
}
inline ::gobgpapi::Statement* DeleteStatementRequest::mutable_statement() {
  
  if (statement_ == NULL) {
    statement_ = new ::gobgpapi::Statement;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteStatementRequest.statement)
  return statement_;
}
inline void DeleteStatementRequest::set_allocated_statement(::gobgpapi::Statement* statement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete statement_;
  }
  if (statement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      statement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statement, submessage_arena);
    }
    
  } else {
    
  }
  statement_ = statement;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteStatementRequest.statement)
}

// bool all = 2;
inline void DeleteStatementRequest::clear_all() {
  all_ = false;
}
inline bool DeleteStatementRequest::all() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteStatementRequest.all)
  return all_;
}
inline void DeleteStatementRequest::set_all(bool value) {
  
  all_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteStatementRequest.all)
}

// -------------------------------------------------------------------

// DeleteStatementResponse

// -------------------------------------------------------------------

// ReplaceStatementRequest

// .gobgpapi.Statement statement = 1;
inline bool ReplaceStatementRequest::has_statement() const {
  return this != internal_default_instance() && statement_ != NULL;
}
inline void ReplaceStatementRequest::clear_statement() {
  if (GetArenaNoVirtual() == NULL && statement_ != NULL) {
    delete statement_;
  }
  statement_ = NULL;
}
inline const ::gobgpapi::Statement& ReplaceStatementRequest::statement() const {
  const ::gobgpapi::Statement* p = statement_;
  // @@protoc_insertion_point(field_get:gobgpapi.ReplaceStatementRequest.statement)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Statement*>(
      &::gobgpapi::_Statement_default_instance_);
}
inline ::gobgpapi::Statement* ReplaceStatementRequest::release_statement() {
  // @@protoc_insertion_point(field_release:gobgpapi.ReplaceStatementRequest.statement)
  
  ::gobgpapi::Statement* temp = statement_;
  statement_ = NULL;
  return temp;
}
inline ::gobgpapi::Statement* ReplaceStatementRequest::mutable_statement() {
  
  if (statement_ == NULL) {
    statement_ = new ::gobgpapi::Statement;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ReplaceStatementRequest.statement)
  return statement_;
}
inline void ReplaceStatementRequest::set_allocated_statement(::gobgpapi::Statement* statement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete statement_;
  }
  if (statement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      statement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statement, submessage_arena);
    }
    
  } else {
    
  }
  statement_ = statement;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ReplaceStatementRequest.statement)
}

// -------------------------------------------------------------------

// ReplaceStatementResponse

// -------------------------------------------------------------------

// GetPolicyRequest

// -------------------------------------------------------------------

// GetPolicyResponse

// repeated .gobgpapi.Policy policies = 1;
inline int GetPolicyResponse::policies_size() const {
  return policies_.size();
}
inline void GetPolicyResponse::clear_policies() {
  policies_.Clear();
}
inline const ::gobgpapi::Policy& GetPolicyResponse::policies(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetPolicyResponse.policies)
  return policies_.Get(index);
}
inline ::gobgpapi::Policy* GetPolicyResponse::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetPolicyResponse.policies)
  return policies_.Mutable(index);
}
inline ::gobgpapi::Policy* GetPolicyResponse::add_policies() {
  // @@protoc_insertion_point(field_add:gobgpapi.GetPolicyResponse.policies)
  return policies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >*
GetPolicyResponse::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.GetPolicyResponse.policies)
  return &policies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >&
GetPolicyResponse::policies() const {
  // @@protoc_insertion_point(field_list:gobgpapi.GetPolicyResponse.policies)
  return policies_;
}

// -------------------------------------------------------------------

// AddPolicyRequest

// .gobgpapi.Policy policy = 1;
inline bool AddPolicyRequest::has_policy() const {
  return this != internal_default_instance() && policy_ != NULL;
}
inline void AddPolicyRequest::clear_policy() {
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
}
inline const ::gobgpapi::Policy& AddPolicyRequest::policy() const {
  const ::gobgpapi::Policy* p = policy_;
  // @@protoc_insertion_point(field_get:gobgpapi.AddPolicyRequest.policy)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Policy*>(
      &::gobgpapi::_Policy_default_instance_);
}
inline ::gobgpapi::Policy* AddPolicyRequest::release_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPolicyRequest.policy)
  
  ::gobgpapi::Policy* temp = policy_;
  policy_ = NULL;
  return temp;
}
inline ::gobgpapi::Policy* AddPolicyRequest::mutable_policy() {
  
  if (policy_ == NULL) {
    policy_ = new ::gobgpapi::Policy;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPolicyRequest.policy)
  return policy_;
}
inline void AddPolicyRequest::set_allocated_policy(::gobgpapi::Policy* policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete policy_;
  }
  if (policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPolicyRequest.policy)
}

// bool refer_existing_statements = 2;
inline void AddPolicyRequest::clear_refer_existing_statements() {
  refer_existing_statements_ = false;
}
inline bool AddPolicyRequest::refer_existing_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPolicyRequest.refer_existing_statements)
  return refer_existing_statements_;
}
inline void AddPolicyRequest::set_refer_existing_statements(bool value) {
  
  refer_existing_statements_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddPolicyRequest.refer_existing_statements)
}

// -------------------------------------------------------------------

// AddPolicyResponse

// -------------------------------------------------------------------

// DeletePolicyRequest

// .gobgpapi.Policy policy = 1;
inline bool DeletePolicyRequest::has_policy() const {
  return this != internal_default_instance() && policy_ != NULL;
}
inline void DeletePolicyRequest::clear_policy() {
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
}
inline const ::gobgpapi::Policy& DeletePolicyRequest::policy() const {
  const ::gobgpapi::Policy* p = policy_;
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyRequest.policy)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Policy*>(
      &::gobgpapi::_Policy_default_instance_);
}
inline ::gobgpapi::Policy* DeletePolicyRequest::release_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePolicyRequest.policy)
  
  ::gobgpapi::Policy* temp = policy_;
  policy_ = NULL;
  return temp;
}
inline ::gobgpapi::Policy* DeletePolicyRequest::mutable_policy() {
  
  if (policy_ == NULL) {
    policy_ = new ::gobgpapi::Policy;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePolicyRequest.policy)
  return policy_;
}
inline void DeletePolicyRequest::set_allocated_policy(::gobgpapi::Policy* policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete policy_;
  }
  if (policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePolicyRequest.policy)
}

// bool preserve_statements = 2;
inline void DeletePolicyRequest::clear_preserve_statements() {
  preserve_statements_ = false;
}
inline bool DeletePolicyRequest::preserve_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyRequest.preserve_statements)
  return preserve_statements_;
}
inline void DeletePolicyRequest::set_preserve_statements(bool value) {
  
  preserve_statements_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePolicyRequest.preserve_statements)
}

// bool all = 3;
inline void DeletePolicyRequest::clear_all() {
  all_ = false;
}
inline bool DeletePolicyRequest::all() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyRequest.all)
  return all_;
}
inline void DeletePolicyRequest::set_all(bool value) {
  
  all_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePolicyRequest.all)
}

// -------------------------------------------------------------------

// DeletePolicyResponse

// -------------------------------------------------------------------

// ReplacePolicyRequest

// .gobgpapi.Policy policy = 1;
inline bool ReplacePolicyRequest::has_policy() const {
  return this != internal_default_instance() && policy_ != NULL;
}
inline void ReplacePolicyRequest::clear_policy() {
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
}
inline const ::gobgpapi::Policy& ReplacePolicyRequest::policy() const {
  const ::gobgpapi::Policy* p = policy_;
  // @@protoc_insertion_point(field_get:gobgpapi.ReplacePolicyRequest.policy)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Policy*>(
      &::gobgpapi::_Policy_default_instance_);
}
inline ::gobgpapi::Policy* ReplacePolicyRequest::release_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.ReplacePolicyRequest.policy)
  
  ::gobgpapi::Policy* temp = policy_;
  policy_ = NULL;
  return temp;
}
inline ::gobgpapi::Policy* ReplacePolicyRequest::mutable_policy() {
  
  if (policy_ == NULL) {
    policy_ = new ::gobgpapi::Policy;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ReplacePolicyRequest.policy)
  return policy_;
}
inline void ReplacePolicyRequest::set_allocated_policy(::gobgpapi::Policy* policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete policy_;
  }
  if (policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ReplacePolicyRequest.policy)
}

// bool refer_existing_statements = 2;
inline void ReplacePolicyRequest::clear_refer_existing_statements() {
  refer_existing_statements_ = false;
}
inline bool ReplacePolicyRequest::refer_existing_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ReplacePolicyRequest.refer_existing_statements)
  return refer_existing_statements_;
}
inline void ReplacePolicyRequest::set_refer_existing_statements(bool value) {
  
  refer_existing_statements_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ReplacePolicyRequest.refer_existing_statements)
}

// bool preserve_statements = 3;
inline void ReplacePolicyRequest::clear_preserve_statements() {
  preserve_statements_ = false;
}
inline bool ReplacePolicyRequest::preserve_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ReplacePolicyRequest.preserve_statements)
  return preserve_statements_;
}
inline void ReplacePolicyRequest::set_preserve_statements(bool value) {
  
  preserve_statements_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ReplacePolicyRequest.preserve_statements)
}

// -------------------------------------------------------------------

// ReplacePolicyResponse

// -------------------------------------------------------------------

// GetPolicyAssignmentRequest

// .gobgpapi.PolicyAssignment assignment = 1;
inline bool GetPolicyAssignmentRequest::has_assignment() const {
  return this != internal_default_instance() && assignment_ != NULL;
}
inline void GetPolicyAssignmentRequest::clear_assignment() {
  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& GetPolicyAssignmentRequest::assignment() const {
  const ::gobgpapi::PolicyAssignment* p = assignment_;
  // @@protoc_insertion_point(field_get:gobgpapi.GetPolicyAssignmentRequest.assignment)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline ::gobgpapi::PolicyAssignment* GetPolicyAssignmentRequest::release_assignment() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetPolicyAssignmentRequest.assignment)
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* GetPolicyAssignmentRequest::mutable_assignment() {
  
  if (assignment_ == NULL) {
    assignment_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetPolicyAssignmentRequest.assignment)
  return assignment_;
}
inline void GetPolicyAssignmentRequest::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete assignment_;
  }
  if (assignment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assignment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetPolicyAssignmentRequest.assignment)
}

// -------------------------------------------------------------------

// GetPolicyAssignmentResponse

// .gobgpapi.PolicyAssignment assignment = 1;
inline bool GetPolicyAssignmentResponse::has_assignment() const {
  return this != internal_default_instance() && assignment_ != NULL;
}
inline void GetPolicyAssignmentResponse::clear_assignment() {
  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& GetPolicyAssignmentResponse::assignment() const {
  const ::gobgpapi::PolicyAssignment* p = assignment_;
  // @@protoc_insertion_point(field_get:gobgpapi.GetPolicyAssignmentResponse.assignment)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline ::gobgpapi::PolicyAssignment* GetPolicyAssignmentResponse::release_assignment() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetPolicyAssignmentResponse.assignment)
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* GetPolicyAssignmentResponse::mutable_assignment() {
  
  if (assignment_ == NULL) {
    assignment_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetPolicyAssignmentResponse.assignment)
  return assignment_;
}
inline void GetPolicyAssignmentResponse::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete assignment_;
  }
  if (assignment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assignment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetPolicyAssignmentResponse.assignment)
}

// -------------------------------------------------------------------

// AddPolicyAssignmentRequest

// .gobgpapi.PolicyAssignment assignment = 1;
inline bool AddPolicyAssignmentRequest::has_assignment() const {
  return this != internal_default_instance() && assignment_ != NULL;
}
inline void AddPolicyAssignmentRequest::clear_assignment() {
  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& AddPolicyAssignmentRequest::assignment() const {
  const ::gobgpapi::PolicyAssignment* p = assignment_;
  // @@protoc_insertion_point(field_get:gobgpapi.AddPolicyAssignmentRequest.assignment)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline ::gobgpapi::PolicyAssignment* AddPolicyAssignmentRequest::release_assignment() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPolicyAssignmentRequest.assignment)
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* AddPolicyAssignmentRequest::mutable_assignment() {
  
  if (assignment_ == NULL) {
    assignment_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPolicyAssignmentRequest.assignment)
  return assignment_;
}
inline void AddPolicyAssignmentRequest::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete assignment_;
  }
  if (assignment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assignment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPolicyAssignmentRequest.assignment)
}

// -------------------------------------------------------------------

// AddPolicyAssignmentResponse

// -------------------------------------------------------------------

// DeletePolicyAssignmentRequest

// .gobgpapi.PolicyAssignment assignment = 1;
inline bool DeletePolicyAssignmentRequest::has_assignment() const {
  return this != internal_default_instance() && assignment_ != NULL;
}
inline void DeletePolicyAssignmentRequest::clear_assignment() {
  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& DeletePolicyAssignmentRequest::assignment() const {
  const ::gobgpapi::PolicyAssignment* p = assignment_;
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyAssignmentRequest.assignment)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline ::gobgpapi::PolicyAssignment* DeletePolicyAssignmentRequest::release_assignment() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePolicyAssignmentRequest.assignment)
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* DeletePolicyAssignmentRequest::mutable_assignment() {
  
  if (assignment_ == NULL) {
    assignment_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePolicyAssignmentRequest.assignment)
  return assignment_;
}
inline void DeletePolicyAssignmentRequest::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete assignment_;
  }
  if (assignment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assignment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePolicyAssignmentRequest.assignment)
}

// bool all = 2;
inline void DeletePolicyAssignmentRequest::clear_all() {
  all_ = false;
}
inline bool DeletePolicyAssignmentRequest::all() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyAssignmentRequest.all)
  return all_;
}
inline void DeletePolicyAssignmentRequest::set_all(bool value) {
  
  all_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePolicyAssignmentRequest.all)
}

// -------------------------------------------------------------------

// DeletePolicyAssignmentResponse

// -------------------------------------------------------------------

// ReplacePolicyAssignmentRequest

// .gobgpapi.PolicyAssignment assignment = 1;
inline bool ReplacePolicyAssignmentRequest::has_assignment() const {
  return this != internal_default_instance() && assignment_ != NULL;
}
inline void ReplacePolicyAssignmentRequest::clear_assignment() {
  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& ReplacePolicyAssignmentRequest::assignment() const {
  const ::gobgpapi::PolicyAssignment* p = assignment_;
  // @@protoc_insertion_point(field_get:gobgpapi.ReplacePolicyAssignmentRequest.assignment)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline ::gobgpapi::PolicyAssignment* ReplacePolicyAssignmentRequest::release_assignment() {
  // @@protoc_insertion_point(field_release:gobgpapi.ReplacePolicyAssignmentRequest.assignment)
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* ReplacePolicyAssignmentRequest::mutable_assignment() {
  
  if (assignment_ == NULL) {
    assignment_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ReplacePolicyAssignmentRequest.assignment)
  return assignment_;
}
inline void ReplacePolicyAssignmentRequest::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete assignment_;
  }
  if (assignment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assignment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ReplacePolicyAssignmentRequest.assignment)
}

// -------------------------------------------------------------------

// ReplacePolicyAssignmentResponse

// -------------------------------------------------------------------

// GetServerRequest

// -------------------------------------------------------------------

// GetServerResponse

// .gobgpapi.Global global = 1;
inline bool GetServerResponse::has_global() const {
  return this != internal_default_instance() && global_ != NULL;
}
inline void GetServerResponse::clear_global() {
  if (GetArenaNoVirtual() == NULL && global_ != NULL) {
    delete global_;
  }
  global_ = NULL;
}
inline const ::gobgpapi::Global& GetServerResponse::global() const {
  const ::gobgpapi::Global* p = global_;
  // @@protoc_insertion_point(field_get:gobgpapi.GetServerResponse.global)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Global*>(
      &::gobgpapi::_Global_default_instance_);
}
inline ::gobgpapi::Global* GetServerResponse::release_global() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetServerResponse.global)
  
  ::gobgpapi::Global* temp = global_;
  global_ = NULL;
  return temp;
}
inline ::gobgpapi::Global* GetServerResponse::mutable_global() {
  
  if (global_ == NULL) {
    global_ = new ::gobgpapi::Global;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetServerResponse.global)
  return global_;
}
inline void GetServerResponse::set_allocated_global(::gobgpapi::Global* global) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete global_;
  }
  if (global) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global, submessage_arena);
    }
    
  } else {
    
  }
  global_ = global;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetServerResponse.global)
}

// -------------------------------------------------------------------

// StartServerRequest

// .gobgpapi.Global global = 1;
inline bool StartServerRequest::has_global() const {
  return this != internal_default_instance() && global_ != NULL;
}
inline void StartServerRequest::clear_global() {
  if (GetArenaNoVirtual() == NULL && global_ != NULL) {
    delete global_;
  }
  global_ = NULL;
}
inline const ::gobgpapi::Global& StartServerRequest::global() const {
  const ::gobgpapi::Global* p = global_;
  // @@protoc_insertion_point(field_get:gobgpapi.StartServerRequest.global)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Global*>(
      &::gobgpapi::_Global_default_instance_);
}
inline ::gobgpapi::Global* StartServerRequest::release_global() {
  // @@protoc_insertion_point(field_release:gobgpapi.StartServerRequest.global)
  
  ::gobgpapi::Global* temp = global_;
  global_ = NULL;
  return temp;
}
inline ::gobgpapi::Global* StartServerRequest::mutable_global() {
  
  if (global_ == NULL) {
    global_ = new ::gobgpapi::Global;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.StartServerRequest.global)
  return global_;
}
inline void StartServerRequest::set_allocated_global(::gobgpapi::Global* global) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete global_;
  }
  if (global) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global, submessage_arena);
    }
    
  } else {
    
  }
  global_ = global;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.StartServerRequest.global)
}

// -------------------------------------------------------------------

// StartServerResponse

// -------------------------------------------------------------------

// StopServerRequest

// -------------------------------------------------------------------

// StopServerResponse

// -------------------------------------------------------------------

// RPKIValidation

// .gobgpapi.RPKIValidation.State state = 1;
inline void RPKIValidation::clear_state() {
  state_ = 0;
}
inline ::gobgpapi::RPKIValidation_State RPKIValidation::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIValidation.state)
  return static_cast< ::gobgpapi::RPKIValidation_State >(state_);
}
inline void RPKIValidation::set_state(::gobgpapi::RPKIValidation_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIValidation.state)
}

// .gobgpapi.RPKIValidation.Reason reason = 2;
inline void RPKIValidation::clear_reason() {
  reason_ = 0;
}
inline ::gobgpapi::RPKIValidation_Reason RPKIValidation::reason() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIValidation.reason)
  return static_cast< ::gobgpapi::RPKIValidation_Reason >(reason_);
}
inline void RPKIValidation::set_reason(::gobgpapi::RPKIValidation_Reason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIValidation.reason)
}

// repeated .gobgpapi.Roa matched = 3;
inline int RPKIValidation::matched_size() const {
  return matched_.size();
}
inline void RPKIValidation::clear_matched() {
  matched_.Clear();
}
inline const ::gobgpapi::Roa& RPKIValidation::matched(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIValidation.matched)
  return matched_.Get(index);
}
inline ::gobgpapi::Roa* RPKIValidation::mutable_matched(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIValidation.matched)
  return matched_.Mutable(index);
}
inline ::gobgpapi::Roa* RPKIValidation::add_matched() {
  // @@protoc_insertion_point(field_add:gobgpapi.RPKIValidation.matched)
  return matched_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >*
RPKIValidation::mutable_matched() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.RPKIValidation.matched)
  return &matched_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >&
RPKIValidation::matched() const {
  // @@protoc_insertion_point(field_list:gobgpapi.RPKIValidation.matched)
  return matched_;
}

// repeated .gobgpapi.Roa unmatched_as = 4;
inline int RPKIValidation::unmatched_as_size() const {
  return unmatched_as_.size();
}
inline void RPKIValidation::clear_unmatched_as() {
  unmatched_as_.Clear();
}
inline const ::gobgpapi::Roa& RPKIValidation::unmatched_as(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIValidation.unmatched_as)
  return unmatched_as_.Get(index);
}
inline ::gobgpapi::Roa* RPKIValidation::mutable_unmatched_as(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIValidation.unmatched_as)
  return unmatched_as_.Mutable(index);
}
inline ::gobgpapi::Roa* RPKIValidation::add_unmatched_as() {
  // @@protoc_insertion_point(field_add:gobgpapi.RPKIValidation.unmatched_as)
  return unmatched_as_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >*
RPKIValidation::mutable_unmatched_as() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.RPKIValidation.unmatched_as)
  return &unmatched_as_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >&
RPKIValidation::unmatched_as() const {
  // @@protoc_insertion_point(field_list:gobgpapi.RPKIValidation.unmatched_as)
  return unmatched_as_;
}

// repeated .gobgpapi.Roa unmatched_length = 5;
inline int RPKIValidation::unmatched_length_size() const {
  return unmatched_length_.size();
}
inline void RPKIValidation::clear_unmatched_length() {
  unmatched_length_.Clear();
}
inline const ::gobgpapi::Roa& RPKIValidation::unmatched_length(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIValidation.unmatched_length)
  return unmatched_length_.Get(index);
}
inline ::gobgpapi::Roa* RPKIValidation::mutable_unmatched_length(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIValidation.unmatched_length)
  return unmatched_length_.Mutable(index);
}
inline ::gobgpapi::Roa* RPKIValidation::add_unmatched_length() {
  // @@protoc_insertion_point(field_add:gobgpapi.RPKIValidation.unmatched_length)
  return unmatched_length_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >*
RPKIValidation::mutable_unmatched_length() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.RPKIValidation.unmatched_length)
  return &unmatched_length_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >&
RPKIValidation::unmatched_length() const {
  // @@protoc_insertion_point(field_list:gobgpapi.RPKIValidation.unmatched_length)
  return unmatched_length_;
}

// -------------------------------------------------------------------

// Path

// bytes nlri = 1;
inline void Path::clear_nlri() {
  nlri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::nlri() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.nlri)
  return nlri_.GetNoArena();
}
inline void Path::set_nlri(const ::std::string& value) {
  
  nlri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.nlri)
}
#if LANG_CXX11
inline void Path::set_nlri(::std::string&& value) {
  
  nlri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Path.nlri)
}
#endif
inline void Path::set_nlri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nlri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.nlri)
}
inline void Path::set_nlri(const void* value, size_t size) {
  
  nlri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.nlri)
}
inline ::std::string* Path::mutable_nlri() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.nlri)
  return nlri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_nlri() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.nlri)
  
  return nlri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_nlri(::std::string* nlri) {
  if (nlri != NULL) {
    
  } else {
    
  }
  nlri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nlri);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.nlri)
}

// repeated bytes pattrs = 2;
inline int Path::pattrs_size() const {
  return pattrs_.size();
}
inline void Path::clear_pattrs() {
  pattrs_.Clear();
}
inline const ::std::string& Path::pattrs(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.pattrs)
  return pattrs_.Get(index);
}
inline ::std::string* Path::mutable_pattrs(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.pattrs)
  return pattrs_.Mutable(index);
}
inline void Path::set_pattrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Path.pattrs)
  pattrs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Path::set_pattrs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Path.pattrs)
  pattrs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Path::set_pattrs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pattrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.pattrs)
}
inline void Path::set_pattrs(int index, const void* value, size_t size) {
  pattrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.pattrs)
}
inline ::std::string* Path::add_pattrs() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.Path.pattrs)
  return pattrs_.Add();
}
inline void Path::add_pattrs(const ::std::string& value) {
  pattrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Path.pattrs)
}
#if LANG_CXX11
inline void Path::add_pattrs(::std::string&& value) {
  pattrs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.Path.pattrs)
}
#endif
inline void Path::add_pattrs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pattrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Path.pattrs)
}
inline void Path::add_pattrs(const void* value, size_t size) {
  pattrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Path.pattrs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Path::pattrs() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Path.pattrs)
  return pattrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Path::mutable_pattrs() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Path.pattrs)
  return &pattrs_;
}

// int64 age = 3;
inline void Path::clear_age() {
  age_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Path::age() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.age)
  return age_;
}
inline void Path::set_age(::google::protobuf::int64 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.age)
}

// bool best = 4;
inline void Path::clear_best() {
  best_ = false;
}
inline bool Path::best() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.best)
  return best_;
}
inline void Path::set_best(bool value) {
  
  best_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.best)
}

// bool is_withdraw = 5;
inline void Path::clear_is_withdraw() {
  is_withdraw_ = false;
}
inline bool Path::is_withdraw() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_withdraw)
  return is_withdraw_;
}
inline void Path::set_is_withdraw(bool value) {
  
  is_withdraw_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_withdraw)
}

// int32 validation = 6;
inline void Path::clear_validation() {
  validation_ = 0;
}
inline ::google::protobuf::int32 Path::validation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.validation)
  return validation_;
}
inline void Path::set_validation(::google::protobuf::int32 value) {
  
  validation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.validation)
}

// .gobgpapi.RPKIValidation validation_detail = 7;
inline bool Path::has_validation_detail() const {
  return this != internal_default_instance() && validation_detail_ != NULL;
}
inline void Path::clear_validation_detail() {
  if (GetArenaNoVirtual() == NULL && validation_detail_ != NULL) {
    delete validation_detail_;
  }
  validation_detail_ = NULL;
}
inline const ::gobgpapi::RPKIValidation& Path::validation_detail() const {
  const ::gobgpapi::RPKIValidation* p = validation_detail_;
  // @@protoc_insertion_point(field_get:gobgpapi.Path.validation_detail)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RPKIValidation*>(
      &::gobgpapi::_RPKIValidation_default_instance_);
}
inline ::gobgpapi::RPKIValidation* Path::release_validation_detail() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.validation_detail)
  
  ::gobgpapi::RPKIValidation* temp = validation_detail_;
  validation_detail_ = NULL;
  return temp;
}
inline ::gobgpapi::RPKIValidation* Path::mutable_validation_detail() {
  
  if (validation_detail_ == NULL) {
    validation_detail_ = new ::gobgpapi::RPKIValidation;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.validation_detail)
  return validation_detail_;
}
inline void Path::set_allocated_validation_detail(::gobgpapi::RPKIValidation* validation_detail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete validation_detail_;
  }
  if (validation_detail) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      validation_detail = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, validation_detail, submessage_arena);
    }
    
  } else {
    
  }
  validation_detail_ = validation_detail;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.validation_detail)
}

// bool no_implicit_withdraw = 8;
inline void Path::clear_no_implicit_withdraw() {
  no_implicit_withdraw_ = false;
}
inline bool Path::no_implicit_withdraw() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.no_implicit_withdraw)
  return no_implicit_withdraw_;
}
inline void Path::set_no_implicit_withdraw(bool value) {
  
  no_implicit_withdraw_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.no_implicit_withdraw)
}

// uint32 family = 9;
inline void Path::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 Path::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.family)
  return family_;
}
inline void Path::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.family)
}

// uint32 source_asn = 10;
inline void Path::clear_source_asn() {
  source_asn_ = 0u;
}
inline ::google::protobuf::uint32 Path::source_asn() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.source_asn)
  return source_asn_;
}
inline void Path::set_source_asn(::google::protobuf::uint32 value) {
  
  source_asn_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.source_asn)
}

// string source_id = 11;
inline void Path::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::source_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.source_id)
  return source_id_.GetNoArena();
}
inline void Path::set_source_id(const ::std::string& value) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.source_id)
}
#if LANG_CXX11
inline void Path::set_source_id(::std::string&& value) {
  
  source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Path.source_id)
}
#endif
inline void Path::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.source_id)
}
inline void Path::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.source_id)
}
inline ::std::string* Path::mutable_source_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_source_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.source_id)
  
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.source_id)
}

// bool filtered = 12;
inline void Path::clear_filtered() {
  filtered_ = false;
}
inline bool Path::filtered() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.filtered)
  return filtered_;
}
inline void Path::set_filtered(bool value) {
  
  filtered_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.filtered)
}

// bool stale = 13;
inline void Path::clear_stale() {
  stale_ = false;
}
inline bool Path::stale() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.stale)
  return stale_;
}
inline void Path::set_stale(bool value) {
  
  stale_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.stale)
}

// bool is_from_external = 14;
inline void Path::clear_is_from_external() {
  is_from_external_ = false;
}
inline bool Path::is_from_external() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_from_external)
  return is_from_external_;
}
inline void Path::set_is_from_external(bool value) {
  
  is_from_external_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_from_external)
}

// string neighbor_ip = 15;
inline void Path::clear_neighbor_ip() {
  neighbor_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::neighbor_ip() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.neighbor_ip)
  return neighbor_ip_.GetNoArena();
}
inline void Path::set_neighbor_ip(const ::std::string& value) {
  
  neighbor_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.neighbor_ip)
}
#if LANG_CXX11
inline void Path::set_neighbor_ip(::std::string&& value) {
  
  neighbor_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Path.neighbor_ip)
}
#endif
inline void Path::set_neighbor_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neighbor_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.neighbor_ip)
}
inline void Path::set_neighbor_ip(const char* value, size_t size) {
  
  neighbor_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.neighbor_ip)
}
inline ::std::string* Path::mutable_neighbor_ip() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.neighbor_ip)
  return neighbor_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_neighbor_ip() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.neighbor_ip)
  
  return neighbor_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_neighbor_ip(::std::string* neighbor_ip) {
  if (neighbor_ip != NULL) {
    
  } else {
    
  }
  neighbor_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_ip);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.neighbor_ip)
}

// bytes uuid = 16;
inline void Path::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.uuid)
  return uuid_.GetNoArena();
}
inline void Path::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.uuid)
}
#if LANG_CXX11
inline void Path::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Path.uuid)
}
#endif
inline void Path::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.uuid)
}
inline void Path::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.uuid)
}
inline ::std::string* Path::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_uuid() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.uuid)
}

// bool is_nexthop_invalid = 17;
inline void Path::clear_is_nexthop_invalid() {
  is_nexthop_invalid_ = false;
}
inline bool Path::is_nexthop_invalid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_nexthop_invalid)
  return is_nexthop_invalid_;
}
inline void Path::set_is_nexthop_invalid(bool value) {
  
  is_nexthop_invalid_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_nexthop_invalid)
}

// uint32 identifier = 18;
inline void Path::clear_identifier() {
  identifier_ = 0u;
}
inline ::google::protobuf::uint32 Path::identifier() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.identifier)
  return identifier_;
}
inline void Path::set_identifier(::google::protobuf::uint32 value) {
  
  identifier_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.identifier)
}

// uint32 local_identifier = 19;
inline void Path::clear_local_identifier() {
  local_identifier_ = 0u;
}
inline ::google::protobuf::uint32 Path::local_identifier() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.local_identifier)
  return local_identifier_;
}
inline void Path::set_local_identifier(::google::protobuf::uint32 value) {
  
  local_identifier_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.local_identifier)
}

// -------------------------------------------------------------------

// Destination

// string prefix = 1;
inline void Destination::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Destination::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.prefix)
  return prefix_.GetNoArena();
}
inline void Destination::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Destination.prefix)
}
#if LANG_CXX11
inline void Destination::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Destination.prefix)
}
#endif
inline void Destination::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Destination.prefix)
}
inline void Destination::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Destination.prefix)
}
inline ::std::string* Destination::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Destination.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Destination::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.Destination.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Destination.prefix)
}

// repeated .gobgpapi.Path paths = 2;
inline int Destination::paths_size() const {
  return paths_.size();
}
inline void Destination::clear_paths() {
  paths_.Clear();
}
inline const ::gobgpapi::Path& Destination::paths(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.paths)
  return paths_.Get(index);
}
inline ::gobgpapi::Path* Destination::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Destination.paths)
  return paths_.Mutable(index);
}
inline ::gobgpapi::Path* Destination::add_paths() {
  // @@protoc_insertion_point(field_add:gobgpapi.Destination.paths)
  return paths_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
Destination::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Destination.paths)
  return &paths_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
Destination::paths() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Destination.paths)
  return paths_;
}

// bool longer_prefixes = 3;
inline void Destination::clear_longer_prefixes() {
  longer_prefixes_ = false;
}
inline bool Destination::longer_prefixes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.longer_prefixes)
  return longer_prefixes_;
}
inline void Destination::set_longer_prefixes(bool value) {
  
  longer_prefixes_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Destination.longer_prefixes)
}

// bool shorter_prefixes = 4;
inline void Destination::clear_shorter_prefixes() {
  shorter_prefixes_ = false;
}
inline bool Destination::shorter_prefixes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.shorter_prefixes)
  return shorter_prefixes_;
}
inline void Destination::set_shorter_prefixes(bool value) {
  
  shorter_prefixes_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Destination.shorter_prefixes)
}

// -------------------------------------------------------------------

// Table

// .gobgpapi.Resource type = 1;
inline void Table::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::Resource Table::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.type)
  return static_cast< ::gobgpapi::Resource >(type_);
}
inline void Table::set_type(::gobgpapi::Resource value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Table.type)
}

// string name = 2;
inline void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.name)
  return name_.GetNoArena();
}
inline void Table::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Table.name)
}
#if LANG_CXX11
inline void Table::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Table.name)
}
#endif
inline void Table::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Table.name)
}
inline void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Table.name)
}
inline ::std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.Table.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Table.name)
}

// uint32 family = 3;
inline void Table::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 Table::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.family)
  return family_;
}
inline void Table::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Table.family)
}

// repeated .gobgpapi.Destination destinations = 4;
inline int Table::destinations_size() const {
  return destinations_.size();
}
inline void Table::clear_destinations() {
  destinations_.Clear();
}
inline const ::gobgpapi::Destination& Table::destinations(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.destinations)
  return destinations_.Get(index);
}
inline ::gobgpapi::Destination* Table::mutable_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Table.destinations)
  return destinations_.Mutable(index);
}
inline ::gobgpapi::Destination* Table::add_destinations() {
  // @@protoc_insertion_point(field_add:gobgpapi.Table.destinations)
  return destinations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >*
Table::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Table.destinations)
  return &destinations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >&
Table::destinations() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Table.destinations)
  return destinations_;
}

// bool post_policy = 5;
inline void Table::clear_post_policy() {
  post_policy_ = false;
}
inline bool Table::post_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.post_policy)
  return post_policy_;
}
inline void Table::set_post_policy(bool value) {
  
  post_policy_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Table.post_policy)
}

// -------------------------------------------------------------------

// GetRibRequest

// .gobgpapi.Table table = 1;
inline bool GetRibRequest::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
inline void GetRibRequest::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
}
inline const ::gobgpapi::Table& GetRibRequest::table() const {
  const ::gobgpapi::Table* p = table_;
  // @@protoc_insertion_point(field_get:gobgpapi.GetRibRequest.table)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Table*>(
      &::gobgpapi::_Table_default_instance_);
}
inline ::gobgpapi::Table* GetRibRequest::release_table() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetRibRequest.table)
  
  ::gobgpapi::Table* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::gobgpapi::Table* GetRibRequest::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::gobgpapi::Table;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetRibRequest.table)
  return table_;
}
inline void GetRibRequest::set_allocated_table(::gobgpapi::Table* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_;
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetRibRequest.table)
}

// -------------------------------------------------------------------

// GetRibResponse

// .gobgpapi.Table table = 1;
inline bool GetRibResponse::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
inline void GetRibResponse::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
}
inline const ::gobgpapi::Table& GetRibResponse::table() const {
  const ::gobgpapi::Table* p = table_;
  // @@protoc_insertion_point(field_get:gobgpapi.GetRibResponse.table)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Table*>(
      &::gobgpapi::_Table_default_instance_);
}
inline ::gobgpapi::Table* GetRibResponse::release_table() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetRibResponse.table)
  
  ::gobgpapi::Table* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::gobgpapi::Table* GetRibResponse::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::gobgpapi::Table;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetRibResponse.table)
  return table_;
}
inline void GetRibResponse::set_allocated_table(::gobgpapi::Table* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_;
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetRibResponse.table)
}

// -------------------------------------------------------------------

// TableLookupPrefix

// string prefix = 1;
inline void TableLookupPrefix::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableLookupPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableLookupPrefix.prefix)
  return prefix_.GetNoArena();
}
inline void TableLookupPrefix::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.TableLookupPrefix.prefix)
}
#if LANG_CXX11
inline void TableLookupPrefix::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.TableLookupPrefix.prefix)
}
#endif
inline void TableLookupPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.TableLookupPrefix.prefix)
}
inline void TableLookupPrefix::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.TableLookupPrefix.prefix)
}
inline ::std::string* TableLookupPrefix::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.TableLookupPrefix.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableLookupPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.TableLookupPrefix.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableLookupPrefix::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.TableLookupPrefix.prefix)
}

// .gobgpapi.TableLookupOption lookup_option = 2;
inline void TableLookupPrefix::clear_lookup_option() {
  lookup_option_ = 0;
}
inline ::gobgpapi::TableLookupOption TableLookupPrefix::lookup_option() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableLookupPrefix.lookup_option)
  return static_cast< ::gobgpapi::TableLookupOption >(lookup_option_);
}
inline void TableLookupPrefix::set_lookup_option(::gobgpapi::TableLookupOption value) {
  
  lookup_option_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TableLookupPrefix.lookup_option)
}

// -------------------------------------------------------------------

// GetPathRequest

// .gobgpapi.Resource type = 1;
inline void GetPathRequest::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::Resource GetPathRequest::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetPathRequest.type)
  return static_cast< ::gobgpapi::Resource >(type_);
}
inline void GetPathRequest::set_type(::gobgpapi::Resource value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GetPathRequest.type)
}

// string name = 2;
inline void GetPathRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPathRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetPathRequest.name)
  return name_.GetNoArena();
}
inline void GetPathRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.GetPathRequest.name)
}
#if LANG_CXX11
inline void GetPathRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.GetPathRequest.name)
}
#endif
inline void GetPathRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.GetPathRequest.name)
}
inline void GetPathRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.GetPathRequest.name)
}
inline ::std::string* GetPathRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetPathRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPathRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetPathRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPathRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetPathRequest.name)
}

// uint32 family = 3;
inline void GetPathRequest::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 GetPathRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetPathRequest.family)
  return family_;
}
inline void GetPathRequest::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GetPathRequest.family)
}

// repeated .gobgpapi.TableLookupPrefix prefixes = 4;
inline int GetPathRequest::prefixes_size() const {
  return prefixes_.size();
}
inline void GetPathRequest::clear_prefixes() {
  prefixes_.Clear();
}
inline const ::gobgpapi::TableLookupPrefix& GetPathRequest::prefixes(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetPathRequest.prefixes)
  return prefixes_.Get(index);
}
inline ::gobgpapi::TableLookupPrefix* GetPathRequest::mutable_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetPathRequest.prefixes)
  return prefixes_.Mutable(index);
}
inline ::gobgpapi::TableLookupPrefix* GetPathRequest::add_prefixes() {
  // @@protoc_insertion_point(field_add:gobgpapi.GetPathRequest.prefixes)
  return prefixes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::TableLookupPrefix >*
GetPathRequest::mutable_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.GetPathRequest.prefixes)
  return &prefixes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::TableLookupPrefix >&
GetPathRequest::prefixes() const {
  // @@protoc_insertion_point(field_list:gobgpapi.GetPathRequest.prefixes)
  return prefixes_;
}

// -------------------------------------------------------------------

// ValidateRibRequest

// .gobgpapi.Resource type = 1;
inline void ValidateRibRequest::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::Resource ValidateRibRequest::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ValidateRibRequest.type)
  return static_cast< ::gobgpapi::Resource >(type_);
}
inline void ValidateRibRequest::set_type(::gobgpapi::Resource value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ValidateRibRequest.type)
}

// uint32 family = 2;
inline void ValidateRibRequest::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 ValidateRibRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ValidateRibRequest.family)
  return family_;
}
inline void ValidateRibRequest::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ValidateRibRequest.family)
}

// string prefix = 3;
inline void ValidateRibRequest::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidateRibRequest::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ValidateRibRequest.prefix)
  return prefix_.GetNoArena();
}
inline void ValidateRibRequest::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ValidateRibRequest.prefix)
}
#if LANG_CXX11
inline void ValidateRibRequest::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ValidateRibRequest.prefix)
}
#endif
inline void ValidateRibRequest::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ValidateRibRequest.prefix)
}
inline void ValidateRibRequest::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ValidateRibRequest.prefix)
}
inline ::std::string* ValidateRibRequest::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ValidateRibRequest.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidateRibRequest::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.ValidateRibRequest.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateRibRequest::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ValidateRibRequest.prefix)
}

// -------------------------------------------------------------------

// ValidateRibResponse

// -------------------------------------------------------------------

// Peer

// repeated uint32 families = 1;
inline int Peer::families_size() const {
  return families_.size();
}
inline void Peer::clear_families() {
  families_.Clear();
}
inline ::google::protobuf::uint32 Peer::families(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.families)
  return families_.Get(index);
}
inline void Peer::set_families(int index, ::google::protobuf::uint32 value) {
  families_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.Peer.families)
}
inline void Peer::add_families(::google::protobuf::uint32 value) {
  families_.Add(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Peer.families)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Peer::families() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Peer.families)
  return families_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Peer::mutable_families() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Peer.families)
  return &families_;
}

// .gobgpapi.ApplyPolicy apply_policy = 2;
inline bool Peer::has_apply_policy() const {
  return this != internal_default_instance() && apply_policy_ != NULL;
}
inline void Peer::clear_apply_policy() {
  if (GetArenaNoVirtual() == NULL && apply_policy_ != NULL) {
    delete apply_policy_;
  }
  apply_policy_ = NULL;
}
inline const ::gobgpapi::ApplyPolicy& Peer::apply_policy() const {
  const ::gobgpapi::ApplyPolicy* p = apply_policy_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.apply_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::ApplyPolicy*>(
      &::gobgpapi::_ApplyPolicy_default_instance_);
}
inline ::gobgpapi::ApplyPolicy* Peer::release_apply_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.apply_policy)
  
  ::gobgpapi::ApplyPolicy* temp = apply_policy_;
  apply_policy_ = NULL;
  return temp;
}
inline ::gobgpapi::ApplyPolicy* Peer::mutable_apply_policy() {
  
  if (apply_policy_ == NULL) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.apply_policy)
  return apply_policy_;
}
inline void Peer::set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete apply_policy_;
  }
  if (apply_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apply_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apply_policy, submessage_arena);
    }
    
  } else {
    
  }
  apply_policy_ = apply_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.apply_policy)
}

// .gobgpapi.PeerConf conf = 3;
inline bool Peer::has_conf() const {
  return this != internal_default_instance() && conf_ != NULL;
}
inline void Peer::clear_conf() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) {
    delete conf_;
  }
  conf_ = NULL;
}
inline const ::gobgpapi::PeerConf& Peer::conf() const {
  const ::gobgpapi::PeerConf* p = conf_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.conf)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PeerConf*>(
      &::gobgpapi::_PeerConf_default_instance_);
}
inline ::gobgpapi::PeerConf* Peer::release_conf() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.conf)
  
  ::gobgpapi::PeerConf* temp = conf_;
  conf_ = NULL;
  return temp;
}
inline ::gobgpapi::PeerConf* Peer::mutable_conf() {
  
  if (conf_ == NULL) {
    conf_ = new ::gobgpapi::PeerConf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.conf)
  return conf_;
}
inline void Peer::set_allocated_conf(::gobgpapi::PeerConf* conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conf_;
  }
  if (conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.conf)
}

// .gobgpapi.EbgpMultihop ebgp_multihop = 4;
inline bool Peer::has_ebgp_multihop() const {
  return this != internal_default_instance() && ebgp_multihop_ != NULL;
}
inline void Peer::clear_ebgp_multihop() {
  if (GetArenaNoVirtual() == NULL && ebgp_multihop_ != NULL) {
    delete ebgp_multihop_;
  }
  ebgp_multihop_ = NULL;
}
inline const ::gobgpapi::EbgpMultihop& Peer::ebgp_multihop() const {
  const ::gobgpapi::EbgpMultihop* p = ebgp_multihop_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.ebgp_multihop)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::EbgpMultihop*>(
      &::gobgpapi::_EbgpMultihop_default_instance_);
}
inline ::gobgpapi::EbgpMultihop* Peer::release_ebgp_multihop() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.ebgp_multihop)
  
  ::gobgpapi::EbgpMultihop* temp = ebgp_multihop_;
  ebgp_multihop_ = NULL;
  return temp;
}
inline ::gobgpapi::EbgpMultihop* Peer::mutable_ebgp_multihop() {
  
  if (ebgp_multihop_ == NULL) {
    ebgp_multihop_ = new ::gobgpapi::EbgpMultihop;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.ebgp_multihop)
  return ebgp_multihop_;
}
inline void Peer::set_allocated_ebgp_multihop(::gobgpapi::EbgpMultihop* ebgp_multihop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ebgp_multihop_;
  }
  if (ebgp_multihop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ebgp_multihop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ebgp_multihop, submessage_arena);
    }
    
  } else {
    
  }
  ebgp_multihop_ = ebgp_multihop;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.ebgp_multihop)
}

// .gobgpapi.RouteReflector route_reflector = 5;
inline bool Peer::has_route_reflector() const {
  return this != internal_default_instance() && route_reflector_ != NULL;
}
inline void Peer::clear_route_reflector() {
  if (GetArenaNoVirtual() == NULL && route_reflector_ != NULL) {
    delete route_reflector_;
  }
  route_reflector_ = NULL;
}
inline const ::gobgpapi::RouteReflector& Peer::route_reflector() const {
  const ::gobgpapi::RouteReflector* p = route_reflector_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.route_reflector)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RouteReflector*>(
      &::gobgpapi::_RouteReflector_default_instance_);
}
inline ::gobgpapi::RouteReflector* Peer::release_route_reflector() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.route_reflector)
  
  ::gobgpapi::RouteReflector* temp = route_reflector_;
  route_reflector_ = NULL;
  return temp;
}
inline ::gobgpapi::RouteReflector* Peer::mutable_route_reflector() {
  
  if (route_reflector_ == NULL) {
    route_reflector_ = new ::gobgpapi::RouteReflector;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.route_reflector)
  return route_reflector_;
}
inline void Peer::set_allocated_route_reflector(::gobgpapi::RouteReflector* route_reflector) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete route_reflector_;
  }
  if (route_reflector) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      route_reflector = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route_reflector, submessage_arena);
    }
    
  } else {
    
  }
  route_reflector_ = route_reflector;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.route_reflector)
}

// .gobgpapi.PeerState info = 6;
inline bool Peer::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void Peer::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::gobgpapi::PeerState& Peer::info() const {
  const ::gobgpapi::PeerState* p = info_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.info)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PeerState*>(
      &::gobgpapi::_PeerState_default_instance_);
}
inline ::gobgpapi::PeerState* Peer::release_info() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.info)
  
  ::gobgpapi::PeerState* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::gobgpapi::PeerState* Peer::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::gobgpapi::PeerState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.info)
  return info_;
}
inline void Peer::set_allocated_info(::gobgpapi::PeerState* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.info)
}

// .gobgpapi.Timers timers = 7;
inline bool Peer::has_timers() const {
  return this != internal_default_instance() && timers_ != NULL;
}
inline void Peer::clear_timers() {
  if (GetArenaNoVirtual() == NULL && timers_ != NULL) {
    delete timers_;
  }
  timers_ = NULL;
}
inline const ::gobgpapi::Timers& Peer::timers() const {
  const ::gobgpapi::Timers* p = timers_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.timers)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Timers*>(
      &::gobgpapi::_Timers_default_instance_);
}
inline ::gobgpapi::Timers* Peer::release_timers() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.timers)
  
  ::gobgpapi::Timers* temp = timers_;
  timers_ = NULL;
  return temp;
}
inline ::gobgpapi::Timers* Peer::mutable_timers() {
  
  if (timers_ == NULL) {
    timers_ = new ::gobgpapi::Timers;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.timers)
  return timers_;
}
inline void Peer::set_allocated_timers(::gobgpapi::Timers* timers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timers_;
  }
  if (timers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timers, submessage_arena);
    }
    
  } else {
    
  }
  timers_ = timers;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.timers)
}

// .gobgpapi.Transport transport = 8;
inline bool Peer::has_transport() const {
  return this != internal_default_instance() && transport_ != NULL;
}
inline void Peer::clear_transport() {
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) {
    delete transport_;
  }
  transport_ = NULL;
}
inline const ::gobgpapi::Transport& Peer::transport() const {
  const ::gobgpapi::Transport* p = transport_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.transport)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Transport*>(
      &::gobgpapi::_Transport_default_instance_);
}
inline ::gobgpapi::Transport* Peer::release_transport() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.transport)
  
  ::gobgpapi::Transport* temp = transport_;
  transport_ = NULL;
  return temp;
}
inline ::gobgpapi::Transport* Peer::mutable_transport() {
  
  if (transport_ == NULL) {
    transport_ = new ::gobgpapi::Transport;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.transport)
  return transport_;
}
inline void Peer::set_allocated_transport(::gobgpapi::Transport* transport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_;
  }
  if (transport) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transport = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.transport)
}

// .gobgpapi.RouteServer route_server = 9;
inline bool Peer::has_route_server() const {
  return this != internal_default_instance() && route_server_ != NULL;
}
inline void Peer::clear_route_server() {
  if (GetArenaNoVirtual() == NULL && route_server_ != NULL) {
    delete route_server_;
  }
  route_server_ = NULL;
}
inline const ::gobgpapi::RouteServer& Peer::route_server() const {
  const ::gobgpapi::RouteServer* p = route_server_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.route_server)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RouteServer*>(
      &::gobgpapi::_RouteServer_default_instance_);
}
inline ::gobgpapi::RouteServer* Peer::release_route_server() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.route_server)
  
  ::gobgpapi::RouteServer* temp = route_server_;
  route_server_ = NULL;
  return temp;
}
inline ::gobgpapi::RouteServer* Peer::mutable_route_server() {
  
  if (route_server_ == NULL) {
    route_server_ = new ::gobgpapi::RouteServer;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.route_server)
  return route_server_;
}
inline void Peer::set_allocated_route_server(::gobgpapi::RouteServer* route_server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete route_server_;
  }
  if (route_server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      route_server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route_server, submessage_arena);
    }
    
  } else {
    
  }
  route_server_ = route_server;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.route_server)
}

// .gobgpapi.GracefulRestart graceful_restart = 10;
inline bool Peer::has_graceful_restart() const {
  return this != internal_default_instance() && graceful_restart_ != NULL;
}
inline void Peer::clear_graceful_restart() {
  if (GetArenaNoVirtual() == NULL && graceful_restart_ != NULL) {
    delete graceful_restart_;
  }
  graceful_restart_ = NULL;
}
inline const ::gobgpapi::GracefulRestart& Peer::graceful_restart() const {
  const ::gobgpapi::GracefulRestart* p = graceful_restart_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.graceful_restart)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::GracefulRestart*>(
      &::gobgpapi::_GracefulRestart_default_instance_);
}
inline ::gobgpapi::GracefulRestart* Peer::release_graceful_restart() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.graceful_restart)
  
  ::gobgpapi::GracefulRestart* temp = graceful_restart_;
  graceful_restart_ = NULL;
  return temp;
}
inline ::gobgpapi::GracefulRestart* Peer::mutable_graceful_restart() {
  
  if (graceful_restart_ == NULL) {
    graceful_restart_ = new ::gobgpapi::GracefulRestart;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.graceful_restart)
  return graceful_restart_;
}
inline void Peer::set_allocated_graceful_restart(::gobgpapi::GracefulRestart* graceful_restart) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graceful_restart_;
  }
  if (graceful_restart) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      graceful_restart = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, graceful_restart, submessage_arena);
    }
    
  } else {
    
  }
  graceful_restart_ = graceful_restart;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.graceful_restart)
}

// repeated .gobgpapi.AfiSafi afi_safis = 11;
inline int Peer::afi_safis_size() const {
  return afi_safis_.size();
}
inline void Peer::clear_afi_safis() {
  afi_safis_.Clear();
}
inline const ::gobgpapi::AfiSafi& Peer::afi_safis(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.afi_safis)
  return afi_safis_.Get(index);
}
inline ::gobgpapi::AfiSafi* Peer::mutable_afi_safis(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.afi_safis)
  return afi_safis_.Mutable(index);
}
inline ::gobgpapi::AfiSafi* Peer::add_afi_safis() {
  // @@protoc_insertion_point(field_add:gobgpapi.Peer.afi_safis)
  return afi_safis_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::AfiSafi >*
Peer::mutable_afi_safis() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Peer.afi_safis)
  return &afi_safis_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::AfiSafi >&
Peer::afi_safis() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Peer.afi_safis)
  return afi_safis_;
}

// .gobgpapi.AddPaths add_paths = 12;
inline bool Peer::has_add_paths() const {
  return this != internal_default_instance() && add_paths_ != NULL;
}
inline void Peer::clear_add_paths() {
  if (GetArenaNoVirtual() == NULL && add_paths_ != NULL) {
    delete add_paths_;
  }
  add_paths_ = NULL;
}
inline const ::gobgpapi::AddPaths& Peer::add_paths() const {
  const ::gobgpapi::AddPaths* p = add_paths_;
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.add_paths)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::AddPaths*>(
      &::gobgpapi::_AddPaths_default_instance_);
}
inline ::gobgpapi::AddPaths* Peer::release_add_paths() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.add_paths)
  
  ::gobgpapi::AddPaths* temp = add_paths_;
  add_paths_ = NULL;
  return temp;
}
inline ::gobgpapi::AddPaths* Peer::mutable_add_paths() {
  
  if (add_paths_ == NULL) {
    add_paths_ = new ::gobgpapi::AddPaths;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.add_paths)
  return add_paths_;
}
inline void Peer::set_allocated_add_paths(::gobgpapi::AddPaths* add_paths) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete add_paths_;
  }
  if (add_paths) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_paths = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_paths, submessage_arena);
    }
    
  } else {
    
  }
  add_paths_ = add_paths;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.add_paths)
}

// -------------------------------------------------------------------

// ApplyPolicy

// .gobgpapi.PolicyAssignment in_policy = 1;
inline bool ApplyPolicy::has_in_policy() const {
  return this != internal_default_instance() && in_policy_ != NULL;
}
inline void ApplyPolicy::clear_in_policy() {
  if (GetArenaNoVirtual() == NULL && in_policy_ != NULL) {
    delete in_policy_;
  }
  in_policy_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::in_policy() const {
  const ::gobgpapi::PolicyAssignment* p = in_policy_;
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.in_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::release_in_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.ApplyPolicy.in_policy)
  
  ::gobgpapi::PolicyAssignment* temp = in_policy_;
  in_policy_ = NULL;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_in_policy() {
  
  if (in_policy_ == NULL) {
    in_policy_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.in_policy)
  return in_policy_;
}
inline void ApplyPolicy::set_allocated_in_policy(::gobgpapi::PolicyAssignment* in_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete in_policy_;
  }
  if (in_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      in_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, in_policy, submessage_arena);
    }
    
  } else {
    
  }
  in_policy_ = in_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.in_policy)
}

// .gobgpapi.PolicyAssignment export_policy = 2;
inline bool ApplyPolicy::has_export_policy() const {
  return this != internal_default_instance() && export_policy_ != NULL;
}
inline void ApplyPolicy::clear_export_policy() {
  if (GetArenaNoVirtual() == NULL && export_policy_ != NULL) {
    delete export_policy_;
  }
  export_policy_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::export_policy() const {
  const ::gobgpapi::PolicyAssignment* p = export_policy_;
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.export_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::release_export_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.ApplyPolicy.export_policy)
  
  ::gobgpapi::PolicyAssignment* temp = export_policy_;
  export_policy_ = NULL;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_export_policy() {
  
  if (export_policy_ == NULL) {
    export_policy_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.export_policy)
  return export_policy_;
}
inline void ApplyPolicy::set_allocated_export_policy(::gobgpapi::PolicyAssignment* export_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete export_policy_;
  }
  if (export_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      export_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, export_policy, submessage_arena);
    }
    
  } else {
    
  }
  export_policy_ = export_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.export_policy)
}

// .gobgpapi.PolicyAssignment import_policy = 3;
inline bool ApplyPolicy::has_import_policy() const {
  return this != internal_default_instance() && import_policy_ != NULL;
}
inline void ApplyPolicy::clear_import_policy() {
  if (GetArenaNoVirtual() == NULL && import_policy_ != NULL) {
    delete import_policy_;
  }
  import_policy_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::import_policy() const {
  const ::gobgpapi::PolicyAssignment* p = import_policy_;
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.import_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::release_import_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.ApplyPolicy.import_policy)
  
  ::gobgpapi::PolicyAssignment* temp = import_policy_;
  import_policy_ = NULL;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_import_policy() {
  
  if (import_policy_ == NULL) {
    import_policy_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.import_policy)
  return import_policy_;
}
inline void ApplyPolicy::set_allocated_import_policy(::gobgpapi::PolicyAssignment* import_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete import_policy_;
  }
  if (import_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      import_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, import_policy, submessage_arena);
    }
    
  } else {
    
  }
  import_policy_ = import_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.import_policy)
}

// -------------------------------------------------------------------

// PrefixLimit

// uint32 family = 1;
inline void PrefixLimit::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 PrefixLimit::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PrefixLimit.family)
  return family_;
}
inline void PrefixLimit::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PrefixLimit.family)
}

// uint32 max_prefixes = 2;
inline void PrefixLimit::clear_max_prefixes() {
  max_prefixes_ = 0u;
}
inline ::google::protobuf::uint32 PrefixLimit::max_prefixes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PrefixLimit.max_prefixes)
  return max_prefixes_;
}
inline void PrefixLimit::set_max_prefixes(::google::protobuf::uint32 value) {
  
  max_prefixes_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PrefixLimit.max_prefixes)
}

// uint32 shutdown_threshold_pct = 3;
inline void PrefixLimit::clear_shutdown_threshold_pct() {
  shutdown_threshold_pct_ = 0u;
}
inline ::google::protobuf::uint32 PrefixLimit::shutdown_threshold_pct() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PrefixLimit.shutdown_threshold_pct)
  return shutdown_threshold_pct_;
}
inline void PrefixLimit::set_shutdown_threshold_pct(::google::protobuf::uint32 value) {
  
  shutdown_threshold_pct_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PrefixLimit.shutdown_threshold_pct)
}

// -------------------------------------------------------------------

// PeerConf

// string auth_password = 1;
inline void PeerConf::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.auth_password)
  return auth_password_.GetNoArena();
}
inline void PeerConf::set_auth_password(const ::std::string& value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.auth_password)
}
#if LANG_CXX11
inline void PeerConf::set_auth_password(::std::string&& value) {
  
  auth_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.auth_password)
}
#endif
inline void PeerConf::set_auth_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.auth_password)
}
inline void PeerConf::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.auth_password)
}
inline ::std::string* PeerConf::mutable_auth_password() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.auth_password)
  return auth_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_auth_password() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.auth_password)
  
  return auth_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_auth_password(::std::string* auth_password) {
  if (auth_password != NULL) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.auth_password)
}

// string description = 2;
inline void PeerConf::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.description)
  return description_.GetNoArena();
}
inline void PeerConf::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.description)
}
#if LANG_CXX11
inline void PeerConf::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.description)
}
#endif
inline void PeerConf::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.description)
}
inline void PeerConf::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.description)
}
inline ::std::string* PeerConf::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_description() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.description)
}

// uint32 local_as = 3;
inline void PeerConf::clear_local_as() {
  local_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.local_as)
  return local_as_;
}
inline void PeerConf::set_local_as(::google::protobuf::uint32 value) {
  
  local_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.local_as)
}

// string neighbor_address = 4;
inline void PeerConf::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.neighbor_address)
  return neighbor_address_.GetNoArena();
}
inline void PeerConf::set_neighbor_address(const ::std::string& value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.neighbor_address)
}
#if LANG_CXX11
inline void PeerConf::set_neighbor_address(::std::string&& value) {
  
  neighbor_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.neighbor_address)
}
#endif
inline void PeerConf::set_neighbor_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.neighbor_address)
}
inline void PeerConf::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.neighbor_address)
}
inline ::std::string* PeerConf::mutable_neighbor_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.neighbor_address)
  return neighbor_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_neighbor_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.neighbor_address)
  
  return neighbor_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_neighbor_address(::std::string* neighbor_address) {
  if (neighbor_address != NULL) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.neighbor_address)
}

// uint32 peer_as = 5;
inline void PeerConf::clear_peer_as() {
  peer_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_as)
  return peer_as_;
}
inline void PeerConf::set_peer_as(::google::protobuf::uint32 value) {
  
  peer_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_as)
}

// string peer_group = 6;
inline void PeerConf::clear_peer_group() {
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_group)
  return peer_group_.GetNoArena();
}
inline void PeerConf::set_peer_group(const ::std::string& value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_group)
}
#if LANG_CXX11
inline void PeerConf::set_peer_group(::std::string&& value) {
  
  peer_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.peer_group)
}
#endif
inline void PeerConf::set_peer_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.peer_group)
}
inline void PeerConf::set_peer_group(const char* value, size_t size) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.peer_group)
}
inline ::std::string* PeerConf::mutable_peer_group() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.peer_group)
  return peer_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_peer_group() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.peer_group)
  
  return peer_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_peer_group(::std::string* peer_group) {
  if (peer_group != NULL) {
    
  } else {
    
  }
  peer_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_group);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.peer_group)
}

// uint32 peer_type = 7;
inline void PeerConf::clear_peer_type() {
  peer_type_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_type)
  return peer_type_;
}
inline void PeerConf::set_peer_type(::google::protobuf::uint32 value) {
  
  peer_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_type)
}

// .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
inline void PeerConf::clear_remove_private_as() {
  remove_private_as_ = 0;
}
inline ::gobgpapi::PeerConf_RemovePrivateAs PeerConf::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.remove_private_as)
  return static_cast< ::gobgpapi::PeerConf_RemovePrivateAs >(remove_private_as_);
}
inline void PeerConf::set_remove_private_as(::gobgpapi::PeerConf_RemovePrivateAs value) {
  
  remove_private_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.remove_private_as)
}

// bool route_flap_damping = 9;
inline void PeerConf::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
inline bool PeerConf::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.route_flap_damping)
  return route_flap_damping_;
}
inline void PeerConf::set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.route_flap_damping)
}

// uint32 send_community = 10;
inline void PeerConf::clear_send_community() {
  send_community_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.send_community)
  return send_community_;
}
inline void PeerConf::set_send_community(::google::protobuf::uint32 value) {
  
  send_community_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.send_community)
}

// repeated bytes remote_cap = 11;
inline int PeerConf::remote_cap_size() const {
  return remote_cap_.size();
}
inline void PeerConf::clear_remote_cap() {
  remote_cap_.Clear();
}
inline const ::std::string& PeerConf::remote_cap(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.remote_cap)
  return remote_cap_.Get(index);
}
inline ::std::string* PeerConf::mutable_remote_cap(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.remote_cap)
  return remote_cap_.Mutable(index);
}
inline void PeerConf::set_remote_cap(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.remote_cap)
  remote_cap_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PeerConf::set_remote_cap(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.remote_cap)
  remote_cap_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PeerConf::set_remote_cap(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remote_cap_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.remote_cap)
}
inline void PeerConf::set_remote_cap(int index, const void* value, size_t size) {
  remote_cap_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.remote_cap)
}
inline ::std::string* PeerConf::add_remote_cap() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.PeerConf.remote_cap)
  return remote_cap_.Add();
}
inline void PeerConf::add_remote_cap(const ::std::string& value) {
  remote_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.PeerConf.remote_cap)
}
#if LANG_CXX11
inline void PeerConf::add_remote_cap(::std::string&& value) {
  remote_cap_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.PeerConf.remote_cap)
}
#endif
inline void PeerConf::add_remote_cap(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remote_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.PeerConf.remote_cap)
}
inline void PeerConf::add_remote_cap(const void* value, size_t size) {
  remote_cap_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.PeerConf.remote_cap)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerConf::remote_cap() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerConf.remote_cap)
  return remote_cap_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerConf::mutable_remote_cap() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerConf.remote_cap)
  return &remote_cap_;
}

// repeated bytes local_cap = 12;
inline int PeerConf::local_cap_size() const {
  return local_cap_.size();
}
inline void PeerConf::clear_local_cap() {
  local_cap_.Clear();
}
inline const ::std::string& PeerConf::local_cap(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.local_cap)
  return local_cap_.Get(index);
}
inline ::std::string* PeerConf::mutable_local_cap(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.local_cap)
  return local_cap_.Mutable(index);
}
inline void PeerConf::set_local_cap(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.local_cap)
  local_cap_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PeerConf::set_local_cap(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.local_cap)
  local_cap_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PeerConf::set_local_cap(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  local_cap_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.local_cap)
}
inline void PeerConf::set_local_cap(int index, const void* value, size_t size) {
  local_cap_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.local_cap)
}
inline ::std::string* PeerConf::add_local_cap() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.PeerConf.local_cap)
  return local_cap_.Add();
}
inline void PeerConf::add_local_cap(const ::std::string& value) {
  local_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.PeerConf.local_cap)
}
#if LANG_CXX11
inline void PeerConf::add_local_cap(::std::string&& value) {
  local_cap_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.PeerConf.local_cap)
}
#endif
inline void PeerConf::add_local_cap(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  local_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.PeerConf.local_cap)
}
inline void PeerConf::add_local_cap(const void* value, size_t size) {
  local_cap_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.PeerConf.local_cap)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerConf::local_cap() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerConf.local_cap)
  return local_cap_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerConf::mutable_local_cap() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerConf.local_cap)
  return &local_cap_;
}

// string id = 13;
inline void PeerConf::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.id)
  return id_.GetNoArena();
}
inline void PeerConf::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.id)
}
#if LANG_CXX11
inline void PeerConf::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.id)
}
#endif
inline void PeerConf::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.id)
}
inline void PeerConf::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.id)
}
inline ::std::string* PeerConf::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.id)
}

// repeated .gobgpapi.PrefixLimit prefix_limits = 14;
inline int PeerConf::prefix_limits_size() const {
  return prefix_limits_.size();
}
inline void PeerConf::clear_prefix_limits() {
  prefix_limits_.Clear();
}
inline const ::gobgpapi::PrefixLimit& PeerConf::prefix_limits(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.prefix_limits)
  return prefix_limits_.Get(index);
}
inline ::gobgpapi::PrefixLimit* PeerConf::mutable_prefix_limits(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.prefix_limits)
  return prefix_limits_.Mutable(index);
}
inline ::gobgpapi::PrefixLimit* PeerConf::add_prefix_limits() {
  // @@protoc_insertion_point(field_add:gobgpapi.PeerConf.prefix_limits)
  return prefix_limits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::PrefixLimit >*
PeerConf::mutable_prefix_limits() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerConf.prefix_limits)
  return &prefix_limits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::PrefixLimit >&
PeerConf::prefix_limits() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerConf.prefix_limits)
  return prefix_limits_;
}

// string local_address = 15;
inline void PeerConf::clear_local_address() {
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::local_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.local_address)
  return local_address_.GetNoArena();
}
inline void PeerConf::set_local_address(const ::std::string& value) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.local_address)
}
#if LANG_CXX11
inline void PeerConf::set_local_address(::std::string&& value) {
  
  local_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.local_address)
}
#endif
inline void PeerConf::set_local_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.local_address)
}
inline void PeerConf::set_local_address(const char* value, size_t size) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.local_address)
}
inline ::std::string* PeerConf::mutable_local_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.local_address)
  return local_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_local_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.local_address)
  
  return local_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_local_address(::std::string* local_address) {
  if (local_address != NULL) {
    
  } else {
    
  }
  local_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.local_address)
}

// string neighbor_interface = 16;
inline void PeerConf::clear_neighbor_interface() {
  neighbor_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::neighbor_interface() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.neighbor_interface)
  return neighbor_interface_.GetNoArena();
}
inline void PeerConf::set_neighbor_interface(const ::std::string& value) {
  
  neighbor_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.neighbor_interface)
}
#if LANG_CXX11
inline void PeerConf::set_neighbor_interface(::std::string&& value) {
  
  neighbor_interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.neighbor_interface)
}
#endif
inline void PeerConf::set_neighbor_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neighbor_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.neighbor_interface)
}
inline void PeerConf::set_neighbor_interface(const char* value, size_t size) {
  
  neighbor_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.neighbor_interface)
}
inline ::std::string* PeerConf::mutable_neighbor_interface() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.neighbor_interface)
  return neighbor_interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_neighbor_interface() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.neighbor_interface)
  
  return neighbor_interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_neighbor_interface(::std::string* neighbor_interface) {
  if (neighbor_interface != NULL) {
    
  } else {
    
  }
  neighbor_interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_interface);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.neighbor_interface)
}

// string vrf = 17;
inline void PeerConf::clear_vrf() {
  vrf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::vrf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.vrf)
  return vrf_.GetNoArena();
}
inline void PeerConf::set_vrf(const ::std::string& value) {
  
  vrf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.vrf)
}
#if LANG_CXX11
inline void PeerConf::set_vrf(::std::string&& value) {
  
  vrf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.vrf)
}
#endif
inline void PeerConf::set_vrf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vrf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.vrf)
}
inline void PeerConf::set_vrf(const char* value, size_t size) {
  
  vrf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.vrf)
}
inline ::std::string* PeerConf::mutable_vrf() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.vrf)
  return vrf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_vrf() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.vrf)
  
  return vrf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_vrf(::std::string* vrf) {
  if (vrf != NULL) {
    
  } else {
    
  }
  vrf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrf);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.vrf)
}

// uint32 allow_own_as = 18;
inline void PeerConf::clear_allow_own_as() {
  allow_own_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::allow_own_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.allow_own_as)
  return allow_own_as_;
}
inline void PeerConf::set_allow_own_as(::google::protobuf::uint32 value) {
  
  allow_own_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.allow_own_as)
}

// bool replace_peer_as = 19;
inline void PeerConf::clear_replace_peer_as() {
  replace_peer_as_ = false;
}
inline bool PeerConf::replace_peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.replace_peer_as)
  return replace_peer_as_;
}
inline void PeerConf::set_replace_peer_as(bool value) {
  
  replace_peer_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.replace_peer_as)
}

// -------------------------------------------------------------------

// EbgpMultihop

// bool enabled = 1;
inline void EbgpMultihop::clear_enabled() {
  enabled_ = false;
}
inline bool EbgpMultihop::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpMultihop.enabled)
  return enabled_;
}
inline void EbgpMultihop::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpMultihop.enabled)
}

// uint32 multihop_ttl = 2;
inline void EbgpMultihop::clear_multihop_ttl() {
  multihop_ttl_ = 0u;
}
inline ::google::protobuf::uint32 EbgpMultihop::multihop_ttl() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpMultihop.multihop_ttl)
  return multihop_ttl_;
}
inline void EbgpMultihop::set_multihop_ttl(::google::protobuf::uint32 value) {
  
  multihop_ttl_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpMultihop.multihop_ttl)
}

// -------------------------------------------------------------------

// RouteReflector

// bool route_reflector_client = 1;
inline void RouteReflector::clear_route_reflector_client() {
  route_reflector_client_ = false;
}
inline bool RouteReflector::route_reflector_client() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteReflector.route_reflector_client)
  return route_reflector_client_;
}
inline void RouteReflector::set_route_reflector_client(bool value) {
  
  route_reflector_client_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteReflector.route_reflector_client)
}

// string route_reflector_cluster_id = 2;
inline void RouteReflector::clear_route_reflector_cluster_id() {
  route_reflector_cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RouteReflector::route_reflector_cluster_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteReflector.route_reflector_cluster_id)
  return route_reflector_cluster_id_.GetNoArena();
}
inline void RouteReflector::set_route_reflector_cluster_id(const ::std::string& value) {
  
  route_reflector_cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteReflector.route_reflector_cluster_id)
}
#if LANG_CXX11
inline void RouteReflector::set_route_reflector_cluster_id(::std::string&& value) {
  
  route_reflector_cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.RouteReflector.route_reflector_cluster_id)
}
#endif
inline void RouteReflector::set_route_reflector_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  route_reflector_cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RouteReflector.route_reflector_cluster_id)
}
inline void RouteReflector::set_route_reflector_cluster_id(const char* value, size_t size) {
  
  route_reflector_cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RouteReflector.route_reflector_cluster_id)
}
inline ::std::string* RouteReflector::mutable_route_reflector_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteReflector.route_reflector_cluster_id)
  return route_reflector_cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteReflector::release_route_reflector_cluster_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteReflector.route_reflector_cluster_id)
  
  return route_reflector_cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouteReflector::set_allocated_route_reflector_cluster_id(::std::string* route_reflector_cluster_id) {
  if (route_reflector_cluster_id != NULL) {
    
  } else {
    
  }
  route_reflector_cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_reflector_cluster_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteReflector.route_reflector_cluster_id)
}

// -------------------------------------------------------------------

// PeerState

// string auth_password = 1;
inline void PeerState::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.auth_password)
  return auth_password_.GetNoArena();
}
inline void PeerState::set_auth_password(const ::std::string& value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.auth_password)
}
#if LANG_CXX11
inline void PeerState::set_auth_password(::std::string&& value) {
  
  auth_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.auth_password)
}
#endif
inline void PeerState::set_auth_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.auth_password)
}
inline void PeerState::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.auth_password)
}
inline ::std::string* PeerState::mutable_auth_password() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.auth_password)
  return auth_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_auth_password() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.auth_password)
  
  return auth_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_auth_password(::std::string* auth_password) {
  if (auth_password != NULL) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.auth_password)
}

// string description = 2;
inline void PeerState::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.description)
  return description_.GetNoArena();
}
inline void PeerState::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.description)
}
#if LANG_CXX11
inline void PeerState::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.description)
}
#endif
inline void PeerState::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.description)
}
inline void PeerState::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.description)
}
inline ::std::string* PeerState::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_description() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.description)
}

// uint32 local_as = 3;
inline void PeerState::clear_local_as() {
  local_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.local_as)
  return local_as_;
}
inline void PeerState::set_local_as(::google::protobuf::uint32 value) {
  
  local_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.local_as)
}

// .gobgpapi.Messages messages = 4;
inline bool PeerState::has_messages() const {
  return this != internal_default_instance() && messages_ != NULL;
}
inline void PeerState::clear_messages() {
  if (GetArenaNoVirtual() == NULL && messages_ != NULL) {
    delete messages_;
  }
  messages_ = NULL;
}
inline const ::gobgpapi::Messages& PeerState::messages() const {
  const ::gobgpapi::Messages* p = messages_;
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.messages)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Messages*>(
      &::gobgpapi::_Messages_default_instance_);
}
inline ::gobgpapi::Messages* PeerState::release_messages() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.messages)
  
  ::gobgpapi::Messages* temp = messages_;
  messages_ = NULL;
  return temp;
}
inline ::gobgpapi::Messages* PeerState::mutable_messages() {
  
  if (messages_ == NULL) {
    messages_ = new ::gobgpapi::Messages;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.messages)
  return messages_;
}
inline void PeerState::set_allocated_messages(::gobgpapi::Messages* messages) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete messages_;
  }
  if (messages) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      messages = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, messages, submessage_arena);
    }
    
  } else {
    
  }
  messages_ = messages;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.messages)
}

// string neighbor_address = 5;
inline void PeerState::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.neighbor_address)
  return neighbor_address_.GetNoArena();
}
inline void PeerState::set_neighbor_address(const ::std::string& value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.neighbor_address)
}
#if LANG_CXX11
inline void PeerState::set_neighbor_address(::std::string&& value) {
  
  neighbor_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.neighbor_address)
}
#endif
inline void PeerState::set_neighbor_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.neighbor_address)
}
inline void PeerState::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.neighbor_address)
}
inline ::std::string* PeerState::mutable_neighbor_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.neighbor_address)
  return neighbor_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_neighbor_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.neighbor_address)
  
  return neighbor_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_neighbor_address(::std::string* neighbor_address) {
  if (neighbor_address != NULL) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.neighbor_address)
}

// uint32 peer_as = 6;
inline void PeerState::clear_peer_as() {
  peer_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_as)
  return peer_as_;
}
inline void PeerState::set_peer_as(::google::protobuf::uint32 value) {
  
  peer_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_as)
}

// string peer_group = 7;
inline void PeerState::clear_peer_group() {
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_group)
  return peer_group_.GetNoArena();
}
inline void PeerState::set_peer_group(const ::std::string& value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_group)
}
#if LANG_CXX11
inline void PeerState::set_peer_group(::std::string&& value) {
  
  peer_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.peer_group)
}
#endif
inline void PeerState::set_peer_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.peer_group)
}
inline void PeerState::set_peer_group(const char* value, size_t size) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.peer_group)
}
inline ::std::string* PeerState::mutable_peer_group() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.peer_group)
  return peer_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_peer_group() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.peer_group)
  
  return peer_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_peer_group(::std::string* peer_group) {
  if (peer_group != NULL) {
    
  } else {
    
  }
  peer_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_group);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.peer_group)
}

// uint32 peer_type = 8;
inline void PeerState::clear_peer_type() {
  peer_type_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_type)
  return peer_type_;
}
inline void PeerState::set_peer_type(::google::protobuf::uint32 value) {
  
  peer_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_type)
}

// .gobgpapi.Queues queues = 9;
inline bool PeerState::has_queues() const {
  return this != internal_default_instance() && queues_ != NULL;
}
inline void PeerState::clear_queues() {
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
}
inline const ::gobgpapi::Queues& PeerState::queues() const {
  const ::gobgpapi::Queues* p = queues_;
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.queues)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Queues*>(
      &::gobgpapi::_Queues_default_instance_);
}
inline ::gobgpapi::Queues* PeerState::release_queues() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.queues)
  
  ::gobgpapi::Queues* temp = queues_;
  queues_ = NULL;
  return temp;
}
inline ::gobgpapi::Queues* PeerState::mutable_queues() {
  
  if (queues_ == NULL) {
    queues_ = new ::gobgpapi::Queues;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.queues)
  return queues_;
}
inline void PeerState::set_allocated_queues(::gobgpapi::Queues* queues) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete queues_;
  }
  if (queues) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queues = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queues, submessage_arena);
    }
    
  } else {
    
  }
  queues_ = queues;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.queues)
}

// uint32 remove_private_as = 10;
inline void PeerState::clear_remove_private_as() {
  remove_private_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.remove_private_as)
  return remove_private_as_;
}
inline void PeerState::set_remove_private_as(::google::protobuf::uint32 value) {
  
  remove_private_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.remove_private_as)
}

// bool route_flap_damping = 11;
inline void PeerState::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
inline bool PeerState::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.route_flap_damping)
  return route_flap_damping_;
}
inline void PeerState::set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.route_flap_damping)
}

// uint32 send_community = 12;
inline void PeerState::clear_send_community() {
  send_community_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.send_community)
  return send_community_;
}
inline void PeerState::set_send_community(::google::protobuf::uint32 value) {
  
  send_community_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.send_community)
}

// uint32 session_state = 13;
inline void PeerState::clear_session_state() {
  session_state_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::session_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.session_state)
  return session_state_;
}
inline void PeerState::set_session_state(::google::protobuf::uint32 value) {
  
  session_state_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.session_state)
}

// repeated string supported_capabilities = 14;
inline int PeerState::supported_capabilities_size() const {
  return supported_capabilities_.size();
}
inline void PeerState::clear_supported_capabilities() {
  supported_capabilities_.Clear();
}
inline const ::std::string& PeerState::supported_capabilities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_.Get(index);
}
inline ::std::string* PeerState::mutable_supported_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_.Mutable(index);
}
inline void PeerState::set_supported_capabilities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.supported_capabilities)
  supported_capabilities_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PeerState::set_supported_capabilities(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.supported_capabilities)
  supported_capabilities_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PeerState::set_supported_capabilities(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_capabilities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.supported_capabilities)
}
inline void PeerState::set_supported_capabilities(int index, const char* value, size_t size) {
  supported_capabilities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.supported_capabilities)
}
inline ::std::string* PeerState::add_supported_capabilities() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_.Add();
}
inline void PeerState::add_supported_capabilities(const ::std::string& value) {
  supported_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.PeerState.supported_capabilities)
}
#if LANG_CXX11
inline void PeerState::add_supported_capabilities(::std::string&& value) {
  supported_capabilities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.PeerState.supported_capabilities)
}
#endif
inline void PeerState::add_supported_capabilities(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.PeerState.supported_capabilities)
}
inline void PeerState::add_supported_capabilities(const char* value, size_t size) {
  supported_capabilities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.PeerState.supported_capabilities)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerState::supported_capabilities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerState::mutable_supported_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerState.supported_capabilities)
  return &supported_capabilities_;
}

// string bgp_state = 15;
inline void PeerState::clear_bgp_state() {
  bgp_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::bgp_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.bgp_state)
  return bgp_state_.GetNoArena();
}
inline void PeerState::set_bgp_state(const ::std::string& value) {
  
  bgp_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.bgp_state)
}
#if LANG_CXX11
inline void PeerState::set_bgp_state(::std::string&& value) {
  
  bgp_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.bgp_state)
}
#endif
inline void PeerState::set_bgp_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bgp_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.bgp_state)
}
inline void PeerState::set_bgp_state(const char* value, size_t size) {
  
  bgp_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.bgp_state)
}
inline ::std::string* PeerState::mutable_bgp_state() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.bgp_state)
  return bgp_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_bgp_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.bgp_state)
  
  return bgp_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_bgp_state(::std::string* bgp_state) {
  if (bgp_state != NULL) {
    
  } else {
    
  }
  bgp_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bgp_state);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.bgp_state)
}

// .gobgpapi.PeerState.AdminState admin_state = 16;
inline void PeerState::clear_admin_state() {
  admin_state_ = 0;
}
inline ::gobgpapi::PeerState_AdminState PeerState::admin_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.admin_state)
  return static_cast< ::gobgpapi::PeerState_AdminState >(admin_state_);
}
inline void PeerState::set_admin_state(::gobgpapi::PeerState_AdminState value) {
  
  admin_state_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.admin_state)
}

// uint32 received = 17;
inline void PeerState::clear_received() {
  received_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.received)
  return received_;
}
inline void PeerState::set_received(::google::protobuf::uint32 value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.received)
}

// uint32 accepted = 18;
inline void PeerState::clear_accepted() {
  accepted_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::accepted() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.accepted)
  return accepted_;
}
inline void PeerState::set_accepted(::google::protobuf::uint32 value) {
  
  accepted_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.accepted)
}

// uint32 advertised = 19;
inline void PeerState::clear_advertised() {
  advertised_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::advertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.advertised)
  return advertised_;
}
inline void PeerState::set_advertised(::google::protobuf::uint32 value) {
  
  advertised_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.advertised)
}

// uint32 out_q = 20;
inline void PeerState::clear_out_q() {
  out_q_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::out_q() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.out_q)
  return out_q_;
}
inline void PeerState::set_out_q(::google::protobuf::uint32 value) {
  
  out_q_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.out_q)
}

// uint32 flops = 21;
inline void PeerState::clear_flops() {
  flops_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::flops() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.flops)
  return flops_;
}
inline void PeerState::set_flops(::google::protobuf::uint32 value) {
  
  flops_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.flops)
}

// -------------------------------------------------------------------

// Messages

// .gobgpapi.Message received = 1;
inline bool Messages::has_received() const {
  return this != internal_default_instance() && received_ != NULL;
}
inline void Messages::clear_received() {
  if (GetArenaNoVirtual() == NULL && received_ != NULL) {
    delete received_;
  }
  received_ = NULL;
}
inline const ::gobgpapi::Message& Messages::received() const {
  const ::gobgpapi::Message* p = received_;
  // @@protoc_insertion_point(field_get:gobgpapi.Messages.received)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Message*>(
      &::gobgpapi::_Message_default_instance_);
}
inline ::gobgpapi::Message* Messages::release_received() {
  // @@protoc_insertion_point(field_release:gobgpapi.Messages.received)
  
  ::gobgpapi::Message* temp = received_;
  received_ = NULL;
  return temp;
}
inline ::gobgpapi::Message* Messages::mutable_received() {
  
  if (received_ == NULL) {
    received_ = new ::gobgpapi::Message;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Messages.received)
  return received_;
}
inline void Messages::set_allocated_received(::gobgpapi::Message* received) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete received_;
  }
  if (received) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      received = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, received, submessage_arena);
    }
    
  } else {
    
  }
  received_ = received;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Messages.received)
}

// .gobgpapi.Message sent = 2;
inline bool Messages::has_sent() const {
  return this != internal_default_instance() && sent_ != NULL;
}
inline void Messages::clear_sent() {
  if (GetArenaNoVirtual() == NULL && sent_ != NULL) {
    delete sent_;
  }
  sent_ = NULL;
}
inline const ::gobgpapi::Message& Messages::sent() const {
  const ::gobgpapi::Message* p = sent_;
  // @@protoc_insertion_point(field_get:gobgpapi.Messages.sent)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Message*>(
      &::gobgpapi::_Message_default_instance_);
}
inline ::gobgpapi::Message* Messages::release_sent() {
  // @@protoc_insertion_point(field_release:gobgpapi.Messages.sent)
  
  ::gobgpapi::Message* temp = sent_;
  sent_ = NULL;
  return temp;
}
inline ::gobgpapi::Message* Messages::mutable_sent() {
  
  if (sent_ == NULL) {
    sent_ = new ::gobgpapi::Message;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Messages.sent)
  return sent_;
}
inline void Messages::set_allocated_sent(::gobgpapi::Message* sent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sent_;
  }
  if (sent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sent, submessage_arena);
    }
    
  } else {
    
  }
  sent_ = sent;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Messages.sent)
}

// -------------------------------------------------------------------

// Message

// uint64 NOTIFICATION = 1;
inline void Message::clear_notification() {
  notification_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::notification() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.NOTIFICATION)
  return notification_;
}
inline void Message::set_notification(::google::protobuf::uint64 value) {
  
  notification_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.NOTIFICATION)
}

// uint64 UPDATE = 2;
inline void Message::clear_update() {
  update_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::update() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.UPDATE)
  return update_;
}
inline void Message::set_update(::google::protobuf::uint64 value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.UPDATE)
}

// uint64 OPEN = 3;
inline void Message::clear_open() {
  open_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::open() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.OPEN)
  return open_;
}
inline void Message::set_open(::google::protobuf::uint64 value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.OPEN)
}

// uint64 KEEPALIVE = 4;
inline void Message::clear_keepalive() {
  keepalive_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::keepalive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.KEEPALIVE)
  return keepalive_;
}
inline void Message::set_keepalive(::google::protobuf::uint64 value) {
  
  keepalive_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.KEEPALIVE)
}

// uint64 REFRESH = 5;
inline void Message::clear_refresh() {
  refresh_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::refresh() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.REFRESH)
  return refresh_;
}
inline void Message::set_refresh(::google::protobuf::uint64 value) {
  
  refresh_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.REFRESH)
}

// uint64 DISCARDED = 6;
inline void Message::clear_discarded() {
  discarded_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::discarded() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.DISCARDED)
  return discarded_;
}
inline void Message::set_discarded(::google::protobuf::uint64 value) {
  
  discarded_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.DISCARDED)
}

// uint64 TOTAL = 7;
inline void Message::clear_total() {
  total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::total() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.TOTAL)
  return total_;
}
inline void Message::set_total(::google::protobuf::uint64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.TOTAL)
}

// -------------------------------------------------------------------

// Queues

// uint32 input = 1;
inline void Queues::clear_input() {
  input_ = 0u;
}
inline ::google::protobuf::uint32 Queues::input() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Queues.input)
  return input_;
}
inline void Queues::set_input(::google::protobuf::uint32 value) {
  
  input_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Queues.input)
}

// uint32 output = 2;
inline void Queues::clear_output() {
  output_ = 0u;
}
inline ::google::protobuf::uint32 Queues::output() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Queues.output)
  return output_;
}
inline void Queues::set_output(::google::protobuf::uint32 value) {
  
  output_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Queues.output)
}

// -------------------------------------------------------------------

// Timers

// .gobgpapi.TimersConfig config = 1;
inline bool Timers::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Timers::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::TimersConfig& Timers::config() const {
  const ::gobgpapi::TimersConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.Timers.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::TimersConfig*>(
      &::gobgpapi::_TimersConfig_default_instance_);
}
inline ::gobgpapi::TimersConfig* Timers::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.Timers.config)
  
  ::gobgpapi::TimersConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::TimersConfig* Timers::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::TimersConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Timers.config)
  return config_;
}
inline void Timers::set_allocated_config(::gobgpapi::TimersConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Timers.config)
}

// .gobgpapi.TimersState state = 2;
inline bool Timers::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Timers::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::TimersState& Timers::state() const {
  const ::gobgpapi::TimersState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.Timers.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::TimersState*>(
      &::gobgpapi::_TimersState_default_instance_);
}
inline ::gobgpapi::TimersState* Timers::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.Timers.state)
  
  ::gobgpapi::TimersState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::TimersState* Timers::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::TimersState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Timers.state)
  return state_;
}
inline void Timers::set_allocated_state(::gobgpapi::TimersState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Timers.state)
}

// -------------------------------------------------------------------

// TimersConfig

// uint64 connect_retry = 1;
inline void TimersConfig::clear_connect_retry() {
  connect_retry_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersConfig::connect_retry() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.connect_retry)
  return connect_retry_;
}
inline void TimersConfig::set_connect_retry(::google::protobuf::uint64 value) {
  
  connect_retry_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.connect_retry)
}

// uint64 hold_time = 2;
inline void TimersConfig::clear_hold_time() {
  hold_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersConfig::hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.hold_time)
  return hold_time_;
}
inline void TimersConfig::set_hold_time(::google::protobuf::uint64 value) {
  
  hold_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.hold_time)
}

// uint64 keepalive_interval = 3;
inline void TimersConfig::clear_keepalive_interval() {
  keepalive_interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersConfig::keepalive_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.keepalive_interval)
  return keepalive_interval_;
}
inline void TimersConfig::set_keepalive_interval(::google::protobuf::uint64 value) {
  
  keepalive_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.keepalive_interval)
}

// uint64 minimum_advertisement_interval = 4;
inline void TimersConfig::clear_minimum_advertisement_interval() {
  minimum_advertisement_interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersConfig::minimum_advertisement_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.minimum_advertisement_interval)
  return minimum_advertisement_interval_;
}
inline void TimersConfig::set_minimum_advertisement_interval(::google::protobuf::uint64 value) {
  
  minimum_advertisement_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.minimum_advertisement_interval)
}

// -------------------------------------------------------------------

// TimersState

// uint64 connect_retry = 1;
inline void TimersState::clear_connect_retry() {
  connect_retry_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::connect_retry() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.connect_retry)
  return connect_retry_;
}
inline void TimersState::set_connect_retry(::google::protobuf::uint64 value) {
  
  connect_retry_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.connect_retry)
}

// uint64 hold_time = 2;
inline void TimersState::clear_hold_time() {
  hold_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.hold_time)
  return hold_time_;
}
inline void TimersState::set_hold_time(::google::protobuf::uint64 value) {
  
  hold_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.hold_time)
}

// uint64 keepalive_interval = 3;
inline void TimersState::clear_keepalive_interval() {
  keepalive_interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::keepalive_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.keepalive_interval)
  return keepalive_interval_;
}
inline void TimersState::set_keepalive_interval(::google::protobuf::uint64 value) {
  
  keepalive_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.keepalive_interval)
}

// uint64 minimum_advertisement_interval = 4;
inline void TimersState::clear_minimum_advertisement_interval() {
  minimum_advertisement_interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::minimum_advertisement_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.minimum_advertisement_interval)
  return minimum_advertisement_interval_;
}
inline void TimersState::set_minimum_advertisement_interval(::google::protobuf::uint64 value) {
  
  minimum_advertisement_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.minimum_advertisement_interval)
}

// uint64 negotiated_hold_time = 5;
inline void TimersState::clear_negotiated_hold_time() {
  negotiated_hold_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::negotiated_hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.negotiated_hold_time)
  return negotiated_hold_time_;
}
inline void TimersState::set_negotiated_hold_time(::google::protobuf::uint64 value) {
  
  negotiated_hold_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.negotiated_hold_time)
}

// uint64 uptime = 6;
inline void TimersState::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::uptime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.uptime)
  return uptime_;
}
inline void TimersState::set_uptime(::google::protobuf::uint64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.uptime)
}

// uint64 downtime = 7;
inline void TimersState::clear_downtime() {
  downtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::downtime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.downtime)
  return downtime_;
}
inline void TimersState::set_downtime(::google::protobuf::uint64 value) {
  
  downtime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.downtime)
}

// -------------------------------------------------------------------

// Transport

// string local_address = 1;
inline void Transport::clear_local_address() {
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transport::local_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.local_address)
  return local_address_.GetNoArena();
}
inline void Transport::set_local_address(const ::std::string& value) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.local_address)
}
#if LANG_CXX11
inline void Transport::set_local_address(::std::string&& value) {
  
  local_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Transport.local_address)
}
#endif
inline void Transport::set_local_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Transport.local_address)
}
inline void Transport::set_local_address(const char* value, size_t size) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Transport.local_address)
}
inline ::std::string* Transport::mutable_local_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Transport.local_address)
  return local_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport::release_local_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.Transport.local_address)
  
  return local_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport::set_allocated_local_address(::std::string* local_address) {
  if (local_address != NULL) {
    
  } else {
    
  }
  local_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Transport.local_address)
}

// uint32 local_port = 2;
inline void Transport::clear_local_port() {
  local_port_ = 0u;
}
inline ::google::protobuf::uint32 Transport::local_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.local_port)
  return local_port_;
}
inline void Transport::set_local_port(::google::protobuf::uint32 value) {
  
  local_port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.local_port)
}

// bool mtu_discovery = 3;
inline void Transport::clear_mtu_discovery() {
  mtu_discovery_ = false;
}
inline bool Transport::mtu_discovery() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.mtu_discovery)
  return mtu_discovery_;
}
inline void Transport::set_mtu_discovery(bool value) {
  
  mtu_discovery_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.mtu_discovery)
}

// bool passive_mode = 4;
inline void Transport::clear_passive_mode() {
  passive_mode_ = false;
}
inline bool Transport::passive_mode() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.passive_mode)
  return passive_mode_;
}
inline void Transport::set_passive_mode(bool value) {
  
  passive_mode_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.passive_mode)
}

// string remote_address = 5;
inline void Transport::clear_remote_address() {
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transport::remote_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.remote_address)
  return remote_address_.GetNoArena();
}
inline void Transport::set_remote_address(const ::std::string& value) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.remote_address)
}
#if LANG_CXX11
inline void Transport::set_remote_address(::std::string&& value) {
  
  remote_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Transport.remote_address)
}
#endif
inline void Transport::set_remote_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Transport.remote_address)
}
inline void Transport::set_remote_address(const char* value, size_t size) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Transport.remote_address)
}
inline ::std::string* Transport::mutable_remote_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Transport.remote_address)
  return remote_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport::release_remote_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.Transport.remote_address)
  
  return remote_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport::set_allocated_remote_address(::std::string* remote_address) {
  if (remote_address != NULL) {
    
  } else {
    
  }
  remote_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Transport.remote_address)
}

// uint32 remote_port = 6;
inline void Transport::clear_remote_port() {
  remote_port_ = 0u;
}
inline ::google::protobuf::uint32 Transport::remote_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.remote_port)
  return remote_port_;
}
inline void Transport::set_remote_port(::google::protobuf::uint32 value) {
  
  remote_port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.remote_port)
}

// uint32 tcp_mss = 7;
inline void Transport::clear_tcp_mss() {
  tcp_mss_ = 0u;
}
inline ::google::protobuf::uint32 Transport::tcp_mss() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.tcp_mss)
  return tcp_mss_;
}
inline void Transport::set_tcp_mss(::google::protobuf::uint32 value) {
  
  tcp_mss_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.tcp_mss)
}

// -------------------------------------------------------------------

// RouteServer

// bool route_server_client = 1;
inline void RouteServer::clear_route_server_client() {
  route_server_client_ = false;
}
inline bool RouteServer::route_server_client() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteServer.route_server_client)
  return route_server_client_;
}
inline void RouteServer::set_route_server_client(bool value) {
  
  route_server_client_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteServer.route_server_client)
}

// -------------------------------------------------------------------

// GracefulRestart

// bool enabled = 1;
inline void GracefulRestart::clear_enabled() {
  enabled_ = false;
}
inline bool GracefulRestart::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.enabled)
  return enabled_;
}
inline void GracefulRestart::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.enabled)
}

// uint32 restart_time = 2;
inline void GracefulRestart::clear_restart_time() {
  restart_time_ = 0u;
}
inline ::google::protobuf::uint32 GracefulRestart::restart_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.restart_time)
  return restart_time_;
}
inline void GracefulRestart::set_restart_time(::google::protobuf::uint32 value) {
  
  restart_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.restart_time)
}

// bool helper_only = 3;
inline void GracefulRestart::clear_helper_only() {
  helper_only_ = false;
}
inline bool GracefulRestart::helper_only() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.helper_only)
  return helper_only_;
}
inline void GracefulRestart::set_helper_only(bool value) {
  
  helper_only_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.helper_only)
}

// uint32 deferral_time = 4;
inline void GracefulRestart::clear_deferral_time() {
  deferral_time_ = 0u;
}
inline ::google::protobuf::uint32 GracefulRestart::deferral_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.deferral_time)
  return deferral_time_;
}
inline void GracefulRestart::set_deferral_time(::google::protobuf::uint32 value) {
  
  deferral_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.deferral_time)
}

// bool notification_enabled = 5;
inline void GracefulRestart::clear_notification_enabled() {
  notification_enabled_ = false;
}
inline bool GracefulRestart::notification_enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.notification_enabled)
  return notification_enabled_;
}
inline void GracefulRestart::set_notification_enabled(bool value) {
  
  notification_enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.notification_enabled)
}

// bool longlived_enabled = 6;
inline void GracefulRestart::clear_longlived_enabled() {
  longlived_enabled_ = false;
}
inline bool GracefulRestart::longlived_enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.longlived_enabled)
  return longlived_enabled_;
}
inline void GracefulRestart::set_longlived_enabled(bool value) {
  
  longlived_enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.longlived_enabled)
}

// -------------------------------------------------------------------

// MpGracefulRestartConfig

// bool enabled = 1;
inline void MpGracefulRestartConfig::clear_enabled() {
  enabled_ = false;
}
inline bool MpGracefulRestartConfig::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartConfig.enabled)
  return enabled_;
}
inline void MpGracefulRestartConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartConfig.enabled)
}

// -------------------------------------------------------------------

// MpGracefulRestartState

// bool enabled = 1;
inline void MpGracefulRestartState::clear_enabled() {
  enabled_ = false;
}
inline bool MpGracefulRestartState::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.enabled)
  return enabled_;
}
inline void MpGracefulRestartState::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.enabled)
}

// bool received = 2;
inline void MpGracefulRestartState::clear_received() {
  received_ = false;
}
inline bool MpGracefulRestartState::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.received)
  return received_;
}
inline void MpGracefulRestartState::set_received(bool value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.received)
}

// bool advertised = 3;
inline void MpGracefulRestartState::clear_advertised() {
  advertised_ = false;
}
inline bool MpGracefulRestartState::advertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.advertised)
  return advertised_;
}
inline void MpGracefulRestartState::set_advertised(bool value) {
  
  advertised_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.advertised)
}

// bool end_of_rib_received = 4;
inline void MpGracefulRestartState::clear_end_of_rib_received() {
  end_of_rib_received_ = false;
}
inline bool MpGracefulRestartState::end_of_rib_received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.end_of_rib_received)
  return end_of_rib_received_;
}
inline void MpGracefulRestartState::set_end_of_rib_received(bool value) {
  
  end_of_rib_received_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.end_of_rib_received)
}

// bool end_of_rib_sent = 5;
inline void MpGracefulRestartState::clear_end_of_rib_sent() {
  end_of_rib_sent_ = false;
}
inline bool MpGracefulRestartState::end_of_rib_sent() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.end_of_rib_sent)
  return end_of_rib_sent_;
}
inline void MpGracefulRestartState::set_end_of_rib_sent(bool value) {
  
  end_of_rib_sent_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.end_of_rib_sent)
}

// -------------------------------------------------------------------

// MpGracefulRestart

// .gobgpapi.MpGracefulRestartConfig config = 1;
inline bool MpGracefulRestart::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void MpGracefulRestart::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::MpGracefulRestartConfig& MpGracefulRestart::config() const {
  const ::gobgpapi::MpGracefulRestartConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestart.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MpGracefulRestartConfig*>(
      &::gobgpapi::_MpGracefulRestartConfig_default_instance_);
}
inline ::gobgpapi::MpGracefulRestartConfig* MpGracefulRestart::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.MpGracefulRestart.config)
  
  ::gobgpapi::MpGracefulRestartConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::MpGracefulRestartConfig* MpGracefulRestart::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::MpGracefulRestartConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.MpGracefulRestart.config)
  return config_;
}
inline void MpGracefulRestart::set_allocated_config(::gobgpapi::MpGracefulRestartConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MpGracefulRestart.config)
}

// .gobgpapi.MpGracefulRestartState state = 2;
inline bool MpGracefulRestart::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void MpGracefulRestart::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::MpGracefulRestartState& MpGracefulRestart::state() const {
  const ::gobgpapi::MpGracefulRestartState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestart.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MpGracefulRestartState*>(
      &::gobgpapi::_MpGracefulRestartState_default_instance_);
}
inline ::gobgpapi::MpGracefulRestartState* MpGracefulRestart::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.MpGracefulRestart.state)
  
  ::gobgpapi::MpGracefulRestartState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::MpGracefulRestartState* MpGracefulRestart::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::MpGracefulRestartState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.MpGracefulRestart.state)
  return state_;
}
inline void MpGracefulRestart::set_allocated_state(::gobgpapi::MpGracefulRestartState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MpGracefulRestart.state)
}

// -------------------------------------------------------------------

// AfiSafiConfig

// uint32 family = 1;
inline void AfiSafiConfig::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 AfiSafiConfig::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiConfig.family)
  return family_;
}
inline void AfiSafiConfig::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiConfig.family)
}

// bool enabled = 2;
inline void AfiSafiConfig::clear_enabled() {
  enabled_ = false;
}
inline bool AfiSafiConfig::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiConfig.enabled)
  return enabled_;
}
inline void AfiSafiConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiConfig.enabled)
}

// -------------------------------------------------------------------

// AfiSafiState

// uint32 family = 1;
inline void AfiSafiState::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 AfiSafiState::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiState.family)
  return family_;
}
inline void AfiSafiState::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiState.family)
}

// bool enabled = 2;
inline void AfiSafiState::clear_enabled() {
  enabled_ = false;
}
inline bool AfiSafiState::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiState.enabled)
  return enabled_;
}
inline void AfiSafiState::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiState.enabled)
}

// uint32 total_paths = 3;
inline void AfiSafiState::clear_total_paths() {
  total_paths_ = 0u;
}
inline ::google::protobuf::uint32 AfiSafiState::total_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiState.total_paths)
  return total_paths_;
}
inline void AfiSafiState::set_total_paths(::google::protobuf::uint32 value) {
  
  total_paths_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiState.total_paths)
}

// uint32 total_prefixes = 4;
inline void AfiSafiState::clear_total_prefixes() {
  total_prefixes_ = 0u;
}
inline ::google::protobuf::uint32 AfiSafiState::total_prefixes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiState.total_prefixes)
  return total_prefixes_;
}
inline void AfiSafiState::set_total_prefixes(::google::protobuf::uint32 value) {
  
  total_prefixes_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiState.total_prefixes)
}

// -------------------------------------------------------------------

// RouteSelectionOptionsConfig

// bool always_compare_med = 1;
inline void RouteSelectionOptionsConfig::clear_always_compare_med() {
  always_compare_med_ = false;
}
inline bool RouteSelectionOptionsConfig::always_compare_med() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.always_compare_med)
  return always_compare_med_;
}
inline void RouteSelectionOptionsConfig::set_always_compare_med(bool value) {
  
  always_compare_med_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.always_compare_med)
}

// bool ignore_as_path_length = 2;
inline void RouteSelectionOptionsConfig::clear_ignore_as_path_length() {
  ignore_as_path_length_ = false;
}
inline bool RouteSelectionOptionsConfig::ignore_as_path_length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.ignore_as_path_length)
  return ignore_as_path_length_;
}
inline void RouteSelectionOptionsConfig::set_ignore_as_path_length(bool value) {
  
  ignore_as_path_length_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.ignore_as_path_length)
}

// bool external_compare_router_id = 3;
inline void RouteSelectionOptionsConfig::clear_external_compare_router_id() {
  external_compare_router_id_ = false;
}
inline bool RouteSelectionOptionsConfig::external_compare_router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.external_compare_router_id)
  return external_compare_router_id_;
}
inline void RouteSelectionOptionsConfig::set_external_compare_router_id(bool value) {
  
  external_compare_router_id_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.external_compare_router_id)
}

// bool advertise_inactive_routes = 4;
inline void RouteSelectionOptionsConfig::clear_advertise_inactive_routes() {
  advertise_inactive_routes_ = false;
}
inline bool RouteSelectionOptionsConfig::advertise_inactive_routes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.advertise_inactive_routes)
  return advertise_inactive_routes_;
}
inline void RouteSelectionOptionsConfig::set_advertise_inactive_routes(bool value) {
  
  advertise_inactive_routes_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.advertise_inactive_routes)
}

// bool enable_aigp = 5;
inline void RouteSelectionOptionsConfig::clear_enable_aigp() {
  enable_aigp_ = false;
}
inline bool RouteSelectionOptionsConfig::enable_aigp() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.enable_aigp)
  return enable_aigp_;
}
inline void RouteSelectionOptionsConfig::set_enable_aigp(bool value) {
  
  enable_aigp_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.enable_aigp)
}

// bool ignore_next_hop_igp_metric = 6;
inline void RouteSelectionOptionsConfig::clear_ignore_next_hop_igp_metric() {
  ignore_next_hop_igp_metric_ = false;
}
inline bool RouteSelectionOptionsConfig::ignore_next_hop_igp_metric() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.ignore_next_hop_igp_metric)
  return ignore_next_hop_igp_metric_;
}
inline void RouteSelectionOptionsConfig::set_ignore_next_hop_igp_metric(bool value) {
  
  ignore_next_hop_igp_metric_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.ignore_next_hop_igp_metric)
}

// -------------------------------------------------------------------

// RouteSelectionOptionsState

// bool always_compare_med = 1;
inline void RouteSelectionOptionsState::clear_always_compare_med() {
  always_compare_med_ = false;
}
inline bool RouteSelectionOptionsState::always_compare_med() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.always_compare_med)
  return always_compare_med_;
}
inline void RouteSelectionOptionsState::set_always_compare_med(bool value) {
  
  always_compare_med_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.always_compare_med)
}

// bool ignore_as_path_length = 2;
inline void RouteSelectionOptionsState::clear_ignore_as_path_length() {
  ignore_as_path_length_ = false;
}
inline bool RouteSelectionOptionsState::ignore_as_path_length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.ignore_as_path_length)
  return ignore_as_path_length_;
}
inline void RouteSelectionOptionsState::set_ignore_as_path_length(bool value) {
  
  ignore_as_path_length_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.ignore_as_path_length)
}

// bool external_compare_router_id = 3;
inline void RouteSelectionOptionsState::clear_external_compare_router_id() {
  external_compare_router_id_ = false;
}
inline bool RouteSelectionOptionsState::external_compare_router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.external_compare_router_id)
  return external_compare_router_id_;
}
inline void RouteSelectionOptionsState::set_external_compare_router_id(bool value) {
  
  external_compare_router_id_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.external_compare_router_id)
}

// bool advertise_inactive_routes = 4;
inline void RouteSelectionOptionsState::clear_advertise_inactive_routes() {
  advertise_inactive_routes_ = false;
}
inline bool RouteSelectionOptionsState::advertise_inactive_routes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.advertise_inactive_routes)
  return advertise_inactive_routes_;
}
inline void RouteSelectionOptionsState::set_advertise_inactive_routes(bool value) {
  
  advertise_inactive_routes_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.advertise_inactive_routes)
}

// bool enable_aigp = 5;
inline void RouteSelectionOptionsState::clear_enable_aigp() {
  enable_aigp_ = false;
}
inline bool RouteSelectionOptionsState::enable_aigp() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.enable_aigp)
  return enable_aigp_;
}
inline void RouteSelectionOptionsState::set_enable_aigp(bool value) {
  
  enable_aigp_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.enable_aigp)
}

// bool ignore_next_hop_igp_metric = 6;
inline void RouteSelectionOptionsState::clear_ignore_next_hop_igp_metric() {
  ignore_next_hop_igp_metric_ = false;
}
inline bool RouteSelectionOptionsState::ignore_next_hop_igp_metric() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.ignore_next_hop_igp_metric)
  return ignore_next_hop_igp_metric_;
}
inline void RouteSelectionOptionsState::set_ignore_next_hop_igp_metric(bool value) {
  
  ignore_next_hop_igp_metric_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.ignore_next_hop_igp_metric)
}

// -------------------------------------------------------------------

// RouteSelectionOptions

// .gobgpapi.RouteSelectionOptionsConfig config = 1;
inline bool RouteSelectionOptions::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void RouteSelectionOptions::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::RouteSelectionOptionsConfig& RouteSelectionOptions::config() const {
  const ::gobgpapi::RouteSelectionOptionsConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptions.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RouteSelectionOptionsConfig*>(
      &::gobgpapi::_RouteSelectionOptionsConfig_default_instance_);
}
inline ::gobgpapi::RouteSelectionOptionsConfig* RouteSelectionOptions::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteSelectionOptions.config)
  
  ::gobgpapi::RouteSelectionOptionsConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::RouteSelectionOptionsConfig* RouteSelectionOptions::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::RouteSelectionOptionsConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteSelectionOptions.config)
  return config_;
}
inline void RouteSelectionOptions::set_allocated_config(::gobgpapi::RouteSelectionOptionsConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteSelectionOptions.config)
}

// .gobgpapi.RouteSelectionOptionsState state = 2;
inline bool RouteSelectionOptions::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void RouteSelectionOptions::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::RouteSelectionOptionsState& RouteSelectionOptions::state() const {
  const ::gobgpapi::RouteSelectionOptionsState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptions.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RouteSelectionOptionsState*>(
      &::gobgpapi::_RouteSelectionOptionsState_default_instance_);
}
inline ::gobgpapi::RouteSelectionOptionsState* RouteSelectionOptions::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteSelectionOptions.state)
  
  ::gobgpapi::RouteSelectionOptionsState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::RouteSelectionOptionsState* RouteSelectionOptions::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::RouteSelectionOptionsState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteSelectionOptions.state)
  return state_;
}
inline void RouteSelectionOptions::set_allocated_state(::gobgpapi::RouteSelectionOptionsState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteSelectionOptions.state)
}

// -------------------------------------------------------------------

// UseMultiplePathsConfig

// bool enabled = 1;
inline void UseMultiplePathsConfig::clear_enabled() {
  enabled_ = false;
}
inline bool UseMultiplePathsConfig::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePathsConfig.enabled)
  return enabled_;
}
inline void UseMultiplePathsConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.UseMultiplePathsConfig.enabled)
}

// -------------------------------------------------------------------

// UseMultiplePathsState

// bool enabled = 1;
inline void UseMultiplePathsState::clear_enabled() {
  enabled_ = false;
}
inline bool UseMultiplePathsState::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePathsState.enabled)
  return enabled_;
}
inline void UseMultiplePathsState::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.UseMultiplePathsState.enabled)
}

// -------------------------------------------------------------------

// EbgpConfig

// bool allow_multiple_as = 1;
inline void EbgpConfig::clear_allow_multiple_as() {
  allow_multiple_as_ = false;
}
inline bool EbgpConfig::allow_multiple_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpConfig.allow_multiple_as)
  return allow_multiple_as_;
}
inline void EbgpConfig::set_allow_multiple_as(bool value) {
  
  allow_multiple_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpConfig.allow_multiple_as)
}

// uint32 maximum_paths = 2;
inline void EbgpConfig::clear_maximum_paths() {
  maximum_paths_ = 0u;
}
inline ::google::protobuf::uint32 EbgpConfig::maximum_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpConfig.maximum_paths)
  return maximum_paths_;
}
inline void EbgpConfig::set_maximum_paths(::google::protobuf::uint32 value) {
  
  maximum_paths_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpConfig.maximum_paths)
}

// -------------------------------------------------------------------

// EbgpState

// bool allow_multiple_as = 1;
inline void EbgpState::clear_allow_multiple_as() {
  allow_multiple_as_ = false;
}
inline bool EbgpState::allow_multiple_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpState.allow_multiple_as)
  return allow_multiple_as_;
}
inline void EbgpState::set_allow_multiple_as(bool value) {
  
  allow_multiple_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpState.allow_multiple_as)
}

// uint32 maximum_paths = 2;
inline void EbgpState::clear_maximum_paths() {
  maximum_paths_ = 0u;
}
inline ::google::protobuf::uint32 EbgpState::maximum_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpState.maximum_paths)
  return maximum_paths_;
}
inline void EbgpState::set_maximum_paths(::google::protobuf::uint32 value) {
  
  maximum_paths_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpState.maximum_paths)
}

// -------------------------------------------------------------------

// Ebgp

// .gobgpapi.EbgpConfig config = 1;
inline bool Ebgp::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Ebgp::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::EbgpConfig& Ebgp::config() const {
  const ::gobgpapi::EbgpConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.Ebgp.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::EbgpConfig*>(
      &::gobgpapi::_EbgpConfig_default_instance_);
}
inline ::gobgpapi::EbgpConfig* Ebgp::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.Ebgp.config)
  
  ::gobgpapi::EbgpConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::EbgpConfig* Ebgp::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::EbgpConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Ebgp.config)
  return config_;
}
inline void Ebgp::set_allocated_config(::gobgpapi::EbgpConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Ebgp.config)
}

// .gobgpapi.EbgpState state = 2;
inline bool Ebgp::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ebgp::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::EbgpState& Ebgp::state() const {
  const ::gobgpapi::EbgpState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.Ebgp.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::EbgpState*>(
      &::gobgpapi::_EbgpState_default_instance_);
}
inline ::gobgpapi::EbgpState* Ebgp::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.Ebgp.state)
  
  ::gobgpapi::EbgpState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::EbgpState* Ebgp::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::EbgpState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Ebgp.state)
  return state_;
}
inline void Ebgp::set_allocated_state(::gobgpapi::EbgpState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Ebgp.state)
}

// -------------------------------------------------------------------

// IbgpConfig

// uint32 maximum_paths = 1;
inline void IbgpConfig::clear_maximum_paths() {
  maximum_paths_ = 0u;
}
inline ::google::protobuf::uint32 IbgpConfig::maximum_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IbgpConfig.maximum_paths)
  return maximum_paths_;
}
inline void IbgpConfig::set_maximum_paths(::google::protobuf::uint32 value) {
  
  maximum_paths_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.IbgpConfig.maximum_paths)
}

// -------------------------------------------------------------------

// IbgpState

// uint32 maximum_paths = 1;
inline void IbgpState::clear_maximum_paths() {
  maximum_paths_ = 0u;
}
inline ::google::protobuf::uint32 IbgpState::maximum_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IbgpState.maximum_paths)
  return maximum_paths_;
}
inline void IbgpState::set_maximum_paths(::google::protobuf::uint32 value) {
  
  maximum_paths_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.IbgpState.maximum_paths)
}

// -------------------------------------------------------------------

// Ibgp

// .gobgpapi.IbgpConfig config = 1;
inline bool Ibgp::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Ibgp::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::IbgpConfig& Ibgp::config() const {
  const ::gobgpapi::IbgpConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.Ibgp.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::IbgpConfig*>(
      &::gobgpapi::_IbgpConfig_default_instance_);
}
inline ::gobgpapi::IbgpConfig* Ibgp::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.Ibgp.config)
  
  ::gobgpapi::IbgpConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::IbgpConfig* Ibgp::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::IbgpConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Ibgp.config)
  return config_;
}
inline void Ibgp::set_allocated_config(::gobgpapi::IbgpConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Ibgp.config)
}

// .gobgpapi.IbgpState state = 2;
inline bool Ibgp::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ibgp::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::IbgpState& Ibgp::state() const {
  const ::gobgpapi::IbgpState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.Ibgp.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::IbgpState*>(
      &::gobgpapi::_IbgpState_default_instance_);
}
inline ::gobgpapi::IbgpState* Ibgp::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.Ibgp.state)
  
  ::gobgpapi::IbgpState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::IbgpState* Ibgp::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::IbgpState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Ibgp.state)
  return state_;
}
inline void Ibgp::set_allocated_state(::gobgpapi::IbgpState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Ibgp.state)
}

// -------------------------------------------------------------------

// UseMultiplePaths

// .gobgpapi.UseMultiplePathsConfig config = 1;
inline bool UseMultiplePaths::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void UseMultiplePaths::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::UseMultiplePathsConfig& UseMultiplePaths::config() const {
  const ::gobgpapi::UseMultiplePathsConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePaths.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::UseMultiplePathsConfig*>(
      &::gobgpapi::_UseMultiplePathsConfig_default_instance_);
}
inline ::gobgpapi::UseMultiplePathsConfig* UseMultiplePaths::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.UseMultiplePaths.config)
  
  ::gobgpapi::UseMultiplePathsConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::UseMultiplePathsConfig* UseMultiplePaths::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::UseMultiplePathsConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.UseMultiplePaths.config)
  return config_;
}
inline void UseMultiplePaths::set_allocated_config(::gobgpapi::UseMultiplePathsConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UseMultiplePaths.config)
}

// .gobgpapi.UseMultiplePathsState state = 2;
inline bool UseMultiplePaths::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void UseMultiplePaths::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::UseMultiplePathsState& UseMultiplePaths::state() const {
  const ::gobgpapi::UseMultiplePathsState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePaths.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::UseMultiplePathsState*>(
      &::gobgpapi::_UseMultiplePathsState_default_instance_);
}
inline ::gobgpapi::UseMultiplePathsState* UseMultiplePaths::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.UseMultiplePaths.state)
  
  ::gobgpapi::UseMultiplePathsState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::UseMultiplePathsState* UseMultiplePaths::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::UseMultiplePathsState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.UseMultiplePaths.state)
  return state_;
}
inline void UseMultiplePaths::set_allocated_state(::gobgpapi::UseMultiplePathsState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UseMultiplePaths.state)
}

// .gobgpapi.Ebgp ebgp = 3;
inline bool UseMultiplePaths::has_ebgp() const {
  return this != internal_default_instance() && ebgp_ != NULL;
}
inline void UseMultiplePaths::clear_ebgp() {
  if (GetArenaNoVirtual() == NULL && ebgp_ != NULL) {
    delete ebgp_;
  }
  ebgp_ = NULL;
}
inline const ::gobgpapi::Ebgp& UseMultiplePaths::ebgp() const {
  const ::gobgpapi::Ebgp* p = ebgp_;
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePaths.ebgp)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Ebgp*>(
      &::gobgpapi::_Ebgp_default_instance_);
}
inline ::gobgpapi::Ebgp* UseMultiplePaths::release_ebgp() {
  // @@protoc_insertion_point(field_release:gobgpapi.UseMultiplePaths.ebgp)
  
  ::gobgpapi::Ebgp* temp = ebgp_;
  ebgp_ = NULL;
  return temp;
}
inline ::gobgpapi::Ebgp* UseMultiplePaths::mutable_ebgp() {
  
  if (ebgp_ == NULL) {
    ebgp_ = new ::gobgpapi::Ebgp;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.UseMultiplePaths.ebgp)
  return ebgp_;
}
inline void UseMultiplePaths::set_allocated_ebgp(::gobgpapi::Ebgp* ebgp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ebgp_;
  }
  if (ebgp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ebgp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ebgp, submessage_arena);
    }
    
  } else {
    
  }
  ebgp_ = ebgp;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UseMultiplePaths.ebgp)
}

// .gobgpapi.Ibgp ibgp = 4;
inline bool UseMultiplePaths::has_ibgp() const {
  return this != internal_default_instance() && ibgp_ != NULL;
}
inline void UseMultiplePaths::clear_ibgp() {
  if (GetArenaNoVirtual() == NULL && ibgp_ != NULL) {
    delete ibgp_;
  }
  ibgp_ = NULL;
}
inline const ::gobgpapi::Ibgp& UseMultiplePaths::ibgp() const {
  const ::gobgpapi::Ibgp* p = ibgp_;
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePaths.ibgp)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Ibgp*>(
      &::gobgpapi::_Ibgp_default_instance_);
}
inline ::gobgpapi::Ibgp* UseMultiplePaths::release_ibgp() {
  // @@protoc_insertion_point(field_release:gobgpapi.UseMultiplePaths.ibgp)
  
  ::gobgpapi::Ibgp* temp = ibgp_;
  ibgp_ = NULL;
  return temp;
}
inline ::gobgpapi::Ibgp* UseMultiplePaths::mutable_ibgp() {
  
  if (ibgp_ == NULL) {
    ibgp_ = new ::gobgpapi::Ibgp;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.UseMultiplePaths.ibgp)
  return ibgp_;
}
inline void UseMultiplePaths::set_allocated_ibgp(::gobgpapi::Ibgp* ibgp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ibgp_;
  }
  if (ibgp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ibgp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ibgp, submessage_arena);
    }
    
  } else {
    
  }
  ibgp_ = ibgp;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UseMultiplePaths.ibgp)
}

// -------------------------------------------------------------------

// RouteTargetMembershipConfig

// uint32 deferral_time = 1;
inline void RouteTargetMembershipConfig::clear_deferral_time() {
  deferral_time_ = 0u;
}
inline ::google::protobuf::uint32 RouteTargetMembershipConfig::deferral_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembershipConfig.deferral_time)
  return deferral_time_;
}
inline void RouteTargetMembershipConfig::set_deferral_time(::google::protobuf::uint32 value) {
  
  deferral_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteTargetMembershipConfig.deferral_time)
}

// -------------------------------------------------------------------

// RouteTargetMembershipState

// uint32 deferral_time = 1;
inline void RouteTargetMembershipState::clear_deferral_time() {
  deferral_time_ = 0u;
}
inline ::google::protobuf::uint32 RouteTargetMembershipState::deferral_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembershipState.deferral_time)
  return deferral_time_;
}
inline void RouteTargetMembershipState::set_deferral_time(::google::protobuf::uint32 value) {
  
  deferral_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteTargetMembershipState.deferral_time)
}

// -------------------------------------------------------------------

// RouteTargetMembership

// .gobgpapi.RouteTargetMembershipConfig config = 1;
inline bool RouteTargetMembership::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void RouteTargetMembership::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::RouteTargetMembershipConfig& RouteTargetMembership::config() const {
  const ::gobgpapi::RouteTargetMembershipConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembership.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RouteTargetMembershipConfig*>(
      &::gobgpapi::_RouteTargetMembershipConfig_default_instance_);
}
inline ::gobgpapi::RouteTargetMembershipConfig* RouteTargetMembership::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteTargetMembership.config)
  
  ::gobgpapi::RouteTargetMembershipConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::RouteTargetMembershipConfig* RouteTargetMembership::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::RouteTargetMembershipConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteTargetMembership.config)
  return config_;
}
inline void RouteTargetMembership::set_allocated_config(::gobgpapi::RouteTargetMembershipConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteTargetMembership.config)
}

// .gobgpapi.RouteTargetMembershipState state = 2;
inline bool RouteTargetMembership::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void RouteTargetMembership::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::RouteTargetMembershipState& RouteTargetMembership::state() const {
  const ::gobgpapi::RouteTargetMembershipState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembership.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RouteTargetMembershipState*>(
      &::gobgpapi::_RouteTargetMembershipState_default_instance_);
}
inline ::gobgpapi::RouteTargetMembershipState* RouteTargetMembership::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteTargetMembership.state)
  
  ::gobgpapi::RouteTargetMembershipState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::RouteTargetMembershipState* RouteTargetMembership::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::RouteTargetMembershipState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteTargetMembership.state)
  return state_;
}
inline void RouteTargetMembership::set_allocated_state(::gobgpapi::RouteTargetMembershipState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteTargetMembership.state)
}

// -------------------------------------------------------------------

// LongLivedGracefulRestartConfig

// bool enabled = 1;
inline void LongLivedGracefulRestartConfig::clear_enabled() {
  enabled_ = false;
}
inline bool LongLivedGracefulRestartConfig::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartConfig.enabled)
  return enabled_;
}
inline void LongLivedGracefulRestartConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartConfig.enabled)
}

// uint32 restart_time = 2;
inline void LongLivedGracefulRestartConfig::clear_restart_time() {
  restart_time_ = 0u;
}
inline ::google::protobuf::uint32 LongLivedGracefulRestartConfig::restart_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartConfig.restart_time)
  return restart_time_;
}
inline void LongLivedGracefulRestartConfig::set_restart_time(::google::protobuf::uint32 value) {
  
  restart_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartConfig.restart_time)
}

// -------------------------------------------------------------------

// LongLivedGracefulRestartState

// bool enabled = 1;
inline void LongLivedGracefulRestartState::clear_enabled() {
  enabled_ = false;
}
inline bool LongLivedGracefulRestartState::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.enabled)
  return enabled_;
}
inline void LongLivedGracefulRestartState::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.enabled)
}

// bool received = 2;
inline void LongLivedGracefulRestartState::clear_received() {
  received_ = false;
}
inline bool LongLivedGracefulRestartState::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.received)
  return received_;
}
inline void LongLivedGracefulRestartState::set_received(bool value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.received)
}

// bool advertised = 3;
inline void LongLivedGracefulRestartState::clear_advertised() {
  advertised_ = false;
}
inline bool LongLivedGracefulRestartState::advertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.advertised)
  return advertised_;
}
inline void LongLivedGracefulRestartState::set_advertised(bool value) {
  
  advertised_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.advertised)
}

// uint32 peer_restart_time = 4;
inline void LongLivedGracefulRestartState::clear_peer_restart_time() {
  peer_restart_time_ = 0u;
}
inline ::google::protobuf::uint32 LongLivedGracefulRestartState::peer_restart_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.peer_restart_time)
  return peer_restart_time_;
}
inline void LongLivedGracefulRestartState::set_peer_restart_time(::google::protobuf::uint32 value) {
  
  peer_restart_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.peer_restart_time)
}

// bool peer_restart_timer_expired = 5;
inline void LongLivedGracefulRestartState::clear_peer_restart_timer_expired() {
  peer_restart_timer_expired_ = false;
}
inline bool LongLivedGracefulRestartState::peer_restart_timer_expired() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.peer_restart_timer_expired)
  return peer_restart_timer_expired_;
}
inline void LongLivedGracefulRestartState::set_peer_restart_timer_expired(bool value) {
  
  peer_restart_timer_expired_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.peer_restart_timer_expired)
}

// -------------------------------------------------------------------

// LongLivedGracefulRestart

// .gobgpapi.LongLivedGracefulRestartConfig config = 1;
inline bool LongLivedGracefulRestart::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void LongLivedGracefulRestart::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::LongLivedGracefulRestartConfig& LongLivedGracefulRestart::config() const {
  const ::gobgpapi::LongLivedGracefulRestartConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestart.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::LongLivedGracefulRestartConfig*>(
      &::gobgpapi::_LongLivedGracefulRestartConfig_default_instance_);
}
inline ::gobgpapi::LongLivedGracefulRestartConfig* LongLivedGracefulRestart::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.LongLivedGracefulRestart.config)
  
  ::gobgpapi::LongLivedGracefulRestartConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::LongLivedGracefulRestartConfig* LongLivedGracefulRestart::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::LongLivedGracefulRestartConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.LongLivedGracefulRestart.config)
  return config_;
}
inline void LongLivedGracefulRestart::set_allocated_config(::gobgpapi::LongLivedGracefulRestartConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LongLivedGracefulRestart.config)
}

// .gobgpapi.LongLivedGracefulRestartState state = 2;
inline bool LongLivedGracefulRestart::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void LongLivedGracefulRestart::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::LongLivedGracefulRestartState& LongLivedGracefulRestart::state() const {
  const ::gobgpapi::LongLivedGracefulRestartState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestart.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::LongLivedGracefulRestartState*>(
      &::gobgpapi::_LongLivedGracefulRestartState_default_instance_);
}
inline ::gobgpapi::LongLivedGracefulRestartState* LongLivedGracefulRestart::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.LongLivedGracefulRestart.state)
  
  ::gobgpapi::LongLivedGracefulRestartState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::LongLivedGracefulRestartState* LongLivedGracefulRestart::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::LongLivedGracefulRestartState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.LongLivedGracefulRestart.state)
  return state_;
}
inline void LongLivedGracefulRestart::set_allocated_state(::gobgpapi::LongLivedGracefulRestartState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LongLivedGracefulRestart.state)
}

// -------------------------------------------------------------------

// AfiSafi

// .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
inline bool AfiSafi::has_mp_graceful_restart() const {
  return this != internal_default_instance() && mp_graceful_restart_ != NULL;
}
inline void AfiSafi::clear_mp_graceful_restart() {
  if (GetArenaNoVirtual() == NULL && mp_graceful_restart_ != NULL) {
    delete mp_graceful_restart_;
  }
  mp_graceful_restart_ = NULL;
}
inline const ::gobgpapi::MpGracefulRestart& AfiSafi::mp_graceful_restart() const {
  const ::gobgpapi::MpGracefulRestart* p = mp_graceful_restart_;
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.mp_graceful_restart)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MpGracefulRestart*>(
      &::gobgpapi::_MpGracefulRestart_default_instance_);
}
inline ::gobgpapi::MpGracefulRestart* AfiSafi::release_mp_graceful_restart() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.mp_graceful_restart)
  
  ::gobgpapi::MpGracefulRestart* temp = mp_graceful_restart_;
  mp_graceful_restart_ = NULL;
  return temp;
}
inline ::gobgpapi::MpGracefulRestart* AfiSafi::mutable_mp_graceful_restart() {
  
  if (mp_graceful_restart_ == NULL) {
    mp_graceful_restart_ = new ::gobgpapi::MpGracefulRestart;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.mp_graceful_restart)
  return mp_graceful_restart_;
}
inline void AfiSafi::set_allocated_mp_graceful_restart(::gobgpapi::MpGracefulRestart* mp_graceful_restart) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mp_graceful_restart_;
  }
  if (mp_graceful_restart) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mp_graceful_restart = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mp_graceful_restart, submessage_arena);
    }
    
  } else {
    
  }
  mp_graceful_restart_ = mp_graceful_restart;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.mp_graceful_restart)
}

// .gobgpapi.AfiSafiConfig config = 2;
inline bool AfiSafi::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void AfiSafi::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::AfiSafiConfig& AfiSafi::config() const {
  const ::gobgpapi::AfiSafiConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::AfiSafiConfig*>(
      &::gobgpapi::_AfiSafiConfig_default_instance_);
}
inline ::gobgpapi::AfiSafiConfig* AfiSafi::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.config)
  
  ::gobgpapi::AfiSafiConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::AfiSafiConfig* AfiSafi::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::AfiSafiConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.config)
  return config_;
}
inline void AfiSafi::set_allocated_config(::gobgpapi::AfiSafiConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.config)
}

// .gobgpapi.ApplyPolicy apply_policy = 3;
inline bool AfiSafi::has_apply_policy() const {
  return this != internal_default_instance() && apply_policy_ != NULL;
}
inline void AfiSafi::clear_apply_policy() {
  if (GetArenaNoVirtual() == NULL && apply_policy_ != NULL) {
    delete apply_policy_;
  }
  apply_policy_ = NULL;
}
inline const ::gobgpapi::ApplyPolicy& AfiSafi::apply_policy() const {
  const ::gobgpapi::ApplyPolicy* p = apply_policy_;
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.apply_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::ApplyPolicy*>(
      &::gobgpapi::_ApplyPolicy_default_instance_);
}
inline ::gobgpapi::ApplyPolicy* AfiSafi::release_apply_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.apply_policy)
  
  ::gobgpapi::ApplyPolicy* temp = apply_policy_;
  apply_policy_ = NULL;
  return temp;
}
inline ::gobgpapi::ApplyPolicy* AfiSafi::mutable_apply_policy() {
  
  if (apply_policy_ == NULL) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.apply_policy)
  return apply_policy_;
}
inline void AfiSafi::set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete apply_policy_;
  }
  if (apply_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apply_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apply_policy, submessage_arena);
    }
    
  } else {
    
  }
  apply_policy_ = apply_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.apply_policy)
}

// .gobgpapi.RouteSelectionOptions route_selection_options = 4;
inline bool AfiSafi::has_route_selection_options() const {
  return this != internal_default_instance() && route_selection_options_ != NULL;
}
inline void AfiSafi::clear_route_selection_options() {
  if (GetArenaNoVirtual() == NULL && route_selection_options_ != NULL) {
    delete route_selection_options_;
  }
  route_selection_options_ = NULL;
}
inline const ::gobgpapi::RouteSelectionOptions& AfiSafi::route_selection_options() const {
  const ::gobgpapi::RouteSelectionOptions* p = route_selection_options_;
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.route_selection_options)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RouteSelectionOptions*>(
      &::gobgpapi::_RouteSelectionOptions_default_instance_);
}
inline ::gobgpapi::RouteSelectionOptions* AfiSafi::release_route_selection_options() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.route_selection_options)
  
  ::gobgpapi::RouteSelectionOptions* temp = route_selection_options_;
  route_selection_options_ = NULL;
  return temp;
}
inline ::gobgpapi::RouteSelectionOptions* AfiSafi::mutable_route_selection_options() {
  
  if (route_selection_options_ == NULL) {
    route_selection_options_ = new ::gobgpapi::RouteSelectionOptions;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.route_selection_options)
  return route_selection_options_;
}
inline void AfiSafi::set_allocated_route_selection_options(::gobgpapi::RouteSelectionOptions* route_selection_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete route_selection_options_;
  }
  if (route_selection_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      route_selection_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route_selection_options, submessage_arena);
    }
    
  } else {
    
  }
  route_selection_options_ = route_selection_options;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.route_selection_options)
}

// .gobgpapi.UseMultiplePaths use_multiple_paths = 5;
inline bool AfiSafi::has_use_multiple_paths() const {
  return this != internal_default_instance() && use_multiple_paths_ != NULL;
}
inline void AfiSafi::clear_use_multiple_paths() {
  if (GetArenaNoVirtual() == NULL && use_multiple_paths_ != NULL) {
    delete use_multiple_paths_;
  }
  use_multiple_paths_ = NULL;
}
inline const ::gobgpapi::UseMultiplePaths& AfiSafi::use_multiple_paths() const {
  const ::gobgpapi::UseMultiplePaths* p = use_multiple_paths_;
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.use_multiple_paths)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::UseMultiplePaths*>(
      &::gobgpapi::_UseMultiplePaths_default_instance_);
}
inline ::gobgpapi::UseMultiplePaths* AfiSafi::release_use_multiple_paths() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.use_multiple_paths)
  
  ::gobgpapi::UseMultiplePaths* temp = use_multiple_paths_;
  use_multiple_paths_ = NULL;
  return temp;
}
inline ::gobgpapi::UseMultiplePaths* AfiSafi::mutable_use_multiple_paths() {
  
  if (use_multiple_paths_ == NULL) {
    use_multiple_paths_ = new ::gobgpapi::UseMultiplePaths;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.use_multiple_paths)
  return use_multiple_paths_;
}
inline void AfiSafi::set_allocated_use_multiple_paths(::gobgpapi::UseMultiplePaths* use_multiple_paths) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete use_multiple_paths_;
  }
  if (use_multiple_paths) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      use_multiple_paths = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use_multiple_paths, submessage_arena);
    }
    
  } else {
    
  }
  use_multiple_paths_ = use_multiple_paths;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.use_multiple_paths)
}

// .gobgpapi.PrefixLimit prefix_limits = 6;
inline bool AfiSafi::has_prefix_limits() const {
  return this != internal_default_instance() && prefix_limits_ != NULL;
}
inline void AfiSafi::clear_prefix_limits() {
  if (GetArenaNoVirtual() == NULL && prefix_limits_ != NULL) {
    delete prefix_limits_;
  }
  prefix_limits_ = NULL;
}
inline const ::gobgpapi::PrefixLimit& AfiSafi::prefix_limits() const {
  const ::gobgpapi::PrefixLimit* p = prefix_limits_;
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.prefix_limits)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::PrefixLimit*>(
      &::gobgpapi::_PrefixLimit_default_instance_);
}
inline ::gobgpapi::PrefixLimit* AfiSafi::release_prefix_limits() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.prefix_limits)
  
  ::gobgpapi::PrefixLimit* temp = prefix_limits_;
  prefix_limits_ = NULL;
  return temp;
}
inline ::gobgpapi::PrefixLimit* AfiSafi::mutable_prefix_limits() {
  
  if (prefix_limits_ == NULL) {
    prefix_limits_ = new ::gobgpapi::PrefixLimit;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.prefix_limits)
  return prefix_limits_;
}
inline void AfiSafi::set_allocated_prefix_limits(::gobgpapi::PrefixLimit* prefix_limits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prefix_limits_;
  }
  if (prefix_limits) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prefix_limits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prefix_limits, submessage_arena);
    }
    
  } else {
    
  }
  prefix_limits_ = prefix_limits;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.prefix_limits)
}

// .gobgpapi.RouteTargetMembership route_target_membership = 7;
inline bool AfiSafi::has_route_target_membership() const {
  return this != internal_default_instance() && route_target_membership_ != NULL;
}
inline void AfiSafi::clear_route_target_membership() {
  if (GetArenaNoVirtual() == NULL && route_target_membership_ != NULL) {
    delete route_target_membership_;
  }
  route_target_membership_ = NULL;
}
inline const ::gobgpapi::RouteTargetMembership& AfiSafi::route_target_membership() const {
  const ::gobgpapi::RouteTargetMembership* p = route_target_membership_;
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.route_target_membership)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RouteTargetMembership*>(
      &::gobgpapi::_RouteTargetMembership_default_instance_);
}
inline ::gobgpapi::RouteTargetMembership* AfiSafi::release_route_target_membership() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.route_target_membership)
  
  ::gobgpapi::RouteTargetMembership* temp = route_target_membership_;
  route_target_membership_ = NULL;
  return temp;
}
inline ::gobgpapi::RouteTargetMembership* AfiSafi::mutable_route_target_membership() {
  
  if (route_target_membership_ == NULL) {
    route_target_membership_ = new ::gobgpapi::RouteTargetMembership;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.route_target_membership)
  return route_target_membership_;
}
inline void AfiSafi::set_allocated_route_target_membership(::gobgpapi::RouteTargetMembership* route_target_membership) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete route_target_membership_;
  }
  if (route_target_membership) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      route_target_membership = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route_target_membership, submessage_arena);
    }
    
  } else {
    
  }
  route_target_membership_ = route_target_membership;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.route_target_membership)
}

// .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 8;
inline bool AfiSafi::has_long_lived_graceful_restart() const {
  return this != internal_default_instance() && long_lived_graceful_restart_ != NULL;
}
inline void AfiSafi::clear_long_lived_graceful_restart() {
  if (GetArenaNoVirtual() == NULL && long_lived_graceful_restart_ != NULL) {
    delete long_lived_graceful_restart_;
  }
  long_lived_graceful_restart_ = NULL;
}
inline const ::gobgpapi::LongLivedGracefulRestart& AfiSafi::long_lived_graceful_restart() const {
  const ::gobgpapi::LongLivedGracefulRestart* p = long_lived_graceful_restart_;
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.long_lived_graceful_restart)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::LongLivedGracefulRestart*>(
      &::gobgpapi::_LongLivedGracefulRestart_default_instance_);
}
inline ::gobgpapi::LongLivedGracefulRestart* AfiSafi::release_long_lived_graceful_restart() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.long_lived_graceful_restart)
  
  ::gobgpapi::LongLivedGracefulRestart* temp = long_lived_graceful_restart_;
  long_lived_graceful_restart_ = NULL;
  return temp;
}
inline ::gobgpapi::LongLivedGracefulRestart* AfiSafi::mutable_long_lived_graceful_restart() {
  
  if (long_lived_graceful_restart_ == NULL) {
    long_lived_graceful_restart_ = new ::gobgpapi::LongLivedGracefulRestart;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.long_lived_graceful_restart)
  return long_lived_graceful_restart_;
}
inline void AfiSafi::set_allocated_long_lived_graceful_restart(::gobgpapi::LongLivedGracefulRestart* long_lived_graceful_restart) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete long_lived_graceful_restart_;
  }
  if (long_lived_graceful_restart) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      long_lived_graceful_restart = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, long_lived_graceful_restart, submessage_arena);
    }
    
  } else {
    
  }
  long_lived_graceful_restart_ = long_lived_graceful_restart;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.long_lived_graceful_restart)
}

// .gobgpapi.AddPaths add_paths = 9;
inline bool AfiSafi::has_add_paths() const {
  return this != internal_default_instance() && add_paths_ != NULL;
}
inline void AfiSafi::clear_add_paths() {
  if (GetArenaNoVirtual() == NULL && add_paths_ != NULL) {
    delete add_paths_;
  }
  add_paths_ = NULL;
}
inline const ::gobgpapi::AddPaths& AfiSafi::add_paths() const {
  const ::gobgpapi::AddPaths* p = add_paths_;
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.add_paths)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::AddPaths*>(
      &::gobgpapi::_AddPaths_default_instance_);
}
inline ::gobgpapi::AddPaths* AfiSafi::release_add_paths() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.add_paths)
  
  ::gobgpapi::AddPaths* temp = add_paths_;
  add_paths_ = NULL;
  return temp;
}
inline ::gobgpapi::AddPaths* AfiSafi::mutable_add_paths() {
  
  if (add_paths_ == NULL) {
    add_paths_ = new ::gobgpapi::AddPaths;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.add_paths)
  return add_paths_;
}
inline void AfiSafi::set_allocated_add_paths(::gobgpapi::AddPaths* add_paths) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete add_paths_;
  }
  if (add_paths) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_paths = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_paths, submessage_arena);
    }
    
  } else {
    
  }
  add_paths_ = add_paths;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.add_paths)
}

// -------------------------------------------------------------------

// AddPathsConfig

// bool receive = 1;
inline void AddPathsConfig::clear_receive() {
  receive_ = false;
}
inline bool AddPathsConfig::receive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathsConfig.receive)
  return receive_;
}
inline void AddPathsConfig::set_receive(bool value) {
  
  receive_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathsConfig.receive)
}

// uint32 send_max = 2;
inline void AddPathsConfig::clear_send_max() {
  send_max_ = 0u;
}
inline ::google::protobuf::uint32 AddPathsConfig::send_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathsConfig.send_max)
  return send_max_;
}
inline void AddPathsConfig::set_send_max(::google::protobuf::uint32 value) {
  
  send_max_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathsConfig.send_max)
}

// -------------------------------------------------------------------

// AddPathsState

// bool receive = 1;
inline void AddPathsState::clear_receive() {
  receive_ = false;
}
inline bool AddPathsState::receive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathsState.receive)
  return receive_;
}
inline void AddPathsState::set_receive(bool value) {
  
  receive_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathsState.receive)
}

// uint32 send_max = 2;
inline void AddPathsState::clear_send_max() {
  send_max_ = 0u;
}
inline ::google::protobuf::uint32 AddPathsState::send_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathsState.send_max)
  return send_max_;
}
inline void AddPathsState::set_send_max(::google::protobuf::uint32 value) {
  
  send_max_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathsState.send_max)
}

// -------------------------------------------------------------------

// AddPaths

// .gobgpapi.AddPathsConfig config = 1;
inline bool AddPaths::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void AddPaths::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::gobgpapi::AddPathsConfig& AddPaths::config() const {
  const ::gobgpapi::AddPathsConfig* p = config_;
  // @@protoc_insertion_point(field_get:gobgpapi.AddPaths.config)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::AddPathsConfig*>(
      &::gobgpapi::_AddPathsConfig_default_instance_);
}
inline ::gobgpapi::AddPathsConfig* AddPaths::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPaths.config)
  
  ::gobgpapi::AddPathsConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::gobgpapi::AddPathsConfig* AddPaths::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::AddPathsConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPaths.config)
  return config_;
}
inline void AddPaths::set_allocated_config(::gobgpapi::AddPathsConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPaths.config)
}

// .gobgpapi.AddPathsState state = 2;
inline bool AddPaths::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void AddPaths::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::gobgpapi::AddPathsState& AddPaths::state() const {
  const ::gobgpapi::AddPathsState* p = state_;
  // @@protoc_insertion_point(field_get:gobgpapi.AddPaths.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::AddPathsState*>(
      &::gobgpapi::_AddPathsState_default_instance_);
}
inline ::gobgpapi::AddPathsState* AddPaths::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPaths.state)
  
  ::gobgpapi::AddPathsState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gobgpapi::AddPathsState* AddPaths::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::AddPathsState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPaths.state)
  return state_;
}
inline void AddPaths::set_allocated_state(::gobgpapi::AddPathsState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPaths.state)
}

// -------------------------------------------------------------------

// Prefix

// string ip_prefix = 1;
inline void Prefix::clear_ip_prefix() {
  ip_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Prefix::ip_prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.ip_prefix)
  return ip_prefix_.GetNoArena();
}
inline void Prefix::set_ip_prefix(const ::std::string& value) {
  
  ip_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.ip_prefix)
}
#if LANG_CXX11
inline void Prefix::set_ip_prefix(::std::string&& value) {
  
  ip_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Prefix.ip_prefix)
}
#endif
inline void Prefix::set_ip_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Prefix.ip_prefix)
}
inline void Prefix::set_ip_prefix(const char* value, size_t size) {
  
  ip_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Prefix.ip_prefix)
}
inline ::std::string* Prefix::mutable_ip_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Prefix.ip_prefix)
  return ip_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Prefix::release_ip_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.Prefix.ip_prefix)
  
  return ip_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Prefix::set_allocated_ip_prefix(::std::string* ip_prefix) {
  if (ip_prefix != NULL) {
    
  } else {
    
  }
  ip_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Prefix.ip_prefix)
}

// uint32 mask_length_min = 2;
inline void Prefix::clear_mask_length_min() {
  mask_length_min_ = 0u;
}
inline ::google::protobuf::uint32 Prefix::mask_length_min() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.mask_length_min)
  return mask_length_min_;
}
inline void Prefix::set_mask_length_min(::google::protobuf::uint32 value) {
  
  mask_length_min_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.mask_length_min)
}

// uint32 mask_length_max = 3;
inline void Prefix::clear_mask_length_max() {
  mask_length_max_ = 0u;
}
inline ::google::protobuf::uint32 Prefix::mask_length_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.mask_length_max)
  return mask_length_max_;
}
inline void Prefix::set_mask_length_max(::google::protobuf::uint32 value) {
  
  mask_length_max_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.mask_length_max)
}

// -------------------------------------------------------------------

// DefinedSet

// .gobgpapi.DefinedType type = 1;
inline void DefinedSet::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::DefinedType DefinedSet::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.type)
  return static_cast< ::gobgpapi::DefinedType >(type_);
}
inline void DefinedSet::set_type(::gobgpapi::DefinedType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.type)
}

// string name = 2;
inline void DefinedSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DefinedSet::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.name)
  return name_.GetNoArena();
}
inline void DefinedSet::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.name)
}
#if LANG_CXX11
inline void DefinedSet::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DefinedSet.name)
}
#endif
inline void DefinedSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DefinedSet.name)
}
inline void DefinedSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DefinedSet.name)
}
inline ::std::string* DefinedSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DefinedSet::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.DefinedSet.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DefinedSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DefinedSet.name)
}

// repeated string list = 3;
inline int DefinedSet::list_size() const {
  return list_.size();
}
inline void DefinedSet::clear_list() {
  list_.Clear();
}
inline const ::std::string& DefinedSet::list(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.list)
  return list_.Get(index);
}
inline ::std::string* DefinedSet::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.list)
  return list_.Mutable(index);
}
inline void DefinedSet::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.list)
  list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DefinedSet::set_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.list)
  list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DefinedSet::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.DefinedSet.list)
}
inline void DefinedSet::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DefinedSet.list)
}
inline ::std::string* DefinedSet::add_list() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.DefinedSet.list)
  return list_.Add();
}
inline void DefinedSet::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.list)
}
#if LANG_CXX11
inline void DefinedSet::add_list(::std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.list)
}
#endif
inline void DefinedSet::add_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.DefinedSet.list)
}
inline void DefinedSet::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.DefinedSet.list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DefinedSet::list() const {
  // @@protoc_insertion_point(field_list:gobgpapi.DefinedSet.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DefinedSet::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.DefinedSet.list)
  return &list_;
}

// repeated .gobgpapi.Prefix prefixes = 4;
inline int DefinedSet::prefixes_size() const {
  return prefixes_.size();
}
inline void DefinedSet::clear_prefixes() {
  prefixes_.Clear();
}
inline const ::gobgpapi::Prefix& DefinedSet::prefixes(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Get(index);
}
inline ::gobgpapi::Prefix* DefinedSet::mutable_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Mutable(index);
}
inline ::gobgpapi::Prefix* DefinedSet::add_prefixes() {
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >*
DefinedSet::mutable_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.DefinedSet.prefixes)
  return &prefixes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >&
DefinedSet::prefixes() const {
  // @@protoc_insertion_point(field_list:gobgpapi.DefinedSet.prefixes)
  return prefixes_;
}

// -------------------------------------------------------------------

// MatchSet

// .gobgpapi.MatchType type = 1;
inline void MatchSet::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::MatchType MatchSet::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MatchSet.type)
  return static_cast< ::gobgpapi::MatchType >(type_);
}
inline void MatchSet::set_type(::gobgpapi::MatchType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MatchSet.type)
}

// string name = 2;
inline void MatchSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchSet::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MatchSet.name)
  return name_.GetNoArena();
}
inline void MatchSet::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.MatchSet.name)
}
#if LANG_CXX11
inline void MatchSet::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.MatchSet.name)
}
#endif
inline void MatchSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MatchSet.name)
}
inline void MatchSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MatchSet.name)
}
inline ::std::string* MatchSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.MatchSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchSet::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.MatchSet.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MatchSet.name)
}

// -------------------------------------------------------------------

// AsPathLength

// .gobgpapi.AsPathLengthType type = 1;
inline void AsPathLength::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::AsPathLengthType AsPathLength::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPathLength.type)
  return static_cast< ::gobgpapi::AsPathLengthType >(type_);
}
inline void AsPathLength::set_type(::gobgpapi::AsPathLengthType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPathLength.type)
}

// uint32 length = 2;
inline void AsPathLength::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 AsPathLength::length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPathLength.length)
  return length_;
}
inline void AsPathLength::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPathLength.length)
}

// -------------------------------------------------------------------

// Conditions

// .gobgpapi.MatchSet prefix_set = 1;
inline bool Conditions::has_prefix_set() const {
  return this != internal_default_instance() && prefix_set_ != NULL;
}
inline void Conditions::clear_prefix_set() {
  if (GetArenaNoVirtual() == NULL && prefix_set_ != NULL) {
    delete prefix_set_;
  }
  prefix_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::prefix_set() const {
  const ::gobgpapi::MatchSet* p = prefix_set_;
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.prefix_set)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline ::gobgpapi::MatchSet* Conditions::release_prefix_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.prefix_set)
  
  ::gobgpapi::MatchSet* temp = prefix_set_;
  prefix_set_ = NULL;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_prefix_set() {
  
  if (prefix_set_ == NULL) {
    prefix_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.prefix_set)
  return prefix_set_;
}
inline void Conditions::set_allocated_prefix_set(::gobgpapi::MatchSet* prefix_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prefix_set_;
  }
  if (prefix_set) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prefix_set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prefix_set, submessage_arena);
    }
    
  } else {
    
  }
  prefix_set_ = prefix_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.prefix_set)
}

// .gobgpapi.MatchSet neighbor_set = 2;
inline bool Conditions::has_neighbor_set() const {
  return this != internal_default_instance() && neighbor_set_ != NULL;
}
inline void Conditions::clear_neighbor_set() {
  if (GetArenaNoVirtual() == NULL && neighbor_set_ != NULL) {
    delete neighbor_set_;
  }
  neighbor_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::neighbor_set() const {
  const ::gobgpapi::MatchSet* p = neighbor_set_;
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.neighbor_set)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline ::gobgpapi::MatchSet* Conditions::release_neighbor_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.neighbor_set)
  
  ::gobgpapi::MatchSet* temp = neighbor_set_;
  neighbor_set_ = NULL;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_neighbor_set() {
  
  if (neighbor_set_ == NULL) {
    neighbor_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.neighbor_set)
  return neighbor_set_;
}
inline void Conditions::set_allocated_neighbor_set(::gobgpapi::MatchSet* neighbor_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete neighbor_set_;
  }
  if (neighbor_set) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      neighbor_set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, neighbor_set, submessage_arena);
    }
    
  } else {
    
  }
  neighbor_set_ = neighbor_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.neighbor_set)
}

// .gobgpapi.AsPathLength as_path_length = 3;
inline bool Conditions::has_as_path_length() const {
  return this != internal_default_instance() && as_path_length_ != NULL;
}
inline void Conditions::clear_as_path_length() {
  if (GetArenaNoVirtual() == NULL && as_path_length_ != NULL) {
    delete as_path_length_;
  }
  as_path_length_ = NULL;
}
inline const ::gobgpapi::AsPathLength& Conditions::as_path_length() const {
  const ::gobgpapi::AsPathLength* p = as_path_length_;
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.as_path_length)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::AsPathLength*>(
      &::gobgpapi::_AsPathLength_default_instance_);
}
inline ::gobgpapi::AsPathLength* Conditions::release_as_path_length() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.as_path_length)
  
  ::gobgpapi::AsPathLength* temp = as_path_length_;
  as_path_length_ = NULL;
  return temp;
}
inline ::gobgpapi::AsPathLength* Conditions::mutable_as_path_length() {
  
  if (as_path_length_ == NULL) {
    as_path_length_ = new ::gobgpapi::AsPathLength;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.as_path_length)
  return as_path_length_;
}
inline void Conditions::set_allocated_as_path_length(::gobgpapi::AsPathLength* as_path_length) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete as_path_length_;
  }
  if (as_path_length) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      as_path_length = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, as_path_length, submessage_arena);
    }
    
  } else {
    
  }
  as_path_length_ = as_path_length;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.as_path_length)
}

// .gobgpapi.MatchSet as_path_set = 4;
inline bool Conditions::has_as_path_set() const {
  return this != internal_default_instance() && as_path_set_ != NULL;
}
inline void Conditions::clear_as_path_set() {
  if (GetArenaNoVirtual() == NULL && as_path_set_ != NULL) {
    delete as_path_set_;
  }
  as_path_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::as_path_set() const {
  const ::gobgpapi::MatchSet* p = as_path_set_;
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.as_path_set)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline ::gobgpapi::MatchSet* Conditions::release_as_path_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.as_path_set)
  
  ::gobgpapi::MatchSet* temp = as_path_set_;
  as_path_set_ = NULL;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_as_path_set() {
  
  if (as_path_set_ == NULL) {
    as_path_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.as_path_set)
  return as_path_set_;
}
inline void Conditions::set_allocated_as_path_set(::gobgpapi::MatchSet* as_path_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete as_path_set_;
  }
  if (as_path_set) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      as_path_set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, as_path_set, submessage_arena);
    }
    
  } else {
    
  }
  as_path_set_ = as_path_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.as_path_set)
}

// .gobgpapi.MatchSet community_set = 5;
inline bool Conditions::has_community_set() const {
  return this != internal_default_instance() && community_set_ != NULL;
}
inline void Conditions::clear_community_set() {
  if (GetArenaNoVirtual() == NULL && community_set_ != NULL) {
    delete community_set_;
  }
  community_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::community_set() const {
  const ::gobgpapi::MatchSet* p = community_set_;
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.community_set)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline ::gobgpapi::MatchSet* Conditions::release_community_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.community_set)
  
  ::gobgpapi::MatchSet* temp = community_set_;
  community_set_ = NULL;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_community_set() {
  
  if (community_set_ == NULL) {
    community_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.community_set)
  return community_set_;
}
inline void Conditions::set_allocated_community_set(::gobgpapi::MatchSet* community_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete community_set_;
  }
  if (community_set) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      community_set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, community_set, submessage_arena);
    }
    
  } else {
    
  }
  community_set_ = community_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.community_set)
}

// .gobgpapi.MatchSet ext_community_set = 6;
inline bool Conditions::has_ext_community_set() const {
  return this != internal_default_instance() && ext_community_set_ != NULL;
}
inline void Conditions::clear_ext_community_set() {
  if (GetArenaNoVirtual() == NULL && ext_community_set_ != NULL) {
    delete ext_community_set_;
  }
  ext_community_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::ext_community_set() const {
  const ::gobgpapi::MatchSet* p = ext_community_set_;
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.ext_community_set)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline ::gobgpapi::MatchSet* Conditions::release_ext_community_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.ext_community_set)
  
  ::gobgpapi::MatchSet* temp = ext_community_set_;
  ext_community_set_ = NULL;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_ext_community_set() {
  
  if (ext_community_set_ == NULL) {
    ext_community_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.ext_community_set)
  return ext_community_set_;
}
inline void Conditions::set_allocated_ext_community_set(::gobgpapi::MatchSet* ext_community_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ext_community_set_;
  }
  if (ext_community_set) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ext_community_set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ext_community_set, submessage_arena);
    }
    
  } else {
    
  }
  ext_community_set_ = ext_community_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.ext_community_set)
}

// int32 rpki_result = 7;
inline void Conditions::clear_rpki_result() {
  rpki_result_ = 0;
}
inline ::google::protobuf::int32 Conditions::rpki_result() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.rpki_result)
  return rpki_result_;
}
inline void Conditions::set_rpki_result(::google::protobuf::int32 value) {
  
  rpki_result_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Conditions.rpki_result)
}

// .gobgpapi.Conditions.RouteType route_type = 8;
inline void Conditions::clear_route_type() {
  route_type_ = 0;
}
inline ::gobgpapi::Conditions_RouteType Conditions::route_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.route_type)
  return static_cast< ::gobgpapi::Conditions_RouteType >(route_type_);
}
inline void Conditions::set_route_type(::gobgpapi::Conditions_RouteType value) {
  
  route_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Conditions.route_type)
}

// .gobgpapi.MatchSet large_community_set = 9;
inline bool Conditions::has_large_community_set() const {
  return this != internal_default_instance() && large_community_set_ != NULL;
}
inline void Conditions::clear_large_community_set() {
  if (GetArenaNoVirtual() == NULL && large_community_set_ != NULL) {
    delete large_community_set_;
  }
  large_community_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::large_community_set() const {
  const ::gobgpapi::MatchSet* p = large_community_set_;
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.large_community_set)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline ::gobgpapi::MatchSet* Conditions::release_large_community_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.large_community_set)
  
  ::gobgpapi::MatchSet* temp = large_community_set_;
  large_community_set_ = NULL;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_large_community_set() {
  
  if (large_community_set_ == NULL) {
    large_community_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.large_community_set)
  return large_community_set_;
}
inline void Conditions::set_allocated_large_community_set(::gobgpapi::MatchSet* large_community_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete large_community_set_;
  }
  if (large_community_set) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      large_community_set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, large_community_set, submessage_arena);
    }
    
  } else {
    
  }
  large_community_set_ = large_community_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.large_community_set)
}

// -------------------------------------------------------------------

// CommunityAction

// .gobgpapi.CommunityActionType type = 1;
inline void CommunityAction::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::CommunityActionType CommunityAction::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.CommunityAction.type)
  return static_cast< ::gobgpapi::CommunityActionType >(type_);
}
inline void CommunityAction::set_type(::gobgpapi::CommunityActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.type)
}

// repeated string communities = 2;
inline int CommunityAction::communities_size() const {
  return communities_.size();
}
inline void CommunityAction::clear_communities() {
  communities_.Clear();
}
inline const ::std::string& CommunityAction::communities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.CommunityAction.communities)
  return communities_.Get(index);
}
inline ::std::string* CommunityAction::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.CommunityAction.communities)
  return communities_.Mutable(index);
}
inline void CommunityAction::set_communities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.communities)
  communities_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommunityAction::set_communities(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.communities)
  communities_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommunityAction::set_communities(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  communities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.CommunityAction.communities)
}
inline void CommunityAction::set_communities(int index, const char* value, size_t size) {
  communities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.CommunityAction.communities)
}
inline ::std::string* CommunityAction::add_communities() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.CommunityAction.communities)
  return communities_.Add();
}
inline void CommunityAction::add_communities(const ::std::string& value) {
  communities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.CommunityAction.communities)
}
#if LANG_CXX11
inline void CommunityAction::add_communities(::std::string&& value) {
  communities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.CommunityAction.communities)
}
#endif
inline void CommunityAction::add_communities(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  communities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.CommunityAction.communities)
}
inline void CommunityAction::add_communities(const char* value, size_t size) {
  communities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.CommunityAction.communities)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommunityAction::communities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.CommunityAction.communities)
  return communities_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommunityAction::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.CommunityAction.communities)
  return &communities_;
}

// -------------------------------------------------------------------

// MedAction

// .gobgpapi.MedActionType type = 1;
inline void MedAction::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::MedActionType MedAction::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MedAction.type)
  return static_cast< ::gobgpapi::MedActionType >(type_);
}
inline void MedAction::set_type(::gobgpapi::MedActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MedAction.type)
}

// int64 value = 2;
inline void MedAction::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MedAction::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MedAction.value)
  return value_;
}
inline void MedAction::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MedAction.value)
}

// -------------------------------------------------------------------

// AsPrependAction

// uint32 asn = 1;
inline void AsPrependAction::clear_asn() {
  asn_ = 0u;
}
inline ::google::protobuf::uint32 AsPrependAction::asn() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.asn)
  return asn_;
}
inline void AsPrependAction::set_asn(::google::protobuf::uint32 value) {
  
  asn_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.asn)
}

// uint32 repeat = 2;
inline void AsPrependAction::clear_repeat() {
  repeat_ = 0u;
}
inline ::google::protobuf::uint32 AsPrependAction::repeat() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.repeat)
  return repeat_;
}
inline void AsPrependAction::set_repeat(::google::protobuf::uint32 value) {
  
  repeat_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.repeat)
}

// bool use_left_most = 3;
inline void AsPrependAction::clear_use_left_most() {
  use_left_most_ = false;
}
inline bool AsPrependAction::use_left_most() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.use_left_most)
  return use_left_most_;
}
inline void AsPrependAction::set_use_left_most(bool value) {
  
  use_left_most_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.use_left_most)
}

// -------------------------------------------------------------------

// NexthopAction

// string address = 1;
inline void NexthopAction::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NexthopAction::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.NexthopAction.address)
  return address_.GetNoArena();
}
inline void NexthopAction::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.NexthopAction.address)
}
#if LANG_CXX11
inline void NexthopAction::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.NexthopAction.address)
}
#endif
inline void NexthopAction::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.NexthopAction.address)
}
inline void NexthopAction::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.NexthopAction.address)
}
inline ::std::string* NexthopAction::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.NexthopAction.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NexthopAction::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.NexthopAction.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NexthopAction::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.NexthopAction.address)
}

// bool self = 2;
inline void NexthopAction::clear_self() {
  self_ = false;
}
inline bool NexthopAction::self() const {
  // @@protoc_insertion_point(field_get:gobgpapi.NexthopAction.self)
  return self_;
}
inline void NexthopAction::set_self(bool value) {
  
  self_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.NexthopAction.self)
}

// -------------------------------------------------------------------

// LocalPrefAction

// uint32 value = 1;
inline void LocalPrefAction::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 LocalPrefAction::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LocalPrefAction.value)
  return value_;
}
inline void LocalPrefAction::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.LocalPrefAction.value)
}

// -------------------------------------------------------------------

// Actions

// .gobgpapi.RouteAction route_action = 1;
inline void Actions::clear_route_action() {
  route_action_ = 0;
}
inline ::gobgpapi::RouteAction Actions::route_action() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.route_action)
  return static_cast< ::gobgpapi::RouteAction >(route_action_);
}
inline void Actions::set_route_action(::gobgpapi::RouteAction value) {
  
  route_action_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Actions.route_action)
}

// .gobgpapi.CommunityAction community = 2;
inline bool Actions::has_community() const {
  return this != internal_default_instance() && community_ != NULL;
}
inline void Actions::clear_community() {
  if (GetArenaNoVirtual() == NULL && community_ != NULL) {
    delete community_;
  }
  community_ = NULL;
}
inline const ::gobgpapi::CommunityAction& Actions::community() const {
  const ::gobgpapi::CommunityAction* p = community_;
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.community)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::CommunityAction*>(
      &::gobgpapi::_CommunityAction_default_instance_);
}
inline ::gobgpapi::CommunityAction* Actions::release_community() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.community)
  
  ::gobgpapi::CommunityAction* temp = community_;
  community_ = NULL;
  return temp;
}
inline ::gobgpapi::CommunityAction* Actions::mutable_community() {
  
  if (community_ == NULL) {
    community_ = new ::gobgpapi::CommunityAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.community)
  return community_;
}
inline void Actions::set_allocated_community(::gobgpapi::CommunityAction* community) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete community_;
  }
  if (community) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      community = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, community, submessage_arena);
    }
    
  } else {
    
  }
  community_ = community;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.community)
}

// .gobgpapi.MedAction med = 3;
inline bool Actions::has_med() const {
  return this != internal_default_instance() && med_ != NULL;
}
inline void Actions::clear_med() {
  if (GetArenaNoVirtual() == NULL && med_ != NULL) {
    delete med_;
  }
  med_ = NULL;
}
inline const ::gobgpapi::MedAction& Actions::med() const {
  const ::gobgpapi::MedAction* p = med_;
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.med)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::MedAction*>(
      &::gobgpapi::_MedAction_default_instance_);
}
inline ::gobgpapi::MedAction* Actions::release_med() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.med)
  
  ::gobgpapi::MedAction* temp = med_;
  med_ = NULL;
  return temp;
}
inline ::gobgpapi::MedAction* Actions::mutable_med() {
  
  if (med_ == NULL) {
    med_ = new ::gobgpapi::MedAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.med)
  return med_;
}
inline void Actions::set_allocated_med(::gobgpapi::MedAction* med) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete med_;
  }
  if (med) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      med = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, med, submessage_arena);
    }
    
  } else {
    
  }
  med_ = med;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.med)
}

// .gobgpapi.AsPrependAction as_prepend = 4;
inline bool Actions::has_as_prepend() const {
  return this != internal_default_instance() && as_prepend_ != NULL;
}
inline void Actions::clear_as_prepend() {
  if (GetArenaNoVirtual() == NULL && as_prepend_ != NULL) {
    delete as_prepend_;
  }
  as_prepend_ = NULL;
}
inline const ::gobgpapi::AsPrependAction& Actions::as_prepend() const {
  const ::gobgpapi::AsPrependAction* p = as_prepend_;
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.as_prepend)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::AsPrependAction*>(
      &::gobgpapi::_AsPrependAction_default_instance_);
}
inline ::gobgpapi::AsPrependAction* Actions::release_as_prepend() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.as_prepend)
  
  ::gobgpapi::AsPrependAction* temp = as_prepend_;
  as_prepend_ = NULL;
  return temp;
}
inline ::gobgpapi::AsPrependAction* Actions::mutable_as_prepend() {
  
  if (as_prepend_ == NULL) {
    as_prepend_ = new ::gobgpapi::AsPrependAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.as_prepend)
  return as_prepend_;
}
inline void Actions::set_allocated_as_prepend(::gobgpapi::AsPrependAction* as_prepend) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete as_prepend_;
  }
  if (as_prepend) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      as_prepend = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, as_prepend, submessage_arena);
    }
    
  } else {
    
  }
  as_prepend_ = as_prepend;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.as_prepend)
}

// .gobgpapi.CommunityAction ext_community = 5;
inline bool Actions::has_ext_community() const {
  return this != internal_default_instance() && ext_community_ != NULL;
}
inline void Actions::clear_ext_community() {
  if (GetArenaNoVirtual() == NULL && ext_community_ != NULL) {
    delete ext_community_;
  }
  ext_community_ = NULL;
}
inline const ::gobgpapi::CommunityAction& Actions::ext_community() const {
  const ::gobgpapi::CommunityAction* p = ext_community_;
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.ext_community)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::CommunityAction*>(
      &::gobgpapi::_CommunityAction_default_instance_);
}
inline ::gobgpapi::CommunityAction* Actions::release_ext_community() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.ext_community)
  
  ::gobgpapi::CommunityAction* temp = ext_community_;
  ext_community_ = NULL;
  return temp;
}
inline ::gobgpapi::CommunityAction* Actions::mutable_ext_community() {
  
  if (ext_community_ == NULL) {
    ext_community_ = new ::gobgpapi::CommunityAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.ext_community)
  return ext_community_;
}
inline void Actions::set_allocated_ext_community(::gobgpapi::CommunityAction* ext_community) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ext_community_;
  }
  if (ext_community) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ext_community = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ext_community, submessage_arena);
    }
    
  } else {
    
  }
  ext_community_ = ext_community;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.ext_community)
}

// .gobgpapi.NexthopAction nexthop = 6;
inline bool Actions::has_nexthop() const {
  return this != internal_default_instance() && nexthop_ != NULL;
}
inline void Actions::clear_nexthop() {
  if (GetArenaNoVirtual() == NULL && nexthop_ != NULL) {
    delete nexthop_;
  }
  nexthop_ = NULL;
}
inline const ::gobgpapi::NexthopAction& Actions::nexthop() const {
  const ::gobgpapi::NexthopAction* p = nexthop_;
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.nexthop)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::NexthopAction*>(
      &::gobgpapi::_NexthopAction_default_instance_);
}
inline ::gobgpapi::NexthopAction* Actions::release_nexthop() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.nexthop)
  
  ::gobgpapi::NexthopAction* temp = nexthop_;
  nexthop_ = NULL;
  return temp;
}
inline ::gobgpapi::NexthopAction* Actions::mutable_nexthop() {
  
  if (nexthop_ == NULL) {
    nexthop_ = new ::gobgpapi::NexthopAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.nexthop)
  return nexthop_;
}
inline void Actions::set_allocated_nexthop(::gobgpapi::NexthopAction* nexthop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nexthop_;
  }
  if (nexthop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nexthop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nexthop, submessage_arena);
    }
    
  } else {
    
  }
  nexthop_ = nexthop;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.nexthop)
}

// .gobgpapi.LocalPrefAction local_pref = 7;
inline bool Actions::has_local_pref() const {
  return this != internal_default_instance() && local_pref_ != NULL;
}
inline void Actions::clear_local_pref() {
  if (GetArenaNoVirtual() == NULL && local_pref_ != NULL) {
    delete local_pref_;
  }
  local_pref_ = NULL;
}
inline const ::gobgpapi::LocalPrefAction& Actions::local_pref() const {
  const ::gobgpapi::LocalPrefAction* p = local_pref_;
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.local_pref)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::LocalPrefAction*>(
      &::gobgpapi::_LocalPrefAction_default_instance_);
}
inline ::gobgpapi::LocalPrefAction* Actions::release_local_pref() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.local_pref)
  
  ::gobgpapi::LocalPrefAction* temp = local_pref_;
  local_pref_ = NULL;
  return temp;
}
inline ::gobgpapi::LocalPrefAction* Actions::mutable_local_pref() {
  
  if (local_pref_ == NULL) {
    local_pref_ = new ::gobgpapi::LocalPrefAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.local_pref)
  return local_pref_;
}
inline void Actions::set_allocated_local_pref(::gobgpapi::LocalPrefAction* local_pref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_pref_;
  }
  if (local_pref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_pref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_pref, submessage_arena);
    }
    
  } else {
    
  }
  local_pref_ = local_pref;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.local_pref)
}

// .gobgpapi.CommunityAction large_community = 8;
inline bool Actions::has_large_community() const {
  return this != internal_default_instance() && large_community_ != NULL;
}
inline void Actions::clear_large_community() {
  if (GetArenaNoVirtual() == NULL && large_community_ != NULL) {
    delete large_community_;
  }
  large_community_ = NULL;
}
inline const ::gobgpapi::CommunityAction& Actions::large_community() const {
  const ::gobgpapi::CommunityAction* p = large_community_;
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.large_community)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::CommunityAction*>(
      &::gobgpapi::_CommunityAction_default_instance_);
}
inline ::gobgpapi::CommunityAction* Actions::release_large_community() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.large_community)
  
  ::gobgpapi::CommunityAction* temp = large_community_;
  large_community_ = NULL;
  return temp;
}
inline ::gobgpapi::CommunityAction* Actions::mutable_large_community() {
  
  if (large_community_ == NULL) {
    large_community_ = new ::gobgpapi::CommunityAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.large_community)
  return large_community_;
}
inline void Actions::set_allocated_large_community(::gobgpapi::CommunityAction* large_community) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete large_community_;
  }
  if (large_community) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      large_community = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, large_community, submessage_arena);
    }
    
  } else {
    
  }
  large_community_ = large_community;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.large_community)
}

// -------------------------------------------------------------------

// Statement

// string name = 1;
inline void Statement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statement::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.name)
  return name_.GetNoArena();
}
inline void Statement::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Statement.name)
}
#if LANG_CXX11
inline void Statement::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Statement.name)
}
#endif
inline void Statement::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Statement.name)
}
inline void Statement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Statement.name)
}
inline ::std::string* Statement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statement::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.Statement.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.name)
}

// .gobgpapi.Conditions conditions = 2;
inline bool Statement::has_conditions() const {
  return this != internal_default_instance() && conditions_ != NULL;
}
inline void Statement::clear_conditions() {
  if (GetArenaNoVirtual() == NULL && conditions_ != NULL) {
    delete conditions_;
  }
  conditions_ = NULL;
}
inline const ::gobgpapi::Conditions& Statement::conditions() const {
  const ::gobgpapi::Conditions* p = conditions_;
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.conditions)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Conditions*>(
      &::gobgpapi::_Conditions_default_instance_);
}
inline ::gobgpapi::Conditions* Statement::release_conditions() {
  // @@protoc_insertion_point(field_release:gobgpapi.Statement.conditions)
  
  ::gobgpapi::Conditions* temp = conditions_;
  conditions_ = NULL;
  return temp;
}
inline ::gobgpapi::Conditions* Statement::mutable_conditions() {
  
  if (conditions_ == NULL) {
    conditions_ = new ::gobgpapi::Conditions;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.conditions)
  return conditions_;
}
inline void Statement::set_allocated_conditions(::gobgpapi::Conditions* conditions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conditions_;
  }
  if (conditions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conditions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conditions, submessage_arena);
    }
    
  } else {
    
  }
  conditions_ = conditions;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.conditions)
}

// .gobgpapi.Actions actions = 3;
inline bool Statement::has_actions() const {
  return this != internal_default_instance() && actions_ != NULL;
}
inline void Statement::clear_actions() {
  if (GetArenaNoVirtual() == NULL && actions_ != NULL) {
    delete actions_;
  }
  actions_ = NULL;
}
inline const ::gobgpapi::Actions& Statement::actions() const {
  const ::gobgpapi::Actions* p = actions_;
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.actions)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::Actions*>(
      &::gobgpapi::_Actions_default_instance_);
}
inline ::gobgpapi::Actions* Statement::release_actions() {
  // @@protoc_insertion_point(field_release:gobgpapi.Statement.actions)
  
  ::gobgpapi::Actions* temp = actions_;
  actions_ = NULL;
  return temp;
}
inline ::gobgpapi::Actions* Statement::mutable_actions() {
  
  if (actions_ == NULL) {
    actions_ = new ::gobgpapi::Actions;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.actions)
  return actions_;
}
inline void Statement::set_allocated_actions(::gobgpapi::Actions* actions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete actions_;
  }
  if (actions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      actions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, actions, submessage_arena);
    }
    
  } else {
    
  }
  actions_ = actions;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.actions)
}

// -------------------------------------------------------------------

// Policy

// string name = 1;
inline void Policy::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Policy::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Policy.name)
  return name_.GetNoArena();
}
inline void Policy::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Policy.name)
}
#if LANG_CXX11
inline void Policy::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Policy.name)
}
#endif
inline void Policy::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Policy.name)
}
inline void Policy::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Policy.name)
}
inline ::std::string* Policy::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Policy.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Policy::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.Policy.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Policy::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Policy.name)
}

// repeated .gobgpapi.Statement statements = 2;
inline int Policy::statements_size() const {
  return statements_.size();
}
inline void Policy::clear_statements() {
  statements_.Clear();
}
inline const ::gobgpapi::Statement& Policy::statements(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Policy.statements)
  return statements_.Get(index);
}
inline ::gobgpapi::Statement* Policy::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Policy.statements)
  return statements_.Mutable(index);
}
inline ::gobgpapi::Statement* Policy::add_statements() {
  // @@protoc_insertion_point(field_add:gobgpapi.Policy.statements)
  return statements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >*
Policy::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Policy.statements)
  return &statements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >&
Policy::statements() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Policy.statements)
  return statements_;
}

// -------------------------------------------------------------------

// PolicyAssignment

// .gobgpapi.PolicyType type = 1;
inline void PolicyAssignment::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::PolicyType PolicyAssignment::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.type)
  return static_cast< ::gobgpapi::PolicyType >(type_);
}
inline void PolicyAssignment::set_type(::gobgpapi::PolicyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.type)
}

// .gobgpapi.Resource resource = 2;
inline void PolicyAssignment::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource PolicyAssignment::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void PolicyAssignment::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.resource)
}

// string name = 3;
inline void PolicyAssignment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PolicyAssignment::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.name)
  return name_.GetNoArena();
}
inline void PolicyAssignment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.name)
}
#if LANG_CXX11
inline void PolicyAssignment::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PolicyAssignment.name)
}
#endif
inline void PolicyAssignment::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PolicyAssignment.name)
}
inline void PolicyAssignment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PolicyAssignment.name)
}
inline ::std::string* PolicyAssignment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PolicyAssignment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyAssignment::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.PolicyAssignment.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyAssignment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PolicyAssignment.name)
}

// repeated .gobgpapi.Policy policies = 4;
inline int PolicyAssignment::policies_size() const {
  return policies_.size();
}
inline void PolicyAssignment::clear_policies() {
  policies_.Clear();
}
inline const ::gobgpapi::Policy& PolicyAssignment::policies(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.policies)
  return policies_.Get(index);
}
inline ::gobgpapi::Policy* PolicyAssignment::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PolicyAssignment.policies)
  return policies_.Mutable(index);
}
inline ::gobgpapi::Policy* PolicyAssignment::add_policies() {
  // @@protoc_insertion_point(field_add:gobgpapi.PolicyAssignment.policies)
  return policies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >*
PolicyAssignment::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PolicyAssignment.policies)
  return &policies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >&
PolicyAssignment::policies() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PolicyAssignment.policies)
  return policies_;
}

// .gobgpapi.RouteAction default = 5;
inline void PolicyAssignment::clear_default_() {
  default__ = 0;
}
inline ::gobgpapi::RouteAction PolicyAssignment::default_() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.default)
  return static_cast< ::gobgpapi::RouteAction >(default__);
}
inline void PolicyAssignment::set_default_(::gobgpapi::RouteAction value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.default)
}

// -------------------------------------------------------------------

// Roa

// uint32 as = 1;
inline void Roa::clear_as() {
  as_ = 0u;
}
inline ::google::protobuf::uint32 Roa::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.as)
  return as_;
}
inline void Roa::set_as(::google::protobuf::uint32 value) {
  
  as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Roa.as)
}

// uint32 prefixlen = 2;
inline void Roa::clear_prefixlen() {
  prefixlen_ = 0u;
}
inline ::google::protobuf::uint32 Roa::prefixlen() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.prefixlen)
  return prefixlen_;
}
inline void Roa::set_prefixlen(::google::protobuf::uint32 value) {
  
  prefixlen_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Roa.prefixlen)
}

// uint32 maxlen = 3;
inline void Roa::clear_maxlen() {
  maxlen_ = 0u;
}
inline ::google::protobuf::uint32 Roa::maxlen() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.maxlen)
  return maxlen_;
}
inline void Roa::set_maxlen(::google::protobuf::uint32 value) {
  
  maxlen_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Roa.maxlen)
}

// string prefix = 4;
inline void Roa::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Roa::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.prefix)
  return prefix_.GetNoArena();
}
inline void Roa::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Roa.prefix)
}
#if LANG_CXX11
inline void Roa::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Roa.prefix)
}
#endif
inline void Roa::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Roa.prefix)
}
inline void Roa::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Roa.prefix)
}
inline ::std::string* Roa::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Roa.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Roa::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.Roa.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Roa::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Roa.prefix)
}

// .gobgpapi.RPKIConf conf = 5;
inline bool Roa::has_conf() const {
  return this != internal_default_instance() && conf_ != NULL;
}
inline void Roa::clear_conf() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) {
    delete conf_;
  }
  conf_ = NULL;
}
inline const ::gobgpapi::RPKIConf& Roa::conf() const {
  const ::gobgpapi::RPKIConf* p = conf_;
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.conf)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::RPKIConf*>(
      &::gobgpapi::_RPKIConf_default_instance_);
}
inline ::gobgpapi::RPKIConf* Roa::release_conf() {
  // @@protoc_insertion_point(field_release:gobgpapi.Roa.conf)
  
  ::gobgpapi::RPKIConf* temp = conf_;
  conf_ = NULL;
  return temp;
}
inline ::gobgpapi::RPKIConf* Roa::mutable_conf() {
  
  if (conf_ == NULL) {
    conf_ = new ::gobgpapi::RPKIConf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Roa.conf)
  return conf_;
}
inline void Roa::set_allocated_conf(::gobgpapi::RPKIConf* conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conf_;
  }
  if (conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Roa.conf)
}

// -------------------------------------------------------------------

// GetRoaRequest

// uint32 family = 1;
inline void GetRoaRequest::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 GetRoaRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetRoaRequest.family)
  return family_;
}
inline void GetRoaRequest::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.GetRoaRequest.family)
}

// -------------------------------------------------------------------

// GetRoaResponse

// repeated .gobgpapi.Roa roas = 1;
inline int GetRoaResponse::roas_size() const {
  return roas_.size();
}
inline void GetRoaResponse::clear_roas() {
  roas_.Clear();
}
inline const ::gobgpapi::Roa& GetRoaResponse::roas(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetRoaResponse.roas)
  return roas_.Get(index);
}
inline ::gobgpapi::Roa* GetRoaResponse::mutable_roas(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetRoaResponse.roas)
  return roas_.Mutable(index);
}
inline ::gobgpapi::Roa* GetRoaResponse::add_roas() {
  // @@protoc_insertion_point(field_add:gobgpapi.GetRoaResponse.roas)
  return roas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >*
GetRoaResponse::mutable_roas() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.GetRoaResponse.roas)
  return &roas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Roa >&
GetRoaResponse::roas() const {
  // @@protoc_insertion_point(field_list:gobgpapi.GetRoaResponse.roas)
  return roas_;
}

// -------------------------------------------------------------------

// Vrf

// string name = 1;
inline void Vrf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vrf::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.name)
  return name_.GetNoArena();
}
inline void Vrf::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.name)
}
#if LANG_CXX11
inline void Vrf::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Vrf.name)
}
#endif
inline void Vrf::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.name)
}
inline void Vrf::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.name)
}
inline ::std::string* Vrf::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vrf::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.Vrf.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vrf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Vrf.name)
}

// bytes rd = 2;
inline void Vrf::clear_rd() {
  rd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vrf::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.rd)
  return rd_.GetNoArena();
}
inline void Vrf::set_rd(const ::std::string& value) {
  
  rd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.rd)
}
#if LANG_CXX11
inline void Vrf::set_rd(::std::string&& value) {
  
  rd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Vrf.rd)
}
#endif
inline void Vrf::set_rd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.rd)
}
inline void Vrf::set_rd(const void* value, size_t size) {
  
  rd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.rd)
}
inline ::std::string* Vrf::mutable_rd() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.rd)
  return rd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vrf::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.Vrf.rd)
  
  return rd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vrf::set_allocated_rd(::std::string* rd) {
  if (rd != NULL) {
    
  } else {
    
  }
  rd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rd);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Vrf.rd)
}

// repeated bytes import_rt = 3;
inline int Vrf::import_rt_size() const {
  return import_rt_.size();
}
inline void Vrf::clear_import_rt() {
  import_rt_.Clear();
}
inline const ::std::string& Vrf::import_rt(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.import_rt)
  return import_rt_.Get(index);
}
inline ::std::string* Vrf::mutable_import_rt(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.import_rt)
  return import_rt_.Mutable(index);
}
inline void Vrf::set_import_rt(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.import_rt)
  import_rt_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vrf::set_import_rt(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.import_rt)
  import_rt_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vrf::set_import_rt(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  import_rt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.import_rt)
}
inline void Vrf::set_import_rt(int index, const void* value, size_t size) {
  import_rt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.import_rt)
}
inline ::std::string* Vrf::add_import_rt() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.Vrf.import_rt)
  return import_rt_.Add();
}
inline void Vrf::add_import_rt(const ::std::string& value) {
  import_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.import_rt)
}
#if LANG_CXX11
inline void Vrf::add_import_rt(::std::string&& value) {
  import_rt_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.import_rt)
}
#endif
inline void Vrf::add_import_rt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  import_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Vrf.import_rt)
}
inline void Vrf::add_import_rt(const void* value, size_t size) {
  import_rt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Vrf.import_rt)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vrf::import_rt() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Vrf.import_rt)
  return import_rt_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vrf::mutable_import_rt() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Vrf.import_rt)
  return &import_rt_;
}

// repeated bytes export_rt = 4;
inline int Vrf::export_rt_size() const {
  return export_rt_.size();
}
inline void Vrf::clear_export_rt() {
  export_rt_.Clear();
}
inline const ::std::string& Vrf::export_rt(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.export_rt)
  return export_rt_.Get(index);
}
inline ::std::string* Vrf::mutable_export_rt(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.export_rt)
  return export_rt_.Mutable(index);
}
inline void Vrf::set_export_rt(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.export_rt)
  export_rt_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vrf::set_export_rt(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.export_rt)
  export_rt_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vrf::set_export_rt(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  export_rt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.export_rt)
}
inline void Vrf::set_export_rt(int index, const void* value, size_t size) {
  export_rt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.export_rt)
}
inline ::std::string* Vrf::add_export_rt() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.Vrf.export_rt)
  return export_rt_.Add();
}
inline void Vrf::add_export_rt(const ::std::string& value) {
  export_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.export_rt)
}
#if LANG_CXX11
inline void Vrf::add_export_rt(::std::string&& value) {
  export_rt_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.export_rt)
}
#endif
inline void Vrf::add_export_rt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  export_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Vrf.export_rt)
}
inline void Vrf::add_export_rt(const void* value, size_t size) {
  export_rt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Vrf.export_rt)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vrf::export_rt() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Vrf.export_rt)
  return export_rt_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vrf::mutable_export_rt() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Vrf.export_rt)
  return &export_rt_;
}

// uint32 id = 5;
inline void Vrf::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Vrf::id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.id)
  return id_;
}
inline void Vrf::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.id)
}

// -------------------------------------------------------------------

// Global

// uint32 as = 1;
inline void Global::clear_as() {
  as_ = 0u;
}
inline ::google::protobuf::uint32 Global::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.as)
  return as_;
}
inline void Global::set_as(::google::protobuf::uint32 value) {
  
  as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.as)
}

// string router_id = 2;
inline void Global::clear_router_id() {
  router_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Global::router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.router_id)
  return router_id_.GetNoArena();
}
inline void Global::set_router_id(const ::std::string& value) {
  
  router_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.router_id)
}
#if LANG_CXX11
inline void Global::set_router_id(::std::string&& value) {
  
  router_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Global.router_id)
}
#endif
inline void Global::set_router_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  router_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Global.router_id)
}
inline void Global::set_router_id(const char* value, size_t size) {
  
  router_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Global.router_id)
}
inline ::std::string* Global::mutable_router_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.router_id)
  return router_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Global::release_router_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.Global.router_id)
  
  return router_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Global::set_allocated_router_id(::std::string* router_id) {
  if (router_id != NULL) {
    
  } else {
    
  }
  router_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), router_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Global.router_id)
}

// int32 listen_port = 3;
inline void Global::clear_listen_port() {
  listen_port_ = 0;
}
inline ::google::protobuf::int32 Global::listen_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.listen_port)
  return listen_port_;
}
inline void Global::set_listen_port(::google::protobuf::int32 value) {
  
  listen_port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_port)
}

// repeated string listen_addresses = 4;
inline int Global::listen_addresses_size() const {
  return listen_addresses_.size();
}
inline void Global::clear_listen_addresses() {
  listen_addresses_.Clear();
}
inline const ::std::string& Global::listen_addresses(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.listen_addresses)
  return listen_addresses_.Get(index);
}
inline ::std::string* Global::mutable_listen_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.listen_addresses)
  return listen_addresses_.Mutable(index);
}
inline void Global::set_listen_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_addresses)
  listen_addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Global::set_listen_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_addresses)
  listen_addresses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Global::set_listen_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  listen_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Global.listen_addresses)
}
inline void Global::set_listen_addresses(int index, const char* value, size_t size) {
  listen_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Global.listen_addresses)
}
inline ::std::string* Global::add_listen_addresses() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.Global.listen_addresses)
  return listen_addresses_.Add();
}
inline void Global::add_listen_addresses(const ::std::string& value) {
  listen_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Global.listen_addresses)
}
#if LANG_CXX11
inline void Global::add_listen_addresses(::std::string&& value) {
  listen_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.Global.listen_addresses)
}
#endif
inline void Global::add_listen_addresses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  listen_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Global.listen_addresses)
}
inline void Global::add_listen_addresses(const char* value, size_t size) {
  listen_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Global.listen_addresses)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Global::listen_addresses() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Global.listen_addresses)
  return listen_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Global::mutable_listen_addresses() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Global.listen_addresses)
  return &listen_addresses_;
}

// repeated uint32 families = 5;
inline int Global::families_size() const {
  return families_.size();
}
inline void Global::clear_families() {
  families_.Clear();
}
inline ::google::protobuf::uint32 Global::families(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.families)
  return families_.Get(index);
}
inline void Global::set_families(int index, ::google::protobuf::uint32 value) {
  families_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.families)
}
inline void Global::add_families(::google::protobuf::uint32 value) {
  families_.Add(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Global.families)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Global::families() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Global.families)
  return families_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Global::mutable_families() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Global.families)
  return &families_;
}

// bool use_multiple_paths = 6;
inline void Global::clear_use_multiple_paths() {
  use_multiple_paths_ = false;
}
inline bool Global::use_multiple_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.use_multiple_paths)
  return use_multiple_paths_;
}
inline void Global::set_use_multiple_paths(bool value) {
  
  use_multiple_paths_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.use_multiple_paths)
}

// -------------------------------------------------------------------

// TableInfo

// .gobgpapi.Resource type = 1;
inline void TableInfo::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::Resource TableInfo::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableInfo.type)
  return static_cast< ::gobgpapi::Resource >(type_);
}
inline void TableInfo::set_type(::gobgpapi::Resource value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TableInfo.type)
}

// string name = 2;
inline void TableInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableInfo::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableInfo.name)
  return name_.GetNoArena();
}
inline void TableInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.TableInfo.name)
}
#if LANG_CXX11
inline void TableInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.TableInfo.name)
}
#endif
inline void TableInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.TableInfo.name)
}
inline void TableInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.TableInfo.name)
}
inline ::std::string* TableInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.TableInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableInfo::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.TableInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.TableInfo.name)
}

// uint32 family = 3;
inline void TableInfo::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 TableInfo::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableInfo.family)
  return family_;
}
inline void TableInfo::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TableInfo.family)
}

// uint64 num_destination = 4;
inline void TableInfo::clear_num_destination() {
  num_destination_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableInfo::num_destination() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableInfo.num_destination)
  return num_destination_;
}
inline void TableInfo::set_num_destination(::google::protobuf::uint64 value) {
  
  num_destination_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TableInfo.num_destination)
}

// uint64 num_path = 5;
inline void TableInfo::clear_num_path() {
  num_path_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableInfo::num_path() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableInfo.num_path)
  return num_path_;
}
inline void TableInfo::set_num_path(::google::protobuf::uint64 value) {
  
  num_path_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TableInfo.num_path)
}

// uint64 num_accepted = 6;
inline void TableInfo::clear_num_accepted() {
  num_accepted_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableInfo::num_accepted() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableInfo.num_accepted)
  return num_accepted_;
}
inline void TableInfo::set_num_accepted(::google::protobuf::uint64 value) {
  
  num_accepted_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TableInfo.num_accepted)
}

// -------------------------------------------------------------------

// GetRibInfoRequest

// .gobgpapi.TableInfo info = 1;
inline bool GetRibInfoRequest::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void GetRibInfoRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::gobgpapi::TableInfo& GetRibInfoRequest::info() const {
  const ::gobgpapi::TableInfo* p = info_;
  // @@protoc_insertion_point(field_get:gobgpapi.GetRibInfoRequest.info)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::TableInfo*>(
      &::gobgpapi::_TableInfo_default_instance_);
}
inline ::gobgpapi::TableInfo* GetRibInfoRequest::release_info() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetRibInfoRequest.info)
  
  ::gobgpapi::TableInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::gobgpapi::TableInfo* GetRibInfoRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::gobgpapi::TableInfo;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetRibInfoRequest.info)
  return info_;
}
inline void GetRibInfoRequest::set_allocated_info(::gobgpapi::TableInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetRibInfoRequest.info)
}

// -------------------------------------------------------------------

// GetRibInfoResponse

// .gobgpapi.TableInfo info = 1;
inline bool GetRibInfoResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void GetRibInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::gobgpapi::TableInfo& GetRibInfoResponse::info() const {
  const ::gobgpapi::TableInfo* p = info_;
  // @@protoc_insertion_point(field_get:gobgpapi.GetRibInfoResponse.info)
  return p != NULL ? *p : *reinterpret_cast<const ::gobgpapi::TableInfo*>(
      &::gobgpapi::_TableInfo_default_instance_);
}
inline ::gobgpapi::TableInfo* GetRibInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetRibInfoResponse.info)
  
  ::gobgpapi::TableInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::gobgpapi::TableInfo* GetRibInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::gobgpapi::TableInfo;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetRibInfoResponse.info)
  return info_;
}
inline void GetRibInfoResponse::set_allocated_info(::gobgpapi::TableInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetRibInfoResponse.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gobgpapi

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gobgpapi::SoftResetNeighborRequest_SoftResetDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::SoftResetNeighborRequest_SoftResetDirection>() {
  return ::gobgpapi::SoftResetNeighborRequest_SoftResetDirection_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::AddBmpRequest_MonitoringPolicy> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::AddBmpRequest_MonitoringPolicy>() {
  return ::gobgpapi::AddBmpRequest_MonitoringPolicy_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::RPKIValidation_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::RPKIValidation_State>() {
  return ::gobgpapi::RPKIValidation_State_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::RPKIValidation_Reason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::RPKIValidation_Reason>() {
  return ::gobgpapi::RPKIValidation_Reason_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PeerConf_RemovePrivateAs> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PeerConf_RemovePrivateAs>() {
  return ::gobgpapi::PeerConf_RemovePrivateAs_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PeerState_AdminState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PeerState_AdminState>() {
  return ::gobgpapi::PeerState_AdminState_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Conditions_RouteType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Conditions_RouteType>() {
  return ::gobgpapi::Conditions_RouteType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Family> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Family>() {
  return ::gobgpapi::Family_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Resource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Resource>() {
  return ::gobgpapi::Resource_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::TableLookupOption> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::TableLookupOption>() {
  return ::gobgpapi::TableLookupOption_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::DefinedType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::DefinedType>() {
  return ::gobgpapi::DefinedType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::MatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::MatchType>() {
  return ::gobgpapi::MatchType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::AsPathLengthType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::AsPathLengthType>() {
  return ::gobgpapi::AsPathLengthType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::RouteAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::RouteAction>() {
  return ::gobgpapi::RouteAction_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::CommunityActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::CommunityActionType>() {
  return ::gobgpapi::CommunityActionType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::MedActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::MedActionType>() {
  return ::gobgpapi::MedActionType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PolicyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PolicyType>() {
  return ::gobgpapi::PolicyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gobgp_2eproto__INCLUDED
