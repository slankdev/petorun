// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gobgp.proto

#include "gobgp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace gobgpapi {
class GetNeighborRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNeighborRequest>
      _instance;
} _GetNeighborRequest_default_instance_;
class GetNeighborResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNeighborResponse>
      _instance;
} _GetNeighborResponse_default_instance_;
class ArgumentsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Arguments>
      _instance;
} _Arguments_default_instance_;
class AddPathRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPathRequest>
      _instance;
} _AddPathRequest_default_instance_;
class AddPathResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPathResponse>
      _instance;
} _AddPathResponse_default_instance_;
class DeletePathRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeletePathRequest>
      _instance;
} _DeletePathRequest_default_instance_;
class DeletePathResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeletePathResponse>
      _instance;
} _DeletePathResponse_default_instance_;
class AddNeighborRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddNeighborRequest>
      _instance;
} _AddNeighborRequest_default_instance_;
class AddNeighborResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddNeighborResponse>
      _instance;
} _AddNeighborResponse_default_instance_;
class DeleteNeighborRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteNeighborRequest>
      _instance;
} _DeleteNeighborRequest_default_instance_;
class DeleteNeighborResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteNeighborResponse>
      _instance;
} _DeleteNeighborResponse_default_instance_;
class ResetNeighborRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetNeighborRequest>
      _instance;
} _ResetNeighborRequest_default_instance_;
class ResetNeighborResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetNeighborResponse>
      _instance;
} _ResetNeighborResponse_default_instance_;
class SoftResetNeighborRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SoftResetNeighborRequest>
      _instance;
} _SoftResetNeighborRequest_default_instance_;
class SoftResetNeighborResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SoftResetNeighborResponse>
      _instance;
} _SoftResetNeighborResponse_default_instance_;
class ShutdownNeighborRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShutdownNeighborRequest>
      _instance;
} _ShutdownNeighborRequest_default_instance_;
class ShutdownNeighborResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShutdownNeighborResponse>
      _instance;
} _ShutdownNeighborResponse_default_instance_;
class EnableNeighborRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnableNeighborRequest>
      _instance;
} _EnableNeighborRequest_default_instance_;
class EnableNeighborResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnableNeighborResponse>
      _instance;
} _EnableNeighborResponse_default_instance_;
class DisableNeighborRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DisableNeighborRequest>
      _instance;
} _DisableNeighborRequest_default_instance_;
class DisableNeighborResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DisableNeighborResponse>
      _instance;
} _DisableNeighborResponse_default_instance_;
class EnableMrtRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnableMrtRequest>
      _instance;
} _EnableMrtRequest_default_instance_;
class EnableMrtResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnableMrtResponse>
      _instance;
} _EnableMrtResponse_default_instance_;
class DisableMrtRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DisableMrtRequest>
      _instance;
} _DisableMrtRequest_default_instance_;
class DisableMrtResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DisableMrtResponse>
      _instance;
} _DisableMrtResponse_default_instance_;
class InjectMrtRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InjectMrtRequest>
      _instance;
} _InjectMrtRequest_default_instance_;
class InjectMrtResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InjectMrtResponse>
      _instance;
} _InjectMrtResponse_default_instance_;
class AddBmpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddBmpRequest>
      _instance;
} _AddBmpRequest_default_instance_;
class AddBmpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddBmpResponse>
      _instance;
} _AddBmpResponse_default_instance_;
class DeleteBmpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteBmpRequest>
      _instance;
} _DeleteBmpRequest_default_instance_;
class DeleteBmpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteBmpResponse>
      _instance;
} _DeleteBmpResponse_default_instance_;
class MonitorRibRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MonitorRibRequest>
      _instance;
} _MonitorRibRequest_default_instance_;
class RPKIConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPKIConf>
      _instance;
} _RPKIConf_default_instance_;
class RPKIStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPKIState>
      _instance;
} _RPKIState_default_instance_;
class RpkiDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rpki>
      _instance;
} _Rpki_default_instance_;
class GetRpkiRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRpkiRequest>
      _instance;
} _GetRpkiRequest_default_instance_;
class GetRpkiResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRpkiResponse>
      _instance;
} _GetRpkiResponse_default_instance_;
class AddRpkiRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddRpkiRequest>
      _instance;
} _AddRpkiRequest_default_instance_;
class AddRpkiResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddRpkiResponse>
      _instance;
} _AddRpkiResponse_default_instance_;
class DeleteRpkiRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRpkiRequest>
      _instance;
} _DeleteRpkiRequest_default_instance_;
class DeleteRpkiResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRpkiResponse>
      _instance;
} _DeleteRpkiResponse_default_instance_;
class EnableRpkiRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnableRpkiRequest>
      _instance;
} _EnableRpkiRequest_default_instance_;
class EnableRpkiResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnableRpkiResponse>
      _instance;
} _EnableRpkiResponse_default_instance_;
class DisableRpkiRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DisableRpkiRequest>
      _instance;
} _DisableRpkiRequest_default_instance_;
class DisableRpkiResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DisableRpkiResponse>
      _instance;
} _DisableRpkiResponse_default_instance_;
class ResetRpkiRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetRpkiRequest>
      _instance;
} _ResetRpkiRequest_default_instance_;
class ResetRpkiResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetRpkiResponse>
      _instance;
} _ResetRpkiResponse_default_instance_;
class SoftResetRpkiRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SoftResetRpkiRequest>
      _instance;
} _SoftResetRpkiRequest_default_instance_;
class SoftResetRpkiResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SoftResetRpkiResponse>
      _instance;
} _SoftResetRpkiResponse_default_instance_;
class EnableZebraRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnableZebraRequest>
      _instance;
} _EnableZebraRequest_default_instance_;
class EnableZebraResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnableZebraResponse>
      _instance;
} _EnableZebraResponse_default_instance_;
class GetVrfRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVrfRequest>
      _instance;
} _GetVrfRequest_default_instance_;
class GetVrfResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVrfResponse>
      _instance;
} _GetVrfResponse_default_instance_;
class AddVrfRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddVrfRequest>
      _instance;
} _AddVrfRequest_default_instance_;
class AddVrfResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddVrfResponse>
      _instance;
} _AddVrfResponse_default_instance_;
class DeleteVrfRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteVrfRequest>
      _instance;
} _DeleteVrfRequest_default_instance_;
class DeleteVrfResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteVrfResponse>
      _instance;
} _DeleteVrfResponse_default_instance_;
class GetDefinedSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDefinedSetRequest>
      _instance;
} _GetDefinedSetRequest_default_instance_;
class GetDefinedSetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDefinedSetResponse>
      _instance;
} _GetDefinedSetResponse_default_instance_;
class AddDefinedSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddDefinedSetRequest>
      _instance;
} _AddDefinedSetRequest_default_instance_;
class AddDefinedSetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddDefinedSetResponse>
      _instance;
} _AddDefinedSetResponse_default_instance_;
class DeleteDefinedSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteDefinedSetRequest>
      _instance;
} _DeleteDefinedSetRequest_default_instance_;
class DeleteDefinedSetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteDefinedSetResponse>
      _instance;
} _DeleteDefinedSetResponse_default_instance_;
class ReplaceDefinedSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplaceDefinedSetRequest>
      _instance;
} _ReplaceDefinedSetRequest_default_instance_;
class ReplaceDefinedSetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplaceDefinedSetResponse>
      _instance;
} _ReplaceDefinedSetResponse_default_instance_;
class GetStatementRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetStatementRequest>
      _instance;
} _GetStatementRequest_default_instance_;
class GetStatementResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetStatementResponse>
      _instance;
} _GetStatementResponse_default_instance_;
class AddStatementRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddStatementRequest>
      _instance;
} _AddStatementRequest_default_instance_;
class AddStatementResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddStatementResponse>
      _instance;
} _AddStatementResponse_default_instance_;
class DeleteStatementRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteStatementRequest>
      _instance;
} _DeleteStatementRequest_default_instance_;
class DeleteStatementResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteStatementResponse>
      _instance;
} _DeleteStatementResponse_default_instance_;
class ReplaceStatementRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplaceStatementRequest>
      _instance;
} _ReplaceStatementRequest_default_instance_;
class ReplaceStatementResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplaceStatementResponse>
      _instance;
} _ReplaceStatementResponse_default_instance_;
class GetPolicyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPolicyRequest>
      _instance;
} _GetPolicyRequest_default_instance_;
class GetPolicyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPolicyResponse>
      _instance;
} _GetPolicyResponse_default_instance_;
class AddPolicyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPolicyRequest>
      _instance;
} _AddPolicyRequest_default_instance_;
class AddPolicyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPolicyResponse>
      _instance;
} _AddPolicyResponse_default_instance_;
class DeletePolicyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeletePolicyRequest>
      _instance;
} _DeletePolicyRequest_default_instance_;
class DeletePolicyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeletePolicyResponse>
      _instance;
} _DeletePolicyResponse_default_instance_;
class ReplacePolicyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplacePolicyRequest>
      _instance;
} _ReplacePolicyRequest_default_instance_;
class ReplacePolicyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplacePolicyResponse>
      _instance;
} _ReplacePolicyResponse_default_instance_;
class GetPolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPolicyAssignmentRequest>
      _instance;
} _GetPolicyAssignmentRequest_default_instance_;
class GetPolicyAssignmentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPolicyAssignmentResponse>
      _instance;
} _GetPolicyAssignmentResponse_default_instance_;
class AddPolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPolicyAssignmentRequest>
      _instance;
} _AddPolicyAssignmentRequest_default_instance_;
class AddPolicyAssignmentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPolicyAssignmentResponse>
      _instance;
} _AddPolicyAssignmentResponse_default_instance_;
class DeletePolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeletePolicyAssignmentRequest>
      _instance;
} _DeletePolicyAssignmentRequest_default_instance_;
class DeletePolicyAssignmentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeletePolicyAssignmentResponse>
      _instance;
} _DeletePolicyAssignmentResponse_default_instance_;
class ReplacePolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplacePolicyAssignmentRequest>
      _instance;
} _ReplacePolicyAssignmentRequest_default_instance_;
class ReplacePolicyAssignmentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplacePolicyAssignmentResponse>
      _instance;
} _ReplacePolicyAssignmentResponse_default_instance_;
class GetServerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServerRequest>
      _instance;
} _GetServerRequest_default_instance_;
class GetServerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServerResponse>
      _instance;
} _GetServerResponse_default_instance_;
class StartServerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartServerRequest>
      _instance;
} _StartServerRequest_default_instance_;
class StartServerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartServerResponse>
      _instance;
} _StartServerResponse_default_instance_;
class StopServerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopServerRequest>
      _instance;
} _StopServerRequest_default_instance_;
class StopServerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopServerResponse>
      _instance;
} _StopServerResponse_default_instance_;
class RPKIValidationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPKIValidation>
      _instance;
} _RPKIValidation_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Path>
      _instance;
} _Path_default_instance_;
class DestinationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Destination>
      _instance;
} _Destination_default_instance_;
class TableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table>
      _instance;
} _Table_default_instance_;
class GetRibRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRibRequest>
      _instance;
} _GetRibRequest_default_instance_;
class GetRibResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRibResponse>
      _instance;
} _GetRibResponse_default_instance_;
class TableLookupPrefixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableLookupPrefix>
      _instance;
} _TableLookupPrefix_default_instance_;
class GetPathRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPathRequest>
      _instance;
} _GetPathRequest_default_instance_;
class ValidateRibRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValidateRibRequest>
      _instance;
} _ValidateRibRequest_default_instance_;
class ValidateRibResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValidateRibResponse>
      _instance;
} _ValidateRibResponse_default_instance_;
class PeerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Peer>
      _instance;
} _Peer_default_instance_;
class ApplyPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyPolicy>
      _instance;
} _ApplyPolicy_default_instance_;
class PrefixLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrefixLimit>
      _instance;
} _PrefixLimit_default_instance_;
class PeerConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerConf>
      _instance;
} _PeerConf_default_instance_;
class EbgpMultihopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EbgpMultihop>
      _instance;
} _EbgpMultihop_default_instance_;
class RouteReflectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteReflector>
      _instance;
} _RouteReflector_default_instance_;
class PeerStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerState>
      _instance;
} _PeerState_default_instance_;
class MessagesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Messages>
      _instance;
} _Messages_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
} _Message_default_instance_;
class QueuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Queues>
      _instance;
} _Queues_default_instance_;
class TimersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Timers>
      _instance;
} _Timers_default_instance_;
class TimersConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimersConfig>
      _instance;
} _TimersConfig_default_instance_;
class TimersStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimersState>
      _instance;
} _TimersState_default_instance_;
class TransportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transport>
      _instance;
} _Transport_default_instance_;
class RouteServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteServer>
      _instance;
} _RouteServer_default_instance_;
class GracefulRestartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GracefulRestart>
      _instance;
} _GracefulRestart_default_instance_;
class MpGracefulRestartConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MpGracefulRestartConfig>
      _instance;
} _MpGracefulRestartConfig_default_instance_;
class MpGracefulRestartStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MpGracefulRestartState>
      _instance;
} _MpGracefulRestartState_default_instance_;
class MpGracefulRestartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MpGracefulRestart>
      _instance;
} _MpGracefulRestart_default_instance_;
class AfiSafiConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AfiSafiConfig>
      _instance;
} _AfiSafiConfig_default_instance_;
class AfiSafiStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AfiSafiState>
      _instance;
} _AfiSafiState_default_instance_;
class RouteSelectionOptionsConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteSelectionOptionsConfig>
      _instance;
} _RouteSelectionOptionsConfig_default_instance_;
class RouteSelectionOptionsStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteSelectionOptionsState>
      _instance;
} _RouteSelectionOptionsState_default_instance_;
class RouteSelectionOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteSelectionOptions>
      _instance;
} _RouteSelectionOptions_default_instance_;
class UseMultiplePathsConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UseMultiplePathsConfig>
      _instance;
} _UseMultiplePathsConfig_default_instance_;
class UseMultiplePathsStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UseMultiplePathsState>
      _instance;
} _UseMultiplePathsState_default_instance_;
class EbgpConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EbgpConfig>
      _instance;
} _EbgpConfig_default_instance_;
class EbgpStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EbgpState>
      _instance;
} _EbgpState_default_instance_;
class EbgpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ebgp>
      _instance;
} _Ebgp_default_instance_;
class IbgpConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IbgpConfig>
      _instance;
} _IbgpConfig_default_instance_;
class IbgpStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IbgpState>
      _instance;
} _IbgpState_default_instance_;
class IbgpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ibgp>
      _instance;
} _Ibgp_default_instance_;
class UseMultiplePathsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UseMultiplePaths>
      _instance;
} _UseMultiplePaths_default_instance_;
class RouteTargetMembershipConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteTargetMembershipConfig>
      _instance;
} _RouteTargetMembershipConfig_default_instance_;
class RouteTargetMembershipStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteTargetMembershipState>
      _instance;
} _RouteTargetMembershipState_default_instance_;
class RouteTargetMembershipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteTargetMembership>
      _instance;
} _RouteTargetMembership_default_instance_;
class LongLivedGracefulRestartConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongLivedGracefulRestartConfig>
      _instance;
} _LongLivedGracefulRestartConfig_default_instance_;
class LongLivedGracefulRestartStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongLivedGracefulRestartState>
      _instance;
} _LongLivedGracefulRestartState_default_instance_;
class LongLivedGracefulRestartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongLivedGracefulRestart>
      _instance;
} _LongLivedGracefulRestart_default_instance_;
class AfiSafiDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AfiSafi>
      _instance;
} _AfiSafi_default_instance_;
class AddPathsConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPathsConfig>
      _instance;
} _AddPathsConfig_default_instance_;
class AddPathsStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPathsState>
      _instance;
} _AddPathsState_default_instance_;
class AddPathsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPaths>
      _instance;
} _AddPaths_default_instance_;
class PrefixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Prefix>
      _instance;
} _Prefix_default_instance_;
class DefinedSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DefinedSet>
      _instance;
} _DefinedSet_default_instance_;
class MatchSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchSet>
      _instance;
} _MatchSet_default_instance_;
class AsPathLengthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AsPathLength>
      _instance;
} _AsPathLength_default_instance_;
class ConditionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Conditions>
      _instance;
} _Conditions_default_instance_;
class CommunityActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommunityAction>
      _instance;
} _CommunityAction_default_instance_;
class MedActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MedAction>
      _instance;
} _MedAction_default_instance_;
class AsPrependActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AsPrependAction>
      _instance;
} _AsPrependAction_default_instance_;
class NexthopActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NexthopAction>
      _instance;
} _NexthopAction_default_instance_;
class LocalPrefActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalPrefAction>
      _instance;
} _LocalPrefAction_default_instance_;
class ActionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Actions>
      _instance;
} _Actions_default_instance_;
class StatementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Statement>
      _instance;
} _Statement_default_instance_;
class PolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Policy>
      _instance;
} _Policy_default_instance_;
class PolicyAssignmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PolicyAssignment>
      _instance;
} _PolicyAssignment_default_instance_;
class RoaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Roa>
      _instance;
} _Roa_default_instance_;
class GetRoaRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRoaRequest>
      _instance;
} _GetRoaRequest_default_instance_;
class GetRoaResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRoaResponse>
      _instance;
} _GetRoaResponse_default_instance_;
class VrfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vrf>
      _instance;
} _Vrf_default_instance_;
class GlobalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Global>
      _instance;
} _Global_default_instance_;
class TableInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableInfo>
      _instance;
} _TableInfo_default_instance_;
class GetRibInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRibInfoRequest>
      _instance;
} _GetRibInfoRequest_default_instance_;
class GetRibInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRibInfoResponse>
      _instance;
} _GetRibInfoResponse_default_instance_;
}  // namespace gobgpapi
namespace protobuf_gobgp_2eproto {
void InitDefaultsGetNeighborRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_GetNeighborRequest_default_instance_;
    new (ptr) ::gobgpapi::GetNeighborRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetNeighborRequest::InitAsDefaultInstance();
}

void InitDefaultsGetNeighborRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetNeighborRequestImpl);
}

void InitDefaultsGetNeighborResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPeer();
  {
    void* ptr = &::gobgpapi::_GetNeighborResponse_default_instance_;
    new (ptr) ::gobgpapi::GetNeighborResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetNeighborResponse::InitAsDefaultInstance();
}

void InitDefaultsGetNeighborResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetNeighborResponseImpl);
}

void InitDefaultsArgumentsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_Arguments_default_instance_;
    new (ptr) ::gobgpapi::Arguments();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Arguments::InitAsDefaultInstance();
}

void InitDefaultsArguments() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsArgumentsImpl);
}

void InitDefaultsAddPathRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPath();
  {
    void* ptr = &::gobgpapi::_AddPathRequest_default_instance_;
    new (ptr) ::gobgpapi::AddPathRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPathRequest::InitAsDefaultInstance();
}

void InitDefaultsAddPathRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddPathRequestImpl);
}

void InitDefaultsAddPathResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddPathResponse_default_instance_;
    new (ptr) ::gobgpapi::AddPathResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPathResponse::InitAsDefaultInstance();
}

void InitDefaultsAddPathResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddPathResponseImpl);
}

void InitDefaultsDeletePathRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPath();
  {
    void* ptr = &::gobgpapi::_DeletePathRequest_default_instance_;
    new (ptr) ::gobgpapi::DeletePathRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePathRequest::InitAsDefaultInstance();
}

void InitDefaultsDeletePathRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeletePathRequestImpl);
}

void InitDefaultsDeletePathResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeletePathResponse_default_instance_;
    new (ptr) ::gobgpapi::DeletePathResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePathResponse::InitAsDefaultInstance();
}

void InitDefaultsDeletePathResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeletePathResponseImpl);
}

void InitDefaultsAddNeighborRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPeer();
  {
    void* ptr = &::gobgpapi::_AddNeighborRequest_default_instance_;
    new (ptr) ::gobgpapi::AddNeighborRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddNeighborRequest::InitAsDefaultInstance();
}

void InitDefaultsAddNeighborRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddNeighborRequestImpl);
}

void InitDefaultsAddNeighborResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddNeighborResponse_default_instance_;
    new (ptr) ::gobgpapi::AddNeighborResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddNeighborResponse::InitAsDefaultInstance();
}

void InitDefaultsAddNeighborResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddNeighborResponseImpl);
}

void InitDefaultsDeleteNeighborRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPeer();
  {
    void* ptr = &::gobgpapi::_DeleteNeighborRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteNeighborRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteNeighborRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteNeighborRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteNeighborRequestImpl);
}

void InitDefaultsDeleteNeighborResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeleteNeighborResponse_default_instance_;
    new (ptr) ::gobgpapi::DeleteNeighborResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteNeighborResponse::InitAsDefaultInstance();
}

void InitDefaultsDeleteNeighborResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteNeighborResponseImpl);
}

void InitDefaultsResetNeighborRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ResetNeighborRequest_default_instance_;
    new (ptr) ::gobgpapi::ResetNeighborRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ResetNeighborRequest::InitAsDefaultInstance();
}

void InitDefaultsResetNeighborRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResetNeighborRequestImpl);
}

void InitDefaultsResetNeighborResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ResetNeighborResponse_default_instance_;
    new (ptr) ::gobgpapi::ResetNeighborResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ResetNeighborResponse::InitAsDefaultInstance();
}

void InitDefaultsResetNeighborResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResetNeighborResponseImpl);
}

void InitDefaultsSoftResetNeighborRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_SoftResetNeighborRequest_default_instance_;
    new (ptr) ::gobgpapi::SoftResetNeighborRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::SoftResetNeighborRequest::InitAsDefaultInstance();
}

void InitDefaultsSoftResetNeighborRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSoftResetNeighborRequestImpl);
}

void InitDefaultsSoftResetNeighborResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_SoftResetNeighborResponse_default_instance_;
    new (ptr) ::gobgpapi::SoftResetNeighborResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::SoftResetNeighborResponse::InitAsDefaultInstance();
}

void InitDefaultsSoftResetNeighborResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSoftResetNeighborResponseImpl);
}

void InitDefaultsShutdownNeighborRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ShutdownNeighborRequest_default_instance_;
    new (ptr) ::gobgpapi::ShutdownNeighborRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ShutdownNeighborRequest::InitAsDefaultInstance();
}

void InitDefaultsShutdownNeighborRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShutdownNeighborRequestImpl);
}

void InitDefaultsShutdownNeighborResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ShutdownNeighborResponse_default_instance_;
    new (ptr) ::gobgpapi::ShutdownNeighborResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ShutdownNeighborResponse::InitAsDefaultInstance();
}

void InitDefaultsShutdownNeighborResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShutdownNeighborResponseImpl);
}

void InitDefaultsEnableNeighborRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EnableNeighborRequest_default_instance_;
    new (ptr) ::gobgpapi::EnableNeighborRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableNeighborRequest::InitAsDefaultInstance();
}

void InitDefaultsEnableNeighborRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnableNeighborRequestImpl);
}

void InitDefaultsEnableNeighborResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EnableNeighborResponse_default_instance_;
    new (ptr) ::gobgpapi::EnableNeighborResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableNeighborResponse::InitAsDefaultInstance();
}

void InitDefaultsEnableNeighborResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnableNeighborResponseImpl);
}

void InitDefaultsDisableNeighborRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DisableNeighborRequest_default_instance_;
    new (ptr) ::gobgpapi::DisableNeighborRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DisableNeighborRequest::InitAsDefaultInstance();
}

void InitDefaultsDisableNeighborRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDisableNeighborRequestImpl);
}

void InitDefaultsDisableNeighborResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DisableNeighborResponse_default_instance_;
    new (ptr) ::gobgpapi::DisableNeighborResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DisableNeighborResponse::InitAsDefaultInstance();
}

void InitDefaultsDisableNeighborResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDisableNeighborResponseImpl);
}

void InitDefaultsEnableMrtRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EnableMrtRequest_default_instance_;
    new (ptr) ::gobgpapi::EnableMrtRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableMrtRequest::InitAsDefaultInstance();
}

void InitDefaultsEnableMrtRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnableMrtRequestImpl);
}

void InitDefaultsEnableMrtResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EnableMrtResponse_default_instance_;
    new (ptr) ::gobgpapi::EnableMrtResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableMrtResponse::InitAsDefaultInstance();
}

void InitDefaultsEnableMrtResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnableMrtResponseImpl);
}

void InitDefaultsDisableMrtRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DisableMrtRequest_default_instance_;
    new (ptr) ::gobgpapi::DisableMrtRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DisableMrtRequest::InitAsDefaultInstance();
}

void InitDefaultsDisableMrtRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDisableMrtRequestImpl);
}

void InitDefaultsDisableMrtResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DisableMrtResponse_default_instance_;
    new (ptr) ::gobgpapi::DisableMrtResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DisableMrtResponse::InitAsDefaultInstance();
}

void InitDefaultsDisableMrtResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDisableMrtResponseImpl);
}

void InitDefaultsInjectMrtRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPath();
  {
    void* ptr = &::gobgpapi::_InjectMrtRequest_default_instance_;
    new (ptr) ::gobgpapi::InjectMrtRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::InjectMrtRequest::InitAsDefaultInstance();
}

void InitDefaultsInjectMrtRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInjectMrtRequestImpl);
}

void InitDefaultsInjectMrtResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_InjectMrtResponse_default_instance_;
    new (ptr) ::gobgpapi::InjectMrtResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::InjectMrtResponse::InitAsDefaultInstance();
}

void InitDefaultsInjectMrtResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInjectMrtResponseImpl);
}

void InitDefaultsAddBmpRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddBmpRequest_default_instance_;
    new (ptr) ::gobgpapi::AddBmpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddBmpRequest::InitAsDefaultInstance();
}

void InitDefaultsAddBmpRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddBmpRequestImpl);
}

void InitDefaultsAddBmpResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddBmpResponse_default_instance_;
    new (ptr) ::gobgpapi::AddBmpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddBmpResponse::InitAsDefaultInstance();
}

void InitDefaultsAddBmpResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddBmpResponseImpl);
}

void InitDefaultsDeleteBmpRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeleteBmpRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteBmpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteBmpRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteBmpRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteBmpRequestImpl);
}

void InitDefaultsDeleteBmpResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeleteBmpResponse_default_instance_;
    new (ptr) ::gobgpapi::DeleteBmpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteBmpResponse::InitAsDefaultInstance();
}

void InitDefaultsDeleteBmpResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteBmpResponseImpl);
}

void InitDefaultsMonitorRibRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsTable();
  {
    void* ptr = &::gobgpapi::_MonitorRibRequest_default_instance_;
    new (ptr) ::gobgpapi::MonitorRibRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MonitorRibRequest::InitAsDefaultInstance();
}

void InitDefaultsMonitorRibRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMonitorRibRequestImpl);
}

void InitDefaultsRPKIConfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_RPKIConf_default_instance_;
    new (ptr) ::gobgpapi::RPKIConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RPKIConf::InitAsDefaultInstance();
}

void InitDefaultsRPKIConf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPKIConfImpl);
}

void InitDefaultsRPKIStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_RPKIState_default_instance_;
    new (ptr) ::gobgpapi::RPKIState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RPKIState::InitAsDefaultInstance();
}

void InitDefaultsRPKIState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPKIStateImpl);
}

void InitDefaultsRpkiImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsRPKIConf();
  protobuf_gobgp_2eproto::InitDefaultsRPKIState();
  {
    void* ptr = &::gobgpapi::_Rpki_default_instance_;
    new (ptr) ::gobgpapi::Rpki();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Rpki::InitAsDefaultInstance();
}

void InitDefaultsRpki() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRpkiImpl);
}

void InitDefaultsGetRpkiRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_GetRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::GetRpkiRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetRpkiRequest::InitAsDefaultInstance();
}

void InitDefaultsGetRpkiRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRpkiRequestImpl);
}

void InitDefaultsGetRpkiResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsRpki();
  {
    void* ptr = &::gobgpapi::_GetRpkiResponse_default_instance_;
    new (ptr) ::gobgpapi::GetRpkiResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetRpkiResponse::InitAsDefaultInstance();
}

void InitDefaultsGetRpkiResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRpkiResponseImpl);
}

void InitDefaultsAddRpkiRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::AddRpkiRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddRpkiRequest::InitAsDefaultInstance();
}

void InitDefaultsAddRpkiRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddRpkiRequestImpl);
}

void InitDefaultsAddRpkiResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddRpkiResponse_default_instance_;
    new (ptr) ::gobgpapi::AddRpkiResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddRpkiResponse::InitAsDefaultInstance();
}

void InitDefaultsAddRpkiResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddRpkiResponseImpl);
}

void InitDefaultsDeleteRpkiRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeleteRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteRpkiRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteRpkiRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteRpkiRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteRpkiRequestImpl);
}

void InitDefaultsDeleteRpkiResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeleteRpkiResponse_default_instance_;
    new (ptr) ::gobgpapi::DeleteRpkiResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteRpkiResponse::InitAsDefaultInstance();
}

void InitDefaultsDeleteRpkiResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteRpkiResponseImpl);
}

void InitDefaultsEnableRpkiRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EnableRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::EnableRpkiRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableRpkiRequest::InitAsDefaultInstance();
}

void InitDefaultsEnableRpkiRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnableRpkiRequestImpl);
}

void InitDefaultsEnableRpkiResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EnableRpkiResponse_default_instance_;
    new (ptr) ::gobgpapi::EnableRpkiResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableRpkiResponse::InitAsDefaultInstance();
}

void InitDefaultsEnableRpkiResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnableRpkiResponseImpl);
}

void InitDefaultsDisableRpkiRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DisableRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::DisableRpkiRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DisableRpkiRequest::InitAsDefaultInstance();
}

void InitDefaultsDisableRpkiRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDisableRpkiRequestImpl);
}

void InitDefaultsDisableRpkiResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DisableRpkiResponse_default_instance_;
    new (ptr) ::gobgpapi::DisableRpkiResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DisableRpkiResponse::InitAsDefaultInstance();
}

void InitDefaultsDisableRpkiResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDisableRpkiResponseImpl);
}

void InitDefaultsResetRpkiRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ResetRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::ResetRpkiRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ResetRpkiRequest::InitAsDefaultInstance();
}

void InitDefaultsResetRpkiRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResetRpkiRequestImpl);
}

void InitDefaultsResetRpkiResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ResetRpkiResponse_default_instance_;
    new (ptr) ::gobgpapi::ResetRpkiResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ResetRpkiResponse::InitAsDefaultInstance();
}

void InitDefaultsResetRpkiResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResetRpkiResponseImpl);
}

void InitDefaultsSoftResetRpkiRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_SoftResetRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::SoftResetRpkiRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::SoftResetRpkiRequest::InitAsDefaultInstance();
}

void InitDefaultsSoftResetRpkiRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSoftResetRpkiRequestImpl);
}

void InitDefaultsSoftResetRpkiResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_SoftResetRpkiResponse_default_instance_;
    new (ptr) ::gobgpapi::SoftResetRpkiResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::SoftResetRpkiResponse::InitAsDefaultInstance();
}

void InitDefaultsSoftResetRpkiResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSoftResetRpkiResponseImpl);
}

void InitDefaultsEnableZebraRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EnableZebraRequest_default_instance_;
    new (ptr) ::gobgpapi::EnableZebraRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableZebraRequest::InitAsDefaultInstance();
}

void InitDefaultsEnableZebraRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnableZebraRequestImpl);
}

void InitDefaultsEnableZebraResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EnableZebraResponse_default_instance_;
    new (ptr) ::gobgpapi::EnableZebraResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableZebraResponse::InitAsDefaultInstance();
}

void InitDefaultsEnableZebraResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnableZebraResponseImpl);
}

void InitDefaultsGetVrfRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_GetVrfRequest_default_instance_;
    new (ptr) ::gobgpapi::GetVrfRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetVrfRequest::InitAsDefaultInstance();
}

void InitDefaultsGetVrfRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetVrfRequestImpl);
}

void InitDefaultsGetVrfResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsVrf();
  {
    void* ptr = &::gobgpapi::_GetVrfResponse_default_instance_;
    new (ptr) ::gobgpapi::GetVrfResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetVrfResponse::InitAsDefaultInstance();
}

void InitDefaultsGetVrfResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetVrfResponseImpl);
}

void InitDefaultsAddVrfRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsVrf();
  {
    void* ptr = &::gobgpapi::_AddVrfRequest_default_instance_;
    new (ptr) ::gobgpapi::AddVrfRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddVrfRequest::InitAsDefaultInstance();
}

void InitDefaultsAddVrfRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddVrfRequestImpl);
}

void InitDefaultsAddVrfResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddVrfResponse_default_instance_;
    new (ptr) ::gobgpapi::AddVrfResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddVrfResponse::InitAsDefaultInstance();
}

void InitDefaultsAddVrfResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddVrfResponseImpl);
}

void InitDefaultsDeleteVrfRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsVrf();
  {
    void* ptr = &::gobgpapi::_DeleteVrfRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteVrfRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteVrfRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteVrfRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteVrfRequestImpl);
}

void InitDefaultsDeleteVrfResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeleteVrfResponse_default_instance_;
    new (ptr) ::gobgpapi::DeleteVrfResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteVrfResponse::InitAsDefaultInstance();
}

void InitDefaultsDeleteVrfResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteVrfResponseImpl);
}

void InitDefaultsGetDefinedSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_GetDefinedSetRequest_default_instance_;
    new (ptr) ::gobgpapi::GetDefinedSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetDefinedSetRequest::InitAsDefaultInstance();
}

void InitDefaultsGetDefinedSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetDefinedSetRequestImpl);
}

void InitDefaultsGetDefinedSetResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsDefinedSet();
  {
    void* ptr = &::gobgpapi::_GetDefinedSetResponse_default_instance_;
    new (ptr) ::gobgpapi::GetDefinedSetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetDefinedSetResponse::InitAsDefaultInstance();
}

void InitDefaultsGetDefinedSetResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetDefinedSetResponseImpl);
}

void InitDefaultsAddDefinedSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsDefinedSet();
  {
    void* ptr = &::gobgpapi::_AddDefinedSetRequest_default_instance_;
    new (ptr) ::gobgpapi::AddDefinedSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddDefinedSetRequest::InitAsDefaultInstance();
}

void InitDefaultsAddDefinedSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddDefinedSetRequestImpl);
}

void InitDefaultsAddDefinedSetResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddDefinedSetResponse_default_instance_;
    new (ptr) ::gobgpapi::AddDefinedSetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddDefinedSetResponse::InitAsDefaultInstance();
}

void InitDefaultsAddDefinedSetResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddDefinedSetResponseImpl);
}

void InitDefaultsDeleteDefinedSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsDefinedSet();
  {
    void* ptr = &::gobgpapi::_DeleteDefinedSetRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteDefinedSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteDefinedSetRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteDefinedSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteDefinedSetRequestImpl);
}

void InitDefaultsDeleteDefinedSetResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeleteDefinedSetResponse_default_instance_;
    new (ptr) ::gobgpapi::DeleteDefinedSetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteDefinedSetResponse::InitAsDefaultInstance();
}

void InitDefaultsDeleteDefinedSetResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteDefinedSetResponseImpl);
}

void InitDefaultsReplaceDefinedSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsDefinedSet();
  {
    void* ptr = &::gobgpapi::_ReplaceDefinedSetRequest_default_instance_;
    new (ptr) ::gobgpapi::ReplaceDefinedSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ReplaceDefinedSetRequest::InitAsDefaultInstance();
}

void InitDefaultsReplaceDefinedSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplaceDefinedSetRequestImpl);
}

void InitDefaultsReplaceDefinedSetResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ReplaceDefinedSetResponse_default_instance_;
    new (ptr) ::gobgpapi::ReplaceDefinedSetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ReplaceDefinedSetResponse::InitAsDefaultInstance();
}

void InitDefaultsReplaceDefinedSetResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplaceDefinedSetResponseImpl);
}

void InitDefaultsGetStatementRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_GetStatementRequest_default_instance_;
    new (ptr) ::gobgpapi::GetStatementRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetStatementRequest::InitAsDefaultInstance();
}

void InitDefaultsGetStatementRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetStatementRequestImpl);
}

void InitDefaultsGetStatementResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsStatement();
  {
    void* ptr = &::gobgpapi::_GetStatementResponse_default_instance_;
    new (ptr) ::gobgpapi::GetStatementResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetStatementResponse::InitAsDefaultInstance();
}

void InitDefaultsGetStatementResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetStatementResponseImpl);
}

void InitDefaultsAddStatementRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsStatement();
  {
    void* ptr = &::gobgpapi::_AddStatementRequest_default_instance_;
    new (ptr) ::gobgpapi::AddStatementRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddStatementRequest::InitAsDefaultInstance();
}

void InitDefaultsAddStatementRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddStatementRequestImpl);
}

void InitDefaultsAddStatementResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddStatementResponse_default_instance_;
    new (ptr) ::gobgpapi::AddStatementResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddStatementResponse::InitAsDefaultInstance();
}

void InitDefaultsAddStatementResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddStatementResponseImpl);
}

void InitDefaultsDeleteStatementRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsStatement();
  {
    void* ptr = &::gobgpapi::_DeleteStatementRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteStatementRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteStatementRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteStatementRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteStatementRequestImpl);
}

void InitDefaultsDeleteStatementResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeleteStatementResponse_default_instance_;
    new (ptr) ::gobgpapi::DeleteStatementResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteStatementResponse::InitAsDefaultInstance();
}

void InitDefaultsDeleteStatementResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteStatementResponseImpl);
}

void InitDefaultsReplaceStatementRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsStatement();
  {
    void* ptr = &::gobgpapi::_ReplaceStatementRequest_default_instance_;
    new (ptr) ::gobgpapi::ReplaceStatementRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ReplaceStatementRequest::InitAsDefaultInstance();
}

void InitDefaultsReplaceStatementRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplaceStatementRequestImpl);
}

void InitDefaultsReplaceStatementResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ReplaceStatementResponse_default_instance_;
    new (ptr) ::gobgpapi::ReplaceStatementResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ReplaceStatementResponse::InitAsDefaultInstance();
}

void InitDefaultsReplaceStatementResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplaceStatementResponseImpl);
}

void InitDefaultsGetPolicyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_GetPolicyRequest_default_instance_;
    new (ptr) ::gobgpapi::GetPolicyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetPolicyRequest::InitAsDefaultInstance();
}

void InitDefaultsGetPolicyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetPolicyRequestImpl);
}

void InitDefaultsGetPolicyResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicy();
  {
    void* ptr = &::gobgpapi::_GetPolicyResponse_default_instance_;
    new (ptr) ::gobgpapi::GetPolicyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetPolicyResponse::InitAsDefaultInstance();
}

void InitDefaultsGetPolicyResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetPolicyResponseImpl);
}

void InitDefaultsAddPolicyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicy();
  {
    void* ptr = &::gobgpapi::_AddPolicyRequest_default_instance_;
    new (ptr) ::gobgpapi::AddPolicyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPolicyRequest::InitAsDefaultInstance();
}

void InitDefaultsAddPolicyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddPolicyRequestImpl);
}

void InitDefaultsAddPolicyResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddPolicyResponse_default_instance_;
    new (ptr) ::gobgpapi::AddPolicyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPolicyResponse::InitAsDefaultInstance();
}

void InitDefaultsAddPolicyResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddPolicyResponseImpl);
}

void InitDefaultsDeletePolicyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicy();
  {
    void* ptr = &::gobgpapi::_DeletePolicyRequest_default_instance_;
    new (ptr) ::gobgpapi::DeletePolicyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePolicyRequest::InitAsDefaultInstance();
}

void InitDefaultsDeletePolicyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeletePolicyRequestImpl);
}

void InitDefaultsDeletePolicyResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeletePolicyResponse_default_instance_;
    new (ptr) ::gobgpapi::DeletePolicyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePolicyResponse::InitAsDefaultInstance();
}

void InitDefaultsDeletePolicyResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeletePolicyResponseImpl);
}

void InitDefaultsReplacePolicyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicy();
  {
    void* ptr = &::gobgpapi::_ReplacePolicyRequest_default_instance_;
    new (ptr) ::gobgpapi::ReplacePolicyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ReplacePolicyRequest::InitAsDefaultInstance();
}

void InitDefaultsReplacePolicyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplacePolicyRequestImpl);
}

void InitDefaultsReplacePolicyResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ReplacePolicyResponse_default_instance_;
    new (ptr) ::gobgpapi::ReplacePolicyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ReplacePolicyResponse::InitAsDefaultInstance();
}

void InitDefaultsReplacePolicyResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplacePolicyResponseImpl);
}

void InitDefaultsGetPolicyAssignmentRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicyAssignment();
  {
    void* ptr = &::gobgpapi::_GetPolicyAssignmentRequest_default_instance_;
    new (ptr) ::gobgpapi::GetPolicyAssignmentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetPolicyAssignmentRequest::InitAsDefaultInstance();
}

void InitDefaultsGetPolicyAssignmentRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetPolicyAssignmentRequestImpl);
}

void InitDefaultsGetPolicyAssignmentResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicyAssignment();
  {
    void* ptr = &::gobgpapi::_GetPolicyAssignmentResponse_default_instance_;
    new (ptr) ::gobgpapi::GetPolicyAssignmentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetPolicyAssignmentResponse::InitAsDefaultInstance();
}

void InitDefaultsGetPolicyAssignmentResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetPolicyAssignmentResponseImpl);
}

void InitDefaultsAddPolicyAssignmentRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicyAssignment();
  {
    void* ptr = &::gobgpapi::_AddPolicyAssignmentRequest_default_instance_;
    new (ptr) ::gobgpapi::AddPolicyAssignmentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPolicyAssignmentRequest::InitAsDefaultInstance();
}

void InitDefaultsAddPolicyAssignmentRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddPolicyAssignmentRequestImpl);
}

void InitDefaultsAddPolicyAssignmentResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddPolicyAssignmentResponse_default_instance_;
    new (ptr) ::gobgpapi::AddPolicyAssignmentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPolicyAssignmentResponse::InitAsDefaultInstance();
}

void InitDefaultsAddPolicyAssignmentResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddPolicyAssignmentResponseImpl);
}

void InitDefaultsDeletePolicyAssignmentRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicyAssignment();
  {
    void* ptr = &::gobgpapi::_DeletePolicyAssignmentRequest_default_instance_;
    new (ptr) ::gobgpapi::DeletePolicyAssignmentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePolicyAssignmentRequest::InitAsDefaultInstance();
}

void InitDefaultsDeletePolicyAssignmentRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeletePolicyAssignmentRequestImpl);
}

void InitDefaultsDeletePolicyAssignmentResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_DeletePolicyAssignmentResponse_default_instance_;
    new (ptr) ::gobgpapi::DeletePolicyAssignmentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePolicyAssignmentResponse::InitAsDefaultInstance();
}

void InitDefaultsDeletePolicyAssignmentResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeletePolicyAssignmentResponseImpl);
}

void InitDefaultsReplacePolicyAssignmentRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicyAssignment();
  {
    void* ptr = &::gobgpapi::_ReplacePolicyAssignmentRequest_default_instance_;
    new (ptr) ::gobgpapi::ReplacePolicyAssignmentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ReplacePolicyAssignmentRequest::InitAsDefaultInstance();
}

void InitDefaultsReplacePolicyAssignmentRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplacePolicyAssignmentRequestImpl);
}

void InitDefaultsReplacePolicyAssignmentResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ReplacePolicyAssignmentResponse_default_instance_;
    new (ptr) ::gobgpapi::ReplacePolicyAssignmentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ReplacePolicyAssignmentResponse::InitAsDefaultInstance();
}

void InitDefaultsReplacePolicyAssignmentResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplacePolicyAssignmentResponseImpl);
}

void InitDefaultsGetServerRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_GetServerRequest_default_instance_;
    new (ptr) ::gobgpapi::GetServerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetServerRequest::InitAsDefaultInstance();
}

void InitDefaultsGetServerRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetServerRequestImpl);
}

void InitDefaultsGetServerResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsGlobal();
  {
    void* ptr = &::gobgpapi::_GetServerResponse_default_instance_;
    new (ptr) ::gobgpapi::GetServerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetServerResponse::InitAsDefaultInstance();
}

void InitDefaultsGetServerResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetServerResponseImpl);
}

void InitDefaultsStartServerRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsGlobal();
  {
    void* ptr = &::gobgpapi::_StartServerRequest_default_instance_;
    new (ptr) ::gobgpapi::StartServerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::StartServerRequest::InitAsDefaultInstance();
}

void InitDefaultsStartServerRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStartServerRequestImpl);
}

void InitDefaultsStartServerResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_StartServerResponse_default_instance_;
    new (ptr) ::gobgpapi::StartServerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::StartServerResponse::InitAsDefaultInstance();
}

void InitDefaultsStartServerResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStartServerResponseImpl);
}

void InitDefaultsStopServerRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_StopServerRequest_default_instance_;
    new (ptr) ::gobgpapi::StopServerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::StopServerRequest::InitAsDefaultInstance();
}

void InitDefaultsStopServerRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStopServerRequestImpl);
}

void InitDefaultsStopServerResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_StopServerResponse_default_instance_;
    new (ptr) ::gobgpapi::StopServerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::StopServerResponse::InitAsDefaultInstance();
}

void InitDefaultsStopServerResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStopServerResponseImpl);
}

void InitDefaultsRPKIValidationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsRoa();
  {
    void* ptr = &::gobgpapi::_RPKIValidation_default_instance_;
    new (ptr) ::gobgpapi::RPKIValidation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RPKIValidation::InitAsDefaultInstance();
}

void InitDefaultsRPKIValidation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPKIValidationImpl);
}

void InitDefaultsPathImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsRPKIValidation();
  {
    void* ptr = &::gobgpapi::_Path_default_instance_;
    new (ptr) ::gobgpapi::Path();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Path::InitAsDefaultInstance();
}

void InitDefaultsPath() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPathImpl);
}

void InitDefaultsDestinationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPath();
  {
    void* ptr = &::gobgpapi::_Destination_default_instance_;
    new (ptr) ::gobgpapi::Destination();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Destination::InitAsDefaultInstance();
}

void InitDefaultsDestination() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDestinationImpl);
}

void InitDefaultsTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsDestination();
  {
    void* ptr = &::gobgpapi::_Table_default_instance_;
    new (ptr) ::gobgpapi::Table();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Table::InitAsDefaultInstance();
}

void InitDefaultsTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableImpl);
}

void InitDefaultsGetRibRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsTable();
  {
    void* ptr = &::gobgpapi::_GetRibRequest_default_instance_;
    new (ptr) ::gobgpapi::GetRibRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetRibRequest::InitAsDefaultInstance();
}

void InitDefaultsGetRibRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRibRequestImpl);
}

void InitDefaultsGetRibResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsTable();
  {
    void* ptr = &::gobgpapi::_GetRibResponse_default_instance_;
    new (ptr) ::gobgpapi::GetRibResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetRibResponse::InitAsDefaultInstance();
}

void InitDefaultsGetRibResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRibResponseImpl);
}

void InitDefaultsTableLookupPrefixImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_TableLookupPrefix_default_instance_;
    new (ptr) ::gobgpapi::TableLookupPrefix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TableLookupPrefix::InitAsDefaultInstance();
}

void InitDefaultsTableLookupPrefix() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableLookupPrefixImpl);
}

void InitDefaultsGetPathRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsTableLookupPrefix();
  {
    void* ptr = &::gobgpapi::_GetPathRequest_default_instance_;
    new (ptr) ::gobgpapi::GetPathRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetPathRequest::InitAsDefaultInstance();
}

void InitDefaultsGetPathRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetPathRequestImpl);
}

void InitDefaultsValidateRibRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ValidateRibRequest_default_instance_;
    new (ptr) ::gobgpapi::ValidateRibRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ValidateRibRequest::InitAsDefaultInstance();
}

void InitDefaultsValidateRibRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsValidateRibRequestImpl);
}

void InitDefaultsValidateRibResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_ValidateRibResponse_default_instance_;
    new (ptr) ::gobgpapi::ValidateRibResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ValidateRibResponse::InitAsDefaultInstance();
}

void InitDefaultsValidateRibResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsValidateRibResponseImpl);
}

void InitDefaultsPeerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsApplyPolicy();
  protobuf_gobgp_2eproto::InitDefaultsPeerConf();
  protobuf_gobgp_2eproto::InitDefaultsEbgpMultihop();
  protobuf_gobgp_2eproto::InitDefaultsRouteReflector();
  protobuf_gobgp_2eproto::InitDefaultsPeerState();
  protobuf_gobgp_2eproto::InitDefaultsTimers();
  protobuf_gobgp_2eproto::InitDefaultsTransport();
  protobuf_gobgp_2eproto::InitDefaultsRouteServer();
  protobuf_gobgp_2eproto::InitDefaultsGracefulRestart();
  protobuf_gobgp_2eproto::InitDefaultsAfiSafi();
  protobuf_gobgp_2eproto::InitDefaultsAddPaths();
  {
    void* ptr = &::gobgpapi::_Peer_default_instance_;
    new (ptr) ::gobgpapi::Peer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Peer::InitAsDefaultInstance();
}

void InitDefaultsPeer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPeerImpl);
}

void InitDefaultsApplyPolicyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicyAssignment();
  {
    void* ptr = &::gobgpapi::_ApplyPolicy_default_instance_;
    new (ptr) ::gobgpapi::ApplyPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ApplyPolicy::InitAsDefaultInstance();
}

void InitDefaultsApplyPolicy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsApplyPolicyImpl);
}

void InitDefaultsPrefixLimitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_PrefixLimit_default_instance_;
    new (ptr) ::gobgpapi::PrefixLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PrefixLimit::InitAsDefaultInstance();
}

void InitDefaultsPrefixLimit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrefixLimitImpl);
}

void InitDefaultsPeerConfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPrefixLimit();
  {
    void* ptr = &::gobgpapi::_PeerConf_default_instance_;
    new (ptr) ::gobgpapi::PeerConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PeerConf::InitAsDefaultInstance();
}

void InitDefaultsPeerConf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPeerConfImpl);
}

void InitDefaultsEbgpMultihopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EbgpMultihop_default_instance_;
    new (ptr) ::gobgpapi::EbgpMultihop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EbgpMultihop::InitAsDefaultInstance();
}

void InitDefaultsEbgpMultihop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEbgpMultihopImpl);
}

void InitDefaultsRouteReflectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_RouteReflector_default_instance_;
    new (ptr) ::gobgpapi::RouteReflector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteReflector::InitAsDefaultInstance();
}

void InitDefaultsRouteReflector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteReflectorImpl);
}

void InitDefaultsPeerStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsMessages();
  protobuf_gobgp_2eproto::InitDefaultsQueues();
  {
    void* ptr = &::gobgpapi::_PeerState_default_instance_;
    new (ptr) ::gobgpapi::PeerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PeerState::InitAsDefaultInstance();
}

void InitDefaultsPeerState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPeerStateImpl);
}

void InitDefaultsMessagesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsMessage();
  {
    void* ptr = &::gobgpapi::_Messages_default_instance_;
    new (ptr) ::gobgpapi::Messages();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Messages::InitAsDefaultInstance();
}

void InitDefaultsMessages() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessagesImpl);
}

void InitDefaultsMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_Message_default_instance_;
    new (ptr) ::gobgpapi::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Message::InitAsDefaultInstance();
}

void InitDefaultsMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageImpl);
}

void InitDefaultsQueuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_Queues_default_instance_;
    new (ptr) ::gobgpapi::Queues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Queues::InitAsDefaultInstance();
}

void InitDefaultsQueues() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueuesImpl);
}

void InitDefaultsTimersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsTimersConfig();
  protobuf_gobgp_2eproto::InitDefaultsTimersState();
  {
    void* ptr = &::gobgpapi::_Timers_default_instance_;
    new (ptr) ::gobgpapi::Timers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Timers::InitAsDefaultInstance();
}

void InitDefaultsTimers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimersImpl);
}

void InitDefaultsTimersConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_TimersConfig_default_instance_;
    new (ptr) ::gobgpapi::TimersConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TimersConfig::InitAsDefaultInstance();
}

void InitDefaultsTimersConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimersConfigImpl);
}

void InitDefaultsTimersStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_TimersState_default_instance_;
    new (ptr) ::gobgpapi::TimersState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TimersState::InitAsDefaultInstance();
}

void InitDefaultsTimersState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimersStateImpl);
}

void InitDefaultsTransportImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_Transport_default_instance_;
    new (ptr) ::gobgpapi::Transport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Transport::InitAsDefaultInstance();
}

void InitDefaultsTransport() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransportImpl);
}

void InitDefaultsRouteServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_RouteServer_default_instance_;
    new (ptr) ::gobgpapi::RouteServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteServer::InitAsDefaultInstance();
}

void InitDefaultsRouteServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteServerImpl);
}

void InitDefaultsGracefulRestartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_GracefulRestart_default_instance_;
    new (ptr) ::gobgpapi::GracefulRestart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GracefulRestart::InitAsDefaultInstance();
}

void InitDefaultsGracefulRestart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGracefulRestartImpl);
}

void InitDefaultsMpGracefulRestartConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_MpGracefulRestartConfig_default_instance_;
    new (ptr) ::gobgpapi::MpGracefulRestartConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MpGracefulRestartConfig::InitAsDefaultInstance();
}

void InitDefaultsMpGracefulRestartConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMpGracefulRestartConfigImpl);
}

void InitDefaultsMpGracefulRestartStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_MpGracefulRestartState_default_instance_;
    new (ptr) ::gobgpapi::MpGracefulRestartState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MpGracefulRestartState::InitAsDefaultInstance();
}

void InitDefaultsMpGracefulRestartState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMpGracefulRestartStateImpl);
}

void InitDefaultsMpGracefulRestartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestartConfig();
  protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestartState();
  {
    void* ptr = &::gobgpapi::_MpGracefulRestart_default_instance_;
    new (ptr) ::gobgpapi::MpGracefulRestart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MpGracefulRestart::InitAsDefaultInstance();
}

void InitDefaultsMpGracefulRestart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMpGracefulRestartImpl);
}

void InitDefaultsAfiSafiConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AfiSafiConfig_default_instance_;
    new (ptr) ::gobgpapi::AfiSafiConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AfiSafiConfig::InitAsDefaultInstance();
}

void InitDefaultsAfiSafiConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAfiSafiConfigImpl);
}

void InitDefaultsAfiSafiStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AfiSafiState_default_instance_;
    new (ptr) ::gobgpapi::AfiSafiState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AfiSafiState::InitAsDefaultInstance();
}

void InitDefaultsAfiSafiState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAfiSafiStateImpl);
}

void InitDefaultsRouteSelectionOptionsConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_RouteSelectionOptionsConfig_default_instance_;
    new (ptr) ::gobgpapi::RouteSelectionOptionsConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteSelectionOptionsConfig::InitAsDefaultInstance();
}

void InitDefaultsRouteSelectionOptionsConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteSelectionOptionsConfigImpl);
}

void InitDefaultsRouteSelectionOptionsStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_RouteSelectionOptionsState_default_instance_;
    new (ptr) ::gobgpapi::RouteSelectionOptionsState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteSelectionOptionsState::InitAsDefaultInstance();
}

void InitDefaultsRouteSelectionOptionsState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteSelectionOptionsStateImpl);
}

void InitDefaultsRouteSelectionOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptionsConfig();
  protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptionsState();
  {
    void* ptr = &::gobgpapi::_RouteSelectionOptions_default_instance_;
    new (ptr) ::gobgpapi::RouteSelectionOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteSelectionOptions::InitAsDefaultInstance();
}

void InitDefaultsRouteSelectionOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteSelectionOptionsImpl);
}

void InitDefaultsUseMultiplePathsConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_UseMultiplePathsConfig_default_instance_;
    new (ptr) ::gobgpapi::UseMultiplePathsConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UseMultiplePathsConfig::InitAsDefaultInstance();
}

void InitDefaultsUseMultiplePathsConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUseMultiplePathsConfigImpl);
}

void InitDefaultsUseMultiplePathsStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_UseMultiplePathsState_default_instance_;
    new (ptr) ::gobgpapi::UseMultiplePathsState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UseMultiplePathsState::InitAsDefaultInstance();
}

void InitDefaultsUseMultiplePathsState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUseMultiplePathsStateImpl);
}

void InitDefaultsEbgpConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EbgpConfig_default_instance_;
    new (ptr) ::gobgpapi::EbgpConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EbgpConfig::InitAsDefaultInstance();
}

void InitDefaultsEbgpConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEbgpConfigImpl);
}

void InitDefaultsEbgpStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_EbgpState_default_instance_;
    new (ptr) ::gobgpapi::EbgpState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EbgpState::InitAsDefaultInstance();
}

void InitDefaultsEbgpState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEbgpStateImpl);
}

void InitDefaultsEbgpImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsEbgpConfig();
  protobuf_gobgp_2eproto::InitDefaultsEbgpState();
  {
    void* ptr = &::gobgpapi::_Ebgp_default_instance_;
    new (ptr) ::gobgpapi::Ebgp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Ebgp::InitAsDefaultInstance();
}

void InitDefaultsEbgp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEbgpImpl);
}

void InitDefaultsIbgpConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_IbgpConfig_default_instance_;
    new (ptr) ::gobgpapi::IbgpConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::IbgpConfig::InitAsDefaultInstance();
}

void InitDefaultsIbgpConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIbgpConfigImpl);
}

void InitDefaultsIbgpStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_IbgpState_default_instance_;
    new (ptr) ::gobgpapi::IbgpState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::IbgpState::InitAsDefaultInstance();
}

void InitDefaultsIbgpState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIbgpStateImpl);
}

void InitDefaultsIbgpImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsIbgpConfig();
  protobuf_gobgp_2eproto::InitDefaultsIbgpState();
  {
    void* ptr = &::gobgpapi::_Ibgp_default_instance_;
    new (ptr) ::gobgpapi::Ibgp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Ibgp::InitAsDefaultInstance();
}

void InitDefaultsIbgp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIbgpImpl);
}

void InitDefaultsUseMultiplePathsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsUseMultiplePathsConfig();
  protobuf_gobgp_2eproto::InitDefaultsUseMultiplePathsState();
  protobuf_gobgp_2eproto::InitDefaultsEbgp();
  protobuf_gobgp_2eproto::InitDefaultsIbgp();
  {
    void* ptr = &::gobgpapi::_UseMultiplePaths_default_instance_;
    new (ptr) ::gobgpapi::UseMultiplePaths();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UseMultiplePaths::InitAsDefaultInstance();
}

void InitDefaultsUseMultiplePaths() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUseMultiplePathsImpl);
}

void InitDefaultsRouteTargetMembershipConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_RouteTargetMembershipConfig_default_instance_;
    new (ptr) ::gobgpapi::RouteTargetMembershipConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteTargetMembershipConfig::InitAsDefaultInstance();
}

void InitDefaultsRouteTargetMembershipConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteTargetMembershipConfigImpl);
}

void InitDefaultsRouteTargetMembershipStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_RouteTargetMembershipState_default_instance_;
    new (ptr) ::gobgpapi::RouteTargetMembershipState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteTargetMembershipState::InitAsDefaultInstance();
}

void InitDefaultsRouteTargetMembershipState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteTargetMembershipStateImpl);
}

void InitDefaultsRouteTargetMembershipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembershipConfig();
  protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembershipState();
  {
    void* ptr = &::gobgpapi::_RouteTargetMembership_default_instance_;
    new (ptr) ::gobgpapi::RouteTargetMembership();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteTargetMembership::InitAsDefaultInstance();
}

void InitDefaultsRouteTargetMembership() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteTargetMembershipImpl);
}

void InitDefaultsLongLivedGracefulRestartConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_LongLivedGracefulRestartConfig_default_instance_;
    new (ptr) ::gobgpapi::LongLivedGracefulRestartConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LongLivedGracefulRestartConfig::InitAsDefaultInstance();
}

void InitDefaultsLongLivedGracefulRestartConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLongLivedGracefulRestartConfigImpl);
}

void InitDefaultsLongLivedGracefulRestartStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_LongLivedGracefulRestartState_default_instance_;
    new (ptr) ::gobgpapi::LongLivedGracefulRestartState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LongLivedGracefulRestartState::InitAsDefaultInstance();
}

void InitDefaultsLongLivedGracefulRestartState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLongLivedGracefulRestartStateImpl);
}

void InitDefaultsLongLivedGracefulRestartImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestartConfig();
  protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestartState();
  {
    void* ptr = &::gobgpapi::_LongLivedGracefulRestart_default_instance_;
    new (ptr) ::gobgpapi::LongLivedGracefulRestart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LongLivedGracefulRestart::InitAsDefaultInstance();
}

void InitDefaultsLongLivedGracefulRestart() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLongLivedGracefulRestartImpl);
}

void InitDefaultsAfiSafiImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestart();
  protobuf_gobgp_2eproto::InitDefaultsAfiSafiConfig();
  protobuf_gobgp_2eproto::InitDefaultsApplyPolicy();
  protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptions();
  protobuf_gobgp_2eproto::InitDefaultsUseMultiplePaths();
  protobuf_gobgp_2eproto::InitDefaultsPrefixLimit();
  protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembership();
  protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestart();
  protobuf_gobgp_2eproto::InitDefaultsAddPaths();
  {
    void* ptr = &::gobgpapi::_AfiSafi_default_instance_;
    new (ptr) ::gobgpapi::AfiSafi();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AfiSafi::InitAsDefaultInstance();
}

void InitDefaultsAfiSafi() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAfiSafiImpl);
}

void InitDefaultsAddPathsConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddPathsConfig_default_instance_;
    new (ptr) ::gobgpapi::AddPathsConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPathsConfig::InitAsDefaultInstance();
}

void InitDefaultsAddPathsConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddPathsConfigImpl);
}

void InitDefaultsAddPathsStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AddPathsState_default_instance_;
    new (ptr) ::gobgpapi::AddPathsState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPathsState::InitAsDefaultInstance();
}

void InitDefaultsAddPathsState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddPathsStateImpl);
}

void InitDefaultsAddPathsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsAddPathsConfig();
  protobuf_gobgp_2eproto::InitDefaultsAddPathsState();
  {
    void* ptr = &::gobgpapi::_AddPaths_default_instance_;
    new (ptr) ::gobgpapi::AddPaths();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPaths::InitAsDefaultInstance();
}

void InitDefaultsAddPaths() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddPathsImpl);
}

void InitDefaultsPrefixImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_Prefix_default_instance_;
    new (ptr) ::gobgpapi::Prefix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Prefix::InitAsDefaultInstance();
}

void InitDefaultsPrefix() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrefixImpl);
}

void InitDefaultsDefinedSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPrefix();
  {
    void* ptr = &::gobgpapi::_DefinedSet_default_instance_;
    new (ptr) ::gobgpapi::DefinedSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DefinedSet::InitAsDefaultInstance();
}

void InitDefaultsDefinedSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDefinedSetImpl);
}

void InitDefaultsMatchSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_MatchSet_default_instance_;
    new (ptr) ::gobgpapi::MatchSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MatchSet::InitAsDefaultInstance();
}

void InitDefaultsMatchSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMatchSetImpl);
}

void InitDefaultsAsPathLengthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AsPathLength_default_instance_;
    new (ptr) ::gobgpapi::AsPathLength();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AsPathLength::InitAsDefaultInstance();
}

void InitDefaultsAsPathLength() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAsPathLengthImpl);
}

void InitDefaultsConditionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsMatchSet();
  protobuf_gobgp_2eproto::InitDefaultsAsPathLength();
  {
    void* ptr = &::gobgpapi::_Conditions_default_instance_;
    new (ptr) ::gobgpapi::Conditions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Conditions::InitAsDefaultInstance();
}

void InitDefaultsConditions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConditionsImpl);
}

void InitDefaultsCommunityActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_CommunityAction_default_instance_;
    new (ptr) ::gobgpapi::CommunityAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::CommunityAction::InitAsDefaultInstance();
}

void InitDefaultsCommunityAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommunityActionImpl);
}

void InitDefaultsMedActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_MedAction_default_instance_;
    new (ptr) ::gobgpapi::MedAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MedAction::InitAsDefaultInstance();
}

void InitDefaultsMedAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMedActionImpl);
}

void InitDefaultsAsPrependActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_AsPrependAction_default_instance_;
    new (ptr) ::gobgpapi::AsPrependAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AsPrependAction::InitAsDefaultInstance();
}

void InitDefaultsAsPrependAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAsPrependActionImpl);
}

void InitDefaultsNexthopActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_NexthopAction_default_instance_;
    new (ptr) ::gobgpapi::NexthopAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::NexthopAction::InitAsDefaultInstance();
}

void InitDefaultsNexthopAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNexthopActionImpl);
}

void InitDefaultsLocalPrefActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_LocalPrefAction_default_instance_;
    new (ptr) ::gobgpapi::LocalPrefAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LocalPrefAction::InitAsDefaultInstance();
}

void InitDefaultsLocalPrefAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocalPrefActionImpl);
}

void InitDefaultsActionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsCommunityAction();
  protobuf_gobgp_2eproto::InitDefaultsMedAction();
  protobuf_gobgp_2eproto::InitDefaultsAsPrependAction();
  protobuf_gobgp_2eproto::InitDefaultsNexthopAction();
  protobuf_gobgp_2eproto::InitDefaultsLocalPrefAction();
  {
    void* ptr = &::gobgpapi::_Actions_default_instance_;
    new (ptr) ::gobgpapi::Actions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Actions::InitAsDefaultInstance();
}

void InitDefaultsActions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsActionsImpl);
}

void InitDefaultsStatementImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsConditions();
  protobuf_gobgp_2eproto::InitDefaultsActions();
  {
    void* ptr = &::gobgpapi::_Statement_default_instance_;
    new (ptr) ::gobgpapi::Statement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Statement::InitAsDefaultInstance();
}

void InitDefaultsStatement() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStatementImpl);
}

void InitDefaultsPolicyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsStatement();
  {
    void* ptr = &::gobgpapi::_Policy_default_instance_;
    new (ptr) ::gobgpapi::Policy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Policy::InitAsDefaultInstance();
}

void InitDefaultsPolicy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPolicyImpl);
}

void InitDefaultsPolicyAssignmentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsPolicy();
  {
    void* ptr = &::gobgpapi::_PolicyAssignment_default_instance_;
    new (ptr) ::gobgpapi::PolicyAssignment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PolicyAssignment::InitAsDefaultInstance();
}

void InitDefaultsPolicyAssignment() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPolicyAssignmentImpl);
}

void InitDefaultsRoaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsRPKIConf();
  {
    void* ptr = &::gobgpapi::_Roa_default_instance_;
    new (ptr) ::gobgpapi::Roa();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Roa::InitAsDefaultInstance();
}

void InitDefaultsRoa() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoaImpl);
}

void InitDefaultsGetRoaRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_GetRoaRequest_default_instance_;
    new (ptr) ::gobgpapi::GetRoaRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetRoaRequest::InitAsDefaultInstance();
}

void InitDefaultsGetRoaRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRoaRequestImpl);
}

void InitDefaultsGetRoaResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsRoa();
  {
    void* ptr = &::gobgpapi::_GetRoaResponse_default_instance_;
    new (ptr) ::gobgpapi::GetRoaResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetRoaResponse::InitAsDefaultInstance();
}

void InitDefaultsGetRoaResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRoaResponseImpl);
}

void InitDefaultsVrfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_Vrf_default_instance_;
    new (ptr) ::gobgpapi::Vrf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Vrf::InitAsDefaultInstance();
}

void InitDefaultsVrf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVrfImpl);
}

void InitDefaultsGlobalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_Global_default_instance_;
    new (ptr) ::gobgpapi::Global();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Global::InitAsDefaultInstance();
}

void InitDefaultsGlobal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGlobalImpl);
}

void InitDefaultsTableInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gobgpapi::_TableInfo_default_instance_;
    new (ptr) ::gobgpapi::TableInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TableInfo::InitAsDefaultInstance();
}

void InitDefaultsTableInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableInfoImpl);
}

void InitDefaultsGetRibInfoRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsTableInfo();
  {
    void* ptr = &::gobgpapi::_GetRibInfoRequest_default_instance_;
    new (ptr) ::gobgpapi::GetRibInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetRibInfoRequest::InitAsDefaultInstance();
}

void InitDefaultsGetRibInfoRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRibInfoRequestImpl);
}

void InitDefaultsGetRibInfoResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gobgp_2eproto::InitDefaultsTableInfo();
  {
    void* ptr = &::gobgpapi::_GetRibInfoResponse_default_instance_;
    new (ptr) ::gobgpapi::GetRibInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetRibInfoResponse::InitAsDefaultInstance();
}

void InitDefaultsGetRibInfoResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRibInfoResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[170];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[17];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetNeighborRequest, enableadvertised_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetNeighborRequest, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetNeighborResponse, peers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Arguments, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Arguments, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Arguments, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Arguments, current_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathRequest, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathRequest, vrf_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathRequest, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathResponse, uuid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePathRequest, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePathRequest, vrf_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePathRequest, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePathRequest, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePathRequest, uuid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddNeighborRequest, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteNeighborRequest, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ResetNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ResetNeighborRequest, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ResetNeighborRequest, communication_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ResetNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::SoftResetNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::SoftResetNeighborRequest, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::SoftResetNeighborRequest, direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::SoftResetNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ShutdownNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ShutdownNeighborRequest, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ShutdownNeighborRequest, communication_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ShutdownNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableNeighborRequest, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DisableNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DisableNeighborRequest, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DisableNeighborRequest, communication_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DisableNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableMrtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableMrtRequest, dump_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableMrtRequest, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableMrtRequest, interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableMrtResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DisableMrtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DisableMrtResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::InjectMrtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::InjectMrtRequest, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::InjectMrtRequest, vrf_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::InjectMrtRequest, paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::InjectMrtResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddBmpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddBmpRequest, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddBmpRequest, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddBmpRequest, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddBmpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteBmpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteBmpRequest, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteBmpRequest, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteBmpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MonitorRibRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MonitorRibRequest, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MonitorRibRequest, current_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIConf, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIConf, remote_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, downtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, record_ipv4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, record_ipv6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, prefix_ipv4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, prefix_ipv6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, received_ipv4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, received_ipv6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, serial_notify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, cache_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, cache_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, end_of_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, serial_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIState, reset_query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Rpki, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Rpki, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Rpki, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRpkiRequest, family_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRpkiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRpkiResponse, servers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddRpkiRequest, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddRpkiRequest, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddRpkiRequest, lifetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddRpkiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteRpkiRequest, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteRpkiRequest, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteRpkiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableRpkiRequest, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableRpkiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DisableRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DisableRpkiRequest, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DisableRpkiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ResetRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ResetRpkiRequest, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ResetRpkiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::SoftResetRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::SoftResetRpkiRequest, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::SoftResetRpkiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, route_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, nexthop_trigger_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, nexthop_trigger_delay_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EnableZebraResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetVrfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetVrfResponse, vrfs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddVrfRequest, vrf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddVrfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteVrfRequest, vrf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteVrfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetDefinedSetRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetDefinedSetRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetDefinedSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetDefinedSetResponse, sets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddDefinedSetRequest, set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddDefinedSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteDefinedSetRequest, set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteDefinedSetRequest, all_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteDefinedSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplaceDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplaceDefinedSetRequest, set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplaceDefinedSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetStatementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetStatementResponse, statements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddStatementRequest, statement_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddStatementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteStatementRequest, statement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteStatementRequest, all_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeleteStatementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplaceStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplaceStatementRequest, statement_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplaceStatementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPolicyResponse, policies_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPolicyRequest, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPolicyRequest, refer_existing_statements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePolicyRequest, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePolicyRequest, preserve_statements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePolicyRequest, all_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplacePolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplacePolicyRequest, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplacePolicyRequest, refer_existing_statements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplacePolicyRequest, preserve_statements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplacePolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPolicyAssignmentRequest, assignment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPolicyAssignmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPolicyAssignmentResponse, assignment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPolicyAssignmentRequest, assignment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPolicyAssignmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePolicyAssignmentRequest, assignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePolicyAssignmentRequest, all_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DeletePolicyAssignmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplacePolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplacePolicyAssignmentRequest, assignment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ReplacePolicyAssignmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetServerResponse, global_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::StartServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::StartServerRequest, global_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::StartServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::StopServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::StopServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIValidation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIValidation, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIValidation, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIValidation, matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIValidation, unmatched_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RPKIValidation, unmatched_length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, nlri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, pattrs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, best_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, is_withdraw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, validation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, validation_detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, no_implicit_withdraw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, source_asn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, filtered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, stale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, is_from_external_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, neighbor_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, is_nexthop_invalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Path, local_identifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Destination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Destination, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Destination, paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Destination, longer_prefixes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Destination, shorter_prefixes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Table, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Table, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Table, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Table, destinations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Table, post_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRibRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRibRequest, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRibResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRibResponse, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableLookupPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableLookupPrefix, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableLookupPrefix, lookup_option_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPathRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPathRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPathRequest, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetPathRequest, prefixes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ValidateRibRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ValidateRibRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ValidateRibRequest, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ValidateRibRequest, prefix_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ValidateRibResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, families_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, apply_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, ebgp_multihop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, route_reflector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, timers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, transport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, route_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, graceful_restart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, afi_safis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Peer, add_paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ApplyPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ApplyPolicy, in_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ApplyPolicy, export_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::ApplyPolicy, import_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PrefixLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PrefixLimit, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PrefixLimit, max_prefixes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PrefixLimit, shutdown_threshold_pct_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, auth_password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, local_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, neighbor_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, peer_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, peer_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, peer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, remove_private_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, route_flap_damping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, send_community_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, remote_cap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, local_cap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, prefix_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, local_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, neighbor_interface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, vrf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, allow_own_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerConf, replace_peer_as_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EbgpMultihop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EbgpMultihop, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EbgpMultihop, multihop_ttl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteReflector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteReflector, route_reflector_client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteReflector, route_reflector_cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, auth_password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, local_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, neighbor_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, peer_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, peer_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, peer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, queues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, remove_private_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, route_flap_damping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, send_community_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, session_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, supported_capabilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, bgp_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, admin_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, accepted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, advertised_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, out_q_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PeerState, flops_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Messages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Messages, received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Messages, sent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Message, notification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Message, update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Message, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Message, keepalive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Message, refresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Message, discarded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Message, total_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Queues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Queues, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Queues, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Timers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Timers, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Timers, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersConfig, connect_retry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersConfig, hold_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersConfig, keepalive_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersConfig, minimum_advertisement_interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersState, connect_retry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersState, hold_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersState, keepalive_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersState, minimum_advertisement_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersState, negotiated_hold_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersState, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TimersState, downtime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Transport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Transport, local_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Transport, local_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Transport, mtu_discovery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Transport, passive_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Transport, remote_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Transport, remote_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Transport, tcp_mss_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteServer, route_server_client_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GracefulRestart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GracefulRestart, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GracefulRestart, restart_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GracefulRestart, helper_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GracefulRestart, deferral_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GracefulRestart, notification_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GracefulRestart, longlived_enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestartConfig, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, advertised_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, end_of_rib_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, end_of_rib_sent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestart, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MpGracefulRestart, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafiConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafiConfig, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafiConfig, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafiState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafiState, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafiState, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafiState, total_paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafiState, total_prefixes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, always_compare_med_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, ignore_as_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, external_compare_router_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, advertise_inactive_routes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, enable_aigp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, ignore_next_hop_igp_metric_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, always_compare_med_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, ignore_as_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, external_compare_router_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, advertise_inactive_routes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, enable_aigp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, ignore_next_hop_igp_metric_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptions, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteSelectionOptions, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::UseMultiplePathsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::UseMultiplePathsConfig, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::UseMultiplePathsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::UseMultiplePathsState, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EbgpConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EbgpConfig, allow_multiple_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EbgpConfig, maximum_paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EbgpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EbgpState, allow_multiple_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::EbgpState, maximum_paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Ebgp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Ebgp, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Ebgp, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::IbgpConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::IbgpConfig, maximum_paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::IbgpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::IbgpState, maximum_paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Ibgp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Ibgp, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Ibgp, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, ebgp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, ibgp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipConfig, deferral_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipState, deferral_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteTargetMembership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteTargetMembership, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::RouteTargetMembership, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartConfig, restart_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, advertised_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, peer_restart_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, peer_restart_timer_expired_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestart, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestart, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, mp_graceful_restart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, apply_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, route_selection_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, use_multiple_paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, prefix_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, route_target_membership_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, long_lived_graceful_restart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AfiSafi, add_paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathsConfig, receive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathsConfig, send_max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathsState, receive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPathsState, send_max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPaths, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AddPaths, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Prefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Prefix, ip_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Prefix, mask_length_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Prefix, mask_length_max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DefinedSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DefinedSet, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DefinedSet, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DefinedSet, list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::DefinedSet, prefixes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MatchSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MatchSet, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MatchSet, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AsPathLength, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AsPathLength, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AsPathLength, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, prefix_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, neighbor_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, as_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, as_path_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, community_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, ext_community_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, rpki_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, route_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Conditions, large_community_set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::CommunityAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::CommunityAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::CommunityAction, communities_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MedAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::MedAction, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AsPrependAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AsPrependAction, asn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AsPrependAction, repeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::AsPrependAction, use_left_most_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::NexthopAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::NexthopAction, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::NexthopAction, self_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LocalPrefAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::LocalPrefAction, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Actions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Actions, route_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Actions, community_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Actions, med_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Actions, as_prepend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Actions, ext_community_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Actions, nexthop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Actions, local_pref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Actions, large_community_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Statement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Statement, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Statement, conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Statement, actions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Policy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Policy, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Policy, statements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PolicyAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PolicyAssignment, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PolicyAssignment, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PolicyAssignment, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PolicyAssignment, policies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::PolicyAssignment, default__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Roa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Roa, as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Roa, prefixlen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Roa, maxlen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Roa, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Roa, conf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRoaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRoaRequest, family_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRoaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRoaResponse, roas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Vrf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Vrf, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Vrf, rd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Vrf, import_rt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Vrf, export_rt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Vrf, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Global, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Global, as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Global, router_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Global, listen_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Global, listen_addresses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Global, families_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::Global, use_multiple_paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableInfo, family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableInfo, num_destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableInfo, num_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::TableInfo, num_accepted_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRibInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRibInfoRequest, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRibInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gobgpapi::GetRibInfoResponse, info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gobgpapi::GetNeighborRequest)},
  { 7, -1, sizeof(::gobgpapi::GetNeighborResponse)},
  { 13, -1, sizeof(::gobgpapi::Arguments)},
  { 22, -1, sizeof(::gobgpapi::AddPathRequest)},
  { 30, -1, sizeof(::gobgpapi::AddPathResponse)},
  { 36, -1, sizeof(::gobgpapi::DeletePathRequest)},
  { 46, -1, sizeof(::gobgpapi::DeletePathResponse)},
  { 51, -1, sizeof(::gobgpapi::AddNeighborRequest)},
  { 57, -1, sizeof(::gobgpapi::AddNeighborResponse)},
  { 62, -1, sizeof(::gobgpapi::DeleteNeighborRequest)},
  { 68, -1, sizeof(::gobgpapi::DeleteNeighborResponse)},
  { 73, -1, sizeof(::gobgpapi::ResetNeighborRequest)},
  { 80, -1, sizeof(::gobgpapi::ResetNeighborResponse)},
  { 85, -1, sizeof(::gobgpapi::SoftResetNeighborRequest)},
  { 92, -1, sizeof(::gobgpapi::SoftResetNeighborResponse)},
  { 97, -1, sizeof(::gobgpapi::ShutdownNeighborRequest)},
  { 104, -1, sizeof(::gobgpapi::ShutdownNeighborResponse)},
  { 109, -1, sizeof(::gobgpapi::EnableNeighborRequest)},
  { 115, -1, sizeof(::gobgpapi::EnableNeighborResponse)},
  { 120, -1, sizeof(::gobgpapi::DisableNeighborRequest)},
  { 127, -1, sizeof(::gobgpapi::DisableNeighborResponse)},
  { 132, -1, sizeof(::gobgpapi::EnableMrtRequest)},
  { 140, -1, sizeof(::gobgpapi::EnableMrtResponse)},
  { 145, -1, sizeof(::gobgpapi::DisableMrtRequest)},
  { 150, -1, sizeof(::gobgpapi::DisableMrtResponse)},
  { 155, -1, sizeof(::gobgpapi::InjectMrtRequest)},
  { 163, -1, sizeof(::gobgpapi::InjectMrtResponse)},
  { 168, -1, sizeof(::gobgpapi::AddBmpRequest)},
  { 176, -1, sizeof(::gobgpapi::AddBmpResponse)},
  { 181, -1, sizeof(::gobgpapi::DeleteBmpRequest)},
  { 188, -1, sizeof(::gobgpapi::DeleteBmpResponse)},
  { 193, -1, sizeof(::gobgpapi::MonitorRibRequest)},
  { 200, -1, sizeof(::gobgpapi::RPKIConf)},
  { 207, -1, sizeof(::gobgpapi::RPKIState)},
  { 229, -1, sizeof(::gobgpapi::Rpki)},
  { 236, -1, sizeof(::gobgpapi::GetRpkiRequest)},
  { 242, -1, sizeof(::gobgpapi::GetRpkiResponse)},
  { 248, -1, sizeof(::gobgpapi::AddRpkiRequest)},
  { 256, -1, sizeof(::gobgpapi::AddRpkiResponse)},
  { 261, -1, sizeof(::gobgpapi::DeleteRpkiRequest)},
  { 268, -1, sizeof(::gobgpapi::DeleteRpkiResponse)},
  { 273, -1, sizeof(::gobgpapi::EnableRpkiRequest)},
  { 279, -1, sizeof(::gobgpapi::EnableRpkiResponse)},
  { 284, -1, sizeof(::gobgpapi::DisableRpkiRequest)},
  { 290, -1, sizeof(::gobgpapi::DisableRpkiResponse)},
  { 295, -1, sizeof(::gobgpapi::ResetRpkiRequest)},
  { 301, -1, sizeof(::gobgpapi::ResetRpkiResponse)},
  { 306, -1, sizeof(::gobgpapi::SoftResetRpkiRequest)},
  { 312, -1, sizeof(::gobgpapi::SoftResetRpkiResponse)},
  { 317, -1, sizeof(::gobgpapi::EnableZebraRequest)},
  { 327, -1, sizeof(::gobgpapi::EnableZebraResponse)},
  { 332, -1, sizeof(::gobgpapi::GetVrfRequest)},
  { 337, -1, sizeof(::gobgpapi::GetVrfResponse)},
  { 343, -1, sizeof(::gobgpapi::AddVrfRequest)},
  { 349, -1, sizeof(::gobgpapi::AddVrfResponse)},
  { 354, -1, sizeof(::gobgpapi::DeleteVrfRequest)},
  { 360, -1, sizeof(::gobgpapi::DeleteVrfResponse)},
  { 365, -1, sizeof(::gobgpapi::GetDefinedSetRequest)},
  { 372, -1, sizeof(::gobgpapi::GetDefinedSetResponse)},
  { 378, -1, sizeof(::gobgpapi::AddDefinedSetRequest)},
  { 384, -1, sizeof(::gobgpapi::AddDefinedSetResponse)},
  { 389, -1, sizeof(::gobgpapi::DeleteDefinedSetRequest)},
  { 396, -1, sizeof(::gobgpapi::DeleteDefinedSetResponse)},
  { 401, -1, sizeof(::gobgpapi::ReplaceDefinedSetRequest)},
  { 407, -1, sizeof(::gobgpapi::ReplaceDefinedSetResponse)},
  { 412, -1, sizeof(::gobgpapi::GetStatementRequest)},
  { 417, -1, sizeof(::gobgpapi::GetStatementResponse)},
  { 423, -1, sizeof(::gobgpapi::AddStatementRequest)},
  { 429, -1, sizeof(::gobgpapi::AddStatementResponse)},
  { 434, -1, sizeof(::gobgpapi::DeleteStatementRequest)},
  { 441, -1, sizeof(::gobgpapi::DeleteStatementResponse)},
  { 446, -1, sizeof(::gobgpapi::ReplaceStatementRequest)},
  { 452, -1, sizeof(::gobgpapi::ReplaceStatementResponse)},
  { 457, -1, sizeof(::gobgpapi::GetPolicyRequest)},
  { 462, -1, sizeof(::gobgpapi::GetPolicyResponse)},
  { 468, -1, sizeof(::gobgpapi::AddPolicyRequest)},
  { 475, -1, sizeof(::gobgpapi::AddPolicyResponse)},
  { 480, -1, sizeof(::gobgpapi::DeletePolicyRequest)},
  { 488, -1, sizeof(::gobgpapi::DeletePolicyResponse)},
  { 493, -1, sizeof(::gobgpapi::ReplacePolicyRequest)},
  { 501, -1, sizeof(::gobgpapi::ReplacePolicyResponse)},
  { 506, -1, sizeof(::gobgpapi::GetPolicyAssignmentRequest)},
  { 512, -1, sizeof(::gobgpapi::GetPolicyAssignmentResponse)},
  { 518, -1, sizeof(::gobgpapi::AddPolicyAssignmentRequest)},
  { 524, -1, sizeof(::gobgpapi::AddPolicyAssignmentResponse)},
  { 529, -1, sizeof(::gobgpapi::DeletePolicyAssignmentRequest)},
  { 536, -1, sizeof(::gobgpapi::DeletePolicyAssignmentResponse)},
  { 541, -1, sizeof(::gobgpapi::ReplacePolicyAssignmentRequest)},
  { 547, -1, sizeof(::gobgpapi::ReplacePolicyAssignmentResponse)},
  { 552, -1, sizeof(::gobgpapi::GetServerRequest)},
  { 557, -1, sizeof(::gobgpapi::GetServerResponse)},
  { 563, -1, sizeof(::gobgpapi::StartServerRequest)},
  { 569, -1, sizeof(::gobgpapi::StartServerResponse)},
  { 574, -1, sizeof(::gobgpapi::StopServerRequest)},
  { 579, -1, sizeof(::gobgpapi::StopServerResponse)},
  { 584, -1, sizeof(::gobgpapi::RPKIValidation)},
  { 594, -1, sizeof(::gobgpapi::Path)},
  { 618, -1, sizeof(::gobgpapi::Destination)},
  { 627, -1, sizeof(::gobgpapi::Table)},
  { 637, -1, sizeof(::gobgpapi::GetRibRequest)},
  { 643, -1, sizeof(::gobgpapi::GetRibResponse)},
  { 649, -1, sizeof(::gobgpapi::TableLookupPrefix)},
  { 656, -1, sizeof(::gobgpapi::GetPathRequest)},
  { 665, -1, sizeof(::gobgpapi::ValidateRibRequest)},
  { 673, -1, sizeof(::gobgpapi::ValidateRibResponse)},
  { 678, -1, sizeof(::gobgpapi::Peer)},
  { 695, -1, sizeof(::gobgpapi::ApplyPolicy)},
  { 703, -1, sizeof(::gobgpapi::PrefixLimit)},
  { 711, -1, sizeof(::gobgpapi::PeerConf)},
  { 735, -1, sizeof(::gobgpapi::EbgpMultihop)},
  { 742, -1, sizeof(::gobgpapi::RouteReflector)},
  { 749, -1, sizeof(::gobgpapi::PeerState)},
  { 775, -1, sizeof(::gobgpapi::Messages)},
  { 782, -1, sizeof(::gobgpapi::Message)},
  { 794, -1, sizeof(::gobgpapi::Queues)},
  { 801, -1, sizeof(::gobgpapi::Timers)},
  { 808, -1, sizeof(::gobgpapi::TimersConfig)},
  { 817, -1, sizeof(::gobgpapi::TimersState)},
  { 829, -1, sizeof(::gobgpapi::Transport)},
  { 841, -1, sizeof(::gobgpapi::RouteServer)},
  { 847, -1, sizeof(::gobgpapi::GracefulRestart)},
  { 858, -1, sizeof(::gobgpapi::MpGracefulRestartConfig)},
  { 864, -1, sizeof(::gobgpapi::MpGracefulRestartState)},
  { 874, -1, sizeof(::gobgpapi::MpGracefulRestart)},
  { 881, -1, sizeof(::gobgpapi::AfiSafiConfig)},
  { 888, -1, sizeof(::gobgpapi::AfiSafiState)},
  { 897, -1, sizeof(::gobgpapi::RouteSelectionOptionsConfig)},
  { 908, -1, sizeof(::gobgpapi::RouteSelectionOptionsState)},
  { 919, -1, sizeof(::gobgpapi::RouteSelectionOptions)},
  { 926, -1, sizeof(::gobgpapi::UseMultiplePathsConfig)},
  { 932, -1, sizeof(::gobgpapi::UseMultiplePathsState)},
  { 938, -1, sizeof(::gobgpapi::EbgpConfig)},
  { 945, -1, sizeof(::gobgpapi::EbgpState)},
  { 952, -1, sizeof(::gobgpapi::Ebgp)},
  { 959, -1, sizeof(::gobgpapi::IbgpConfig)},
  { 965, -1, sizeof(::gobgpapi::IbgpState)},
  { 971, -1, sizeof(::gobgpapi::Ibgp)},
  { 978, -1, sizeof(::gobgpapi::UseMultiplePaths)},
  { 987, -1, sizeof(::gobgpapi::RouteTargetMembershipConfig)},
  { 993, -1, sizeof(::gobgpapi::RouteTargetMembershipState)},
  { 999, -1, sizeof(::gobgpapi::RouteTargetMembership)},
  { 1006, -1, sizeof(::gobgpapi::LongLivedGracefulRestartConfig)},
  { 1013, -1, sizeof(::gobgpapi::LongLivedGracefulRestartState)},
  { 1023, -1, sizeof(::gobgpapi::LongLivedGracefulRestart)},
  { 1030, -1, sizeof(::gobgpapi::AfiSafi)},
  { 1044, -1, sizeof(::gobgpapi::AddPathsConfig)},
  { 1051, -1, sizeof(::gobgpapi::AddPathsState)},
  { 1058, -1, sizeof(::gobgpapi::AddPaths)},
  { 1065, -1, sizeof(::gobgpapi::Prefix)},
  { 1073, -1, sizeof(::gobgpapi::DefinedSet)},
  { 1082, -1, sizeof(::gobgpapi::MatchSet)},
  { 1089, -1, sizeof(::gobgpapi::AsPathLength)},
  { 1096, -1, sizeof(::gobgpapi::Conditions)},
  { 1110, -1, sizeof(::gobgpapi::CommunityAction)},
  { 1117, -1, sizeof(::gobgpapi::MedAction)},
  { 1124, -1, sizeof(::gobgpapi::AsPrependAction)},
  { 1132, -1, sizeof(::gobgpapi::NexthopAction)},
  { 1139, -1, sizeof(::gobgpapi::LocalPrefAction)},
  { 1145, -1, sizeof(::gobgpapi::Actions)},
  { 1158, -1, sizeof(::gobgpapi::Statement)},
  { 1166, -1, sizeof(::gobgpapi::Policy)},
  { 1173, -1, sizeof(::gobgpapi::PolicyAssignment)},
  { 1183, -1, sizeof(::gobgpapi::Roa)},
  { 1193, -1, sizeof(::gobgpapi::GetRoaRequest)},
  { 1199, -1, sizeof(::gobgpapi::GetRoaResponse)},
  { 1205, -1, sizeof(::gobgpapi::Vrf)},
  { 1215, -1, sizeof(::gobgpapi::Global)},
  { 1226, -1, sizeof(::gobgpapi::TableInfo)},
  { 1237, -1, sizeof(::gobgpapi::GetRibInfoRequest)},
  { 1243, -1, sizeof(::gobgpapi::GetRibInfoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetNeighborRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetNeighborResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Arguments_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddPathRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddPathResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeletePathRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeletePathResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddNeighborRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddNeighborResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteNeighborRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteNeighborResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ResetNeighborRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ResetNeighborResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_SoftResetNeighborRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_SoftResetNeighborResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ShutdownNeighborRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ShutdownNeighborResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EnableNeighborRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EnableNeighborResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DisableNeighborRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DisableNeighborResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EnableMrtRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EnableMrtResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DisableMrtRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DisableMrtResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_InjectMrtRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_InjectMrtResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddBmpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddBmpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteBmpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteBmpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_MonitorRibRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RPKIConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RPKIState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Rpki_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetRpkiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetRpkiResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddRpkiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddRpkiResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteRpkiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteRpkiResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EnableRpkiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EnableRpkiResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DisableRpkiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DisableRpkiResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ResetRpkiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ResetRpkiResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_SoftResetRpkiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_SoftResetRpkiResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EnableZebraRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EnableZebraResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetVrfRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetVrfResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddVrfRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddVrfResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteVrfRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteVrfResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetDefinedSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddDefinedSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteDefinedSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ReplaceDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ReplaceDefinedSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetStatementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetStatementResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddStatementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddStatementResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteStatementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeleteStatementResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ReplaceStatementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ReplaceStatementResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetPolicyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetPolicyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddPolicyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddPolicyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeletePolicyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeletePolicyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ReplacePolicyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ReplacePolicyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetPolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetPolicyAssignmentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddPolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddPolicyAssignmentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeletePolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DeletePolicyAssignmentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ReplacePolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ReplacePolicyAssignmentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetServerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetServerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_StartServerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_StartServerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_StopServerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_StopServerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RPKIValidation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Path_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Destination_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetRibRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetRibResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_TableLookupPrefix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetPathRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ValidateRibRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ValidateRibResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Peer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_ApplyPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_PrefixLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_PeerConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EbgpMultihop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RouteReflector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_PeerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Messages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Queues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Timers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_TimersConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_TimersState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Transport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RouteServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GracefulRestart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_MpGracefulRestartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_MpGracefulRestartState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_MpGracefulRestart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AfiSafiConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AfiSafiState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RouteSelectionOptionsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RouteSelectionOptionsState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RouteSelectionOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_UseMultiplePathsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_UseMultiplePathsState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EbgpConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_EbgpState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Ebgp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_IbgpConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_IbgpState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Ibgp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_UseMultiplePaths_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RouteTargetMembershipConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RouteTargetMembershipState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_RouteTargetMembership_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_LongLivedGracefulRestartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_LongLivedGracefulRestartState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_LongLivedGracefulRestart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AfiSafi_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddPathsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddPathsState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AddPaths_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Prefix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_DefinedSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_MatchSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AsPathLength_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Conditions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_CommunityAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_MedAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_AsPrependAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_NexthopAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_LocalPrefAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Actions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Statement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Policy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_PolicyAssignment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Roa_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetRoaRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetRoaResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Vrf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_Global_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_TableInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetRibInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gobgpapi::_GetRibInfoResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gobgp.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 170);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013gobgp.proto\022\010gobgpapi\"\?\n\022GetNeighborRe"
      "quest\022\030\n\020enableAdvertised\030\001 \001(\010\022\017\n\007addre"
      "ss\030\002 \001(\t\"4\n\023GetNeighborResponse\022\035\n\005peers"
      "\030\001 \003(\0132\016.gobgpapi.Peer\"`\n\tArguments\022$\n\010r"
      "esource\030\001 \001(\0162\022.gobgpapi.Resource\022\016\n\006fam"
      "ily\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\017\n\007current\030\004 \001(\010"
      "\"d\n\016AddPathRequest\022$\n\010resource\030\001 \001(\0162\022.g"
      "obgpapi.Resource\022\016\n\006vrf_id\030\002 \001(\t\022\034\n\004path"
      "\030\003 \001(\0132\016.gobgpapi.Path\"\037\n\017AddPathRespons"
      "e\022\014\n\004uuid\030\001 \001(\014\"\205\001\n\021DeletePathRequest\022$\n"
      "\010resource\030\001 \001(\0162\022.gobgpapi.Resource\022\016\n\006v"
      "rf_id\030\002 \001(\t\022\016\n\006family\030\003 \001(\r\022\034\n\004path\030\004 \001("
      "\0132\016.gobgpapi.Path\022\014\n\004uuid\030\005 \001(\014\"\024\n\022Delet"
      "ePathResponse\"2\n\022AddNeighborRequest\022\034\n\004p"
      "eer\030\001 \001(\0132\016.gobgpapi.Peer\"\025\n\023AddNeighbor"
      "Response\"5\n\025DeleteNeighborRequest\022\034\n\004pee"
      "r\030\001 \001(\0132\016.gobgpapi.Peer\"\030\n\026DeleteNeighbo"
      "rResponse\">\n\024ResetNeighborRequest\022\017\n\007add"
      "ress\030\001 \001(\t\022\025\n\rcommunication\030\002 \001(\t\"\027\n\025Res"
      "etNeighborResponse\"\246\001\n\030SoftResetNeighbor"
      "Request\022\017\n\007address\030\001 \001(\t\022H\n\tdirection\030\002 "
      "\001(\01625.gobgpapi.SoftResetNeighborRequest."
      "SoftResetDirection\"/\n\022SoftResetDirection"
      "\022\006\n\002IN\020\000\022\007\n\003OUT\020\001\022\010\n\004BOTH\020\002\"\033\n\031SoftReset"
      "NeighborResponse\"A\n\027ShutdownNeighborRequ"
      "est\022\017\n\007address\030\001 \001(\t\022\025\n\rcommunication\030\002 "
      "\001(\t\"\032\n\030ShutdownNeighborResponse\"(\n\025Enabl"
      "eNeighborRequest\022\017\n\007address\030\001 \001(\t\"\030\n\026Ena"
      "bleNeighborResponse\"@\n\026DisableNeighborRe"
      "quest\022\017\n\007address\030\001 \001(\t\022\025\n\rcommunication\030"
      "\002 \001(\t\"\031\n\027DisableNeighborResponse\"I\n\020Enab"
      "leMrtRequest\022\021\n\tdump_type\030\001 \001(\005\022\020\n\010filen"
      "ame\030\002 \001(\t\022\020\n\010interval\030\003 \001(\004\"\023\n\021EnableMrt"
      "Response\"\023\n\021DisableMrtRequest\"\024\n\022Disable"
      "MrtResponse\"g\n\020InjectMrtRequest\022$\n\010resou"
      "rce\030\001 \001(\0162\022.gobgpapi.Resource\022\016\n\006vrf_id\030"
      "\002 \001(\t\022\035\n\005paths\030\003 \003(\0132\016.gobgpapi.Path\"\023\n\021"
      "InjectMrtResponse\"\253\001\n\rAddBmpRequest\022\017\n\007a"
      "ddress\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\0226\n\004type\030\003 \001(\016"
      "2(.gobgpapi.AddBmpRequest.MonitoringPoli"
      "cy\"C\n\020MonitoringPolicy\022\007\n\003PRE\020\000\022\010\n\004POST\020"
      "\001\022\010\n\004BOTH\020\002\022\t\n\005LOCAL\020\003\022\007\n\003ALL\020\004\"\020\n\016AddBm"
      "pResponse\"1\n\020DeleteBmpRequest\022\017\n\007address"
      "\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"\023\n\021DeleteBmpRespons"
      "e\"D\n\021MonitorRibRequest\022\036\n\005table\030\001 \001(\0132\017."
      "gobgpapi.Table\022\017\n\007current\030\002 \001(\010\"0\n\010RPKIC"
      "onf\022\017\n\007address\030\001 \001(\t\022\023\n\013remote_port\030\002 \001("
      "\t\"\336\002\n\tRPKIState\022\016\n\006uptime\030\001 \001(\003\022\020\n\010downt"
      "ime\030\002 \001(\003\022\n\n\002up\030\003 \001(\010\022\023\n\013record_ipv4\030\004 \001"
      "(\r\022\023\n\013record_ipv6\030\005 \001(\r\022\023\n\013prefix_ipv4\030\006"
      " \001(\r\022\023\n\013prefix_ipv6\030\007 \001(\r\022\016\n\006serial\030\010 \001("
      "\r\022\025\n\rreceived_ipv4\030\t \001(\003\022\025\n\rreceived_ipv"
      "6\030\n \001(\003\022\025\n\rserial_notify\030\013 \001(\003\022\023\n\013cache_"
      "reset\030\014 \001(\003\022\026\n\016cache_response\030\r \001(\003\022\023\n\013e"
      "nd_of_data\030\016 \001(\003\022\r\n\005error\030\017 \001(\003\022\024\n\014seria"
      "l_query\030\020 \001(\003\022\023\n\013reset_query\030\021 \001(\003\"L\n\004Rp"
      "ki\022 \n\004conf\030\001 \001(\0132\022.gobgpapi.RPKIConf\022\"\n\005"
      "state\030\002 \001(\0132\023.gobgpapi.RPKIState\" \n\016GetR"
      "pkiRequest\022\016\n\006family\030\001 \001(\r\"2\n\017GetRpkiRes"
      "ponse\022\037\n\007servers\030\001 \003(\0132\016.gobgpapi.Rpki\"A"
      "\n\016AddRpkiRequest\022\017\n\007address\030\001 \001(\t\022\014\n\004por"
      "t\030\002 \001(\r\022\020\n\010lifetime\030\003 \001(\003\"\021\n\017AddRpkiResp"
      "onse\"2\n\021DeleteRpkiRequest\022\017\n\007address\030\001 \001"
      "(\t\022\014\n\004port\030\002 \001(\r\"\024\n\022DeleteRpkiResponse\"$"
      "\n\021EnableRpkiRequest\022\017\n\007address\030\001 \001(\t\"\024\n\022"
      "EnableRpkiResponse\"%\n\022DisableRpkiRequest"
      "\022\017\n\007address\030\001 \001(\t\"\025\n\023DisableRpkiResponse"
      "\"#\n\020ResetRpkiRequest\022\017\n\007address\030\001 \001(\t\"\023\n"
      "\021ResetRpkiResponse\"\'\n\024SoftResetRpkiReque"
      "st\022\017\n\007address\030\001 \001(\t\"\027\n\025SoftResetRpkiResp"
      "onse\"\206\001\n\022EnableZebraRequest\022\013\n\003url\030\001 \001(\t"
      "\022\023\n\013route_types\030\002 \003(\t\022\017\n\007version\030\003 \001(\r\022\036"
      "\n\026nexthop_trigger_enable\030\004 \001(\010\022\035\n\025nextho"
      "p_trigger_delay\030\005 \001(\r\"\025\n\023EnableZebraResp"
      "onse\"\017\n\rGetVrfRequest\"-\n\016GetVrfResponse\022"
      "\033\n\004vrfs\030\001 \003(\0132\r.gobgpapi.Vrf\"+\n\rAddVrfRe"
      "quest\022\032\n\003vrf\030\001 \001(\0132\r.gobgpapi.Vrf\"\020\n\016Add"
      "VrfResponse\".\n\020DeleteVrfRequest\022\032\n\003vrf\030\001"
      " \001(\0132\r.gobgpapi.Vrf\"\023\n\021DeleteVrfResponse"
      "\"I\n\024GetDefinedSetRequest\022#\n\004type\030\001 \001(\0162\025"
      ".gobgpapi.DefinedType\022\014\n\004name\030\002 \001(\t\";\n\025G"
      "etDefinedSetResponse\022\"\n\004sets\030\001 \003(\0132\024.gob"
      "gpapi.DefinedSet\"9\n\024AddDefinedSetRequest"
      "\022!\n\003set\030\001 \001(\0132\024.gobgpapi.DefinedSet\"\027\n\025A"
      "ddDefinedSetResponse\"I\n\027DeleteDefinedSet"
      "Request\022!\n\003set\030\001 \001(\0132\024.gobgpapi.DefinedS"
      "et\022\013\n\003all\030\002 \001(\010\"\032\n\030DeleteDefinedSetRespo"
      "nse\"=\n\030ReplaceDefinedSetRequest\022!\n\003set\030\001"
      " \001(\0132\024.gobgpapi.DefinedSet\"\033\n\031ReplaceDef"
      "inedSetResponse\"\025\n\023GetStatementRequest\"\?"
      "\n\024GetStatementResponse\022\'\n\nstatements\030\001 \003"
      "(\0132\023.gobgpapi.Statement\"=\n\023AddStatementR"
      "equest\022&\n\tstatement\030\001 \001(\0132\023.gobgpapi.Sta"
      "tement\"\026\n\024AddStatementResponse\"M\n\026Delete"
      "StatementRequest\022&\n\tstatement\030\001 \001(\0132\023.go"
      "bgpapi.Statement\022\013\n\003all\030\002 \001(\010\"\031\n\027DeleteS"
      "tatementResponse\"A\n\027ReplaceStatementRequ"
      "est\022&\n\tstatement\030\001 \001(\0132\023.gobgpapi.Statem"
      "ent\"\032\n\030ReplaceStatementResponse\"\022\n\020GetPo"
      "licyRequest\"7\n\021GetPolicyResponse\022\"\n\010poli"
      "cies\030\001 \003(\0132\020.gobgpapi.Policy\"W\n\020AddPolic"
      "yRequest\022 \n\006policy\030\001 \001(\0132\020.gobgpapi.Poli"
      "cy\022!\n\031refer_existing_statements\030\002 \001(\010\"\023\n"
      "\021AddPolicyResponse\"a\n\023DeletePolicyReques"
      "t\022 \n\006policy\030\001 \001(\0132\020.gobgpapi.Policy\022\033\n\023p"
      "reserve_statements\030\002 \001(\010\022\013\n\003all\030\003 \001(\010\"\026\n"
      "\024DeletePolicyResponse\"x\n\024ReplacePolicyRe"
      "quest\022 \n\006policy\030\001 \001(\0132\020.gobgpapi.Policy\022"
      "!\n\031refer_existing_statements\030\002 \001(\010\022\033\n\023pr"
      "eserve_statements\030\003 \001(\010\"\027\n\025ReplacePolicy"
      "Response\"L\n\032GetPolicyAssignmentRequest\022."
      "\n\nassignment\030\001 \001(\0132\032.gobgpapi.PolicyAssi"
      "gnment\"M\n\033GetPolicyAssignmentResponse\022.\n"
      "\nassignment\030\001 \001(\0132\032.gobgpapi.PolicyAssig"
      "nment\"L\n\032AddPolicyAssignmentRequest\022.\n\na"
      "ssignment\030\001 \001(\0132\032.gobgpapi.PolicyAssignm"
      "ent\"\035\n\033AddPolicyAssignmentResponse\"\\\n\035De"
      "letePolicyAssignmentRequest\022.\n\nassignmen"
      "t\030\001 \001(\0132\032.gobgpapi.PolicyAssignment\022\013\n\003a"
      "ll\030\002 \001(\010\" \n\036DeletePolicyAssignmentRespon"
      "se\"P\n\036ReplacePolicyAssignmentRequest\022.\n\n"
      "assignment\030\001 \001(\0132\032.gobgpapi.PolicyAssign"
      "ment\"!\n\037ReplacePolicyAssignmentResponse\""
      "\022\n\020GetServerRequest\"5\n\021GetServerResponse"
      "\022 \n\006global\030\001 \001(\0132\020.gobgpapi.Global\"6\n\022St"
      "artServerRequest\022 \n\006global\030\001 \001(\0132\020.gobgp"
      "api.Global\"\025\n\023StartServerResponse\"\023\n\021Sto"
      "pServerRequest\"\024\n\022StopServerResponse\"\355\002\n"
      "\016RPKIValidation\022-\n\005state\030\001 \001(\0162\036.gobgpap"
      "i.RPKIValidation.State\022/\n\006reason\030\002 \001(\0162\037"
      ".gobgpapi.RPKIValidation.Reason\022\036\n\007match"
      "ed\030\003 \003(\0132\r.gobgpapi.Roa\022#\n\014unmatched_as\030"
      "\004 \003(\0132\r.gobgpapi.Roa\022\'\n\020unmatched_length"
      "\030\005 \003(\0132\r.gobgpapi.Roa\"P\n\005State\022\016\n\nSTATE_"
      "NONE\020\000\022\023\n\017STATE_NOT_FOUND\020\001\022\017\n\013STATE_VAL"
      "ID\020\002\022\021\n\rSTATE_INVALID\020\003\";\n\006Reason\022\017\n\013REA"
      "SOT_NONE\020\000\022\r\n\tREASON_AS\020\001\022\021\n\rREASON_LENG"
      "TH\020\002\"\232\003\n\004Path\022\014\n\004nlri\030\001 \001(\014\022\016\n\006pattrs\030\002 "
      "\003(\014\022\013\n\003age\030\003 \001(\003\022\014\n\004best\030\004 \001(\010\022\023\n\013is_wit"
      "hdraw\030\005 \001(\010\022\022\n\nvalidation\030\006 \001(\005\0223\n\021valid"
      "ation_detail\030\007 \001(\0132\030.gobgpapi.RPKIValida"
      "tion\022\034\n\024no_implicit_withdraw\030\010 \001(\010\022\016\n\006fa"
      "mily\030\t \001(\r\022\022\n\nsource_asn\030\n \001(\r\022\021\n\tsource"
      "_id\030\013 \001(\t\022\020\n\010filtered\030\014 \001(\010\022\r\n\005stale\030\r \001"
      "(\010\022\030\n\020is_from_external\030\016 \001(\010\022\023\n\013neighbor"
      "_ip\030\017 \001(\t\022\014\n\004uuid\030\020 \001(\014\022\032\n\022is_nexthop_in"
      "valid\030\021 \001(\010\022\022\n\nidentifier\030\022 \001(\r\022\030\n\020local"
      "_identifier\030\023 \001(\r\"o\n\013Destination\022\016\n\006pref"
      "ix\030\001 \001(\t\022\035\n\005paths\030\002 \003(\0132\016.gobgpapi.Path\022"
      "\027\n\017longer_prefixes\030\003 \001(\010\022\030\n\020shorter_pref"
      "ixes\030\004 \001(\010\"\211\001\n\005Table\022 \n\004type\030\001 \001(\0162\022.gob"
      "gpapi.Resource\022\014\n\004name\030\002 \001(\t\022\016\n\006family\030\003"
      " \001(\r\022+\n\014destinations\030\004 \003(\0132\025.gobgpapi.De"
      "stination\022\023\n\013post_policy\030\005 \001(\010\"/\n\rGetRib"
      "Request\022\036\n\005table\030\001 \001(\0132\017.gobgpapi.Table\""
      "0\n\016GetRibResponse\022\036\n\005table\030\001 \001(\0132\017.gobgp"
      "api.Table\"W\n\021TableLookupPrefix\022\016\n\006prefix"
      "\030\001 \001(\t\0222\n\rlookup_option\030\002 \001(\0162\033.gobgpapi"
      ".TableLookupOption\"\177\n\016GetPathRequest\022 \n\004"
      "type\030\001 \001(\0162\022.gobgpapi.Resource\022\014\n\004name\030\002"
      " \001(\t\022\016\n\006family\030\003 \001(\r\022-\n\010prefixes\030\004 \003(\0132\033"
      ".gobgpapi.TableLookupPrefix\"V\n\022ValidateR"
      "ibRequest\022 \n\004type\030\001 \001(\0162\022.gobgpapi.Resou"
      "rce\022\016\n\006family\030\002 \001(\r\022\016\n\006prefix\030\003 \001(\t\"\025\n\023V"
      "alidateRibResponse\"\345\003\n\004Peer\022\020\n\010families\030"
      "\001 \003(\r\022+\n\014apply_policy\030\002 \001(\0132\025.gobgpapi.A"
      "pplyPolicy\022 \n\004conf\030\003 \001(\0132\022.gobgpapi.Peer"
      "Conf\022-\n\rebgp_multihop\030\004 \001(\0132\026.gobgpapi.E"
      "bgpMultihop\0221\n\017route_reflector\030\005 \001(\0132\030.g"
      "obgpapi.RouteReflector\022!\n\004info\030\006 \001(\0132\023.g"
      "obgpapi.PeerState\022 \n\006timers\030\007 \001(\0132\020.gobg"
      "papi.Timers\022&\n\ttransport\030\010 \001(\0132\023.gobgpap"
      "i.Transport\022+\n\014route_server\030\t \001(\0132\025.gobg"
      "papi.RouteServer\0223\n\020graceful_restart\030\n \001"
      "(\0132\031.gobgpapi.GracefulRestart\022$\n\tafi_saf"
      "is\030\013 \003(\0132\021.gobgpapi.AfiSafi\022%\n\tadd_paths"
      "\030\014 \001(\0132\022.gobgpapi.AddPaths\"\242\001\n\013ApplyPoli"
      "cy\022-\n\tin_policy\030\001 \001(\0132\032.gobgpapi.PolicyA"
      "ssignment\0221\n\rexport_policy\030\002 \001(\0132\032.gobgp"
      "api.PolicyAssignment\0221\n\rimport_policy\030\003 "
      "\001(\0132\032.gobgpapi.PolicyAssignment\"S\n\013Prefi"
      "xLimit\022\016\n\006family\030\001 \001(\r\022\024\n\014max_prefixes\030\002"
      " \001(\r\022\036\n\026shutdown_threshold_pct\030\003 \001(\r\"\220\004\n"
      "\010PeerConf\022\025\n\rauth_password\030\001 \001(\t\022\023\n\013desc"
      "ription\030\002 \001(\t\022\020\n\010local_as\030\003 \001(\r\022\030\n\020neigh"
      "bor_address\030\004 \001(\t\022\017\n\007peer_as\030\005 \001(\r\022\022\n\npe"
      "er_group\030\006 \001(\t\022\021\n\tpeer_type\030\007 \001(\r\022=\n\021rem"
      "ove_private_as\030\010 \001(\0162\".gobgpapi.PeerConf"
      ".RemovePrivateAs\022\032\n\022route_flap_damping\030\t"
      " \001(\010\022\026\n\016send_community\030\n \001(\r\022\022\n\nremote_c"
      "ap\030\013 \003(\014\022\021\n\tlocal_cap\030\014 \003(\014\022\n\n\002id\030\r \001(\t\022"
      ",\n\rprefix_limits\030\016 \003(\0132\025.gobgpapi.Prefix"
      "Limit\022\025\n\rlocal_address\030\017 \001(\t\022\032\n\022neighbor"
      "_interface\030\020 \001(\t\022\013\n\003vrf\030\021 \001(\t\022\024\n\014allow_o"
      "wn_as\030\022 \001(\r\022\027\n\017replace_peer_as\030\023 \001(\010\"1\n\017"
      "RemovePrivateAs\022\010\n\004NONE\020\000\022\007\n\003ALL\020\001\022\013\n\007RE"
      "PLACE\020\002\"5\n\014EbgpMultihop\022\017\n\007enabled\030\001 \001(\010"
      "\022\024\n\014multihop_ttl\030\002 \001(\r\"T\n\016RouteReflector"
      "\022\036\n\026route_reflector_client\030\001 \001(\010\022\"\n\032rout"
      "e_reflector_cluster_id\030\002 \001(\t\"\263\004\n\tPeerSta"
      "te\022\025\n\rauth_password\030\001 \001(\t\022\023\n\013description"
      "\030\002 \001(\t\022\020\n\010local_as\030\003 \001(\r\022$\n\010messages\030\004 \001"
      "(\0132\022.gobgpapi.Messages\022\030\n\020neighbor_addre"
      "ss\030\005 \001(\t\022\017\n\007peer_as\030\006 \001(\r\022\022\n\npeer_group\030"
      "\007 \001(\t\022\021\n\tpeer_type\030\010 \001(\r\022 \n\006queues\030\t \001(\013"
      "2\020.gobgpapi.Queues\022\031\n\021remove_private_as\030"
      "\n \001(\r\022\032\n\022route_flap_damping\030\013 \001(\010\022\026\n\016sen"
      "d_community\030\014 \001(\r\022\025\n\rsession_state\030\r \001(\r"
      "\022\036\n\026supported_capabilities\030\016 \003(\t\022\021\n\tbgp_"
      "state\030\017 \001(\t\0223\n\013admin_state\030\020 \001(\0162\036.gobgp"
      "api.PeerState.AdminState\022\020\n\010received\030\021 \001"
      "(\r\022\020\n\010accepted\030\022 \001(\r\022\022\n\nadvertised\030\023 \001(\r"
      "\022\r\n\005out_q\030\024 \001(\r\022\r\n\005flops\030\025 \001(\r\"*\n\nAdminS"
      "tate\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001\022\n\n\006PFX_CT\020\002\"P\n\010Me"
      "ssages\022#\n\010received\030\001 \001(\0132\021.gobgpapi.Mess"
      "age\022\037\n\004sent\030\002 \001(\0132\021.gobgpapi.Message\"\203\001\n"
      "\007Message\022\024\n\014NOTIFICATION\030\001 \001(\004\022\016\n\006UPDATE"
      "\030\002 \001(\004\022\014\n\004OPEN\030\003 \001(\004\022\021\n\tKEEPALIVE\030\004 \001(\004\022"
      "\017\n\007REFRESH\030\005 \001(\004\022\021\n\tDISCARDED\030\006 \001(\004\022\r\n\005T"
      "OTAL\030\007 \001(\004\"\'\n\006Queues\022\r\n\005input\030\001 \001(\r\022\016\n\006o"
      "utput\030\002 \001(\r\"V\n\006Timers\022&\n\006config\030\001 \001(\0132\026."
      "gobgpapi.TimersConfig\022$\n\005state\030\002 \001(\0132\025.g"
      "obgpapi.TimersState\"|\n\014TimersConfig\022\025\n\rc"
      "onnect_retry\030\001 \001(\004\022\021\n\thold_time\030\002 \001(\004\022\032\n"
      "\022keepalive_interval\030\003 \001(\004\022&\n\036minimum_adv"
      "ertisement_interval\030\004 \001(\004\"\273\001\n\013TimersStat"
      "e\022\025\n\rconnect_retry\030\001 \001(\004\022\021\n\thold_time\030\002 "
      "\001(\004\022\032\n\022keepalive_interval\030\003 \001(\004\022&\n\036minim"
      "um_advertisement_interval\030\004 \001(\004\022\034\n\024negot"
      "iated_hold_time\030\005 \001(\004\022\016\n\006uptime\030\006 \001(\004\022\020\n"
      "\010downtime\030\007 \001(\004\"\241\001\n\tTransport\022\025\n\rlocal_a"
      "ddress\030\001 \001(\t\022\022\n\nlocal_port\030\002 \001(\r\022\025\n\rmtu_"
      "discovery\030\003 \001(\010\022\024\n\014passive_mode\030\004 \001(\010\022\026\n"
      "\016remote_address\030\005 \001(\t\022\023\n\013remote_port\030\006 \001"
      "(\r\022\017\n\007tcp_mss\030\007 \001(\r\"*\n\013RouteServer\022\033\n\023ro"
      "ute_server_client\030\001 \001(\010\"\235\001\n\017GracefulRest"
      "art\022\017\n\007enabled\030\001 \001(\010\022\024\n\014restart_time\030\002 \001"
      "(\r\022\023\n\013helper_only\030\003 \001(\010\022\025\n\rdeferral_time"
      "\030\004 \001(\r\022\034\n\024notification_enabled\030\005 \001(\010\022\031\n\021"
      "longlived_enabled\030\006 \001(\010\"*\n\027MpGracefulRes"
      "tartConfig\022\017\n\007enabled\030\001 \001(\010\"\205\001\n\026MpGracef"
      "ulRestartState\022\017\n\007enabled\030\001 \001(\010\022\020\n\010recei"
      "ved\030\002 \001(\010\022\022\n\nadvertised\030\003 \001(\010\022\033\n\023end_of_"
      "rib_received\030\004 \001(\010\022\027\n\017end_of_rib_sent\030\005 "
      "\001(\010\"w\n\021MpGracefulRestart\0221\n\006config\030\001 \001(\013"
      "2!.gobgpapi.MpGracefulRestartConfig\022/\n\005s"
      "tate\030\002 \001(\0132 .gobgpapi.MpGracefulRestartS"
      "tate\"0\n\rAfiSafiConfig\022\016\n\006family\030\001 \001(\r\022\017\n"
      "\007enabled\030\002 \001(\010\"\\\n\014AfiSafiState\022\016\n\006family"
      "\030\001 \001(\r\022\017\n\007enabled\030\002 \001(\010\022\023\n\013total_paths\030\003"
      " \001(\r\022\026\n\016total_prefixes\030\004 \001(\r\"\330\001\n\033RouteSe"
      "lectionOptionsConfig\022\032\n\022always_compare_m"
      "ed\030\001 \001(\010\022\035\n\025ignore_as_path_length\030\002 \001(\010\022"
      "\"\n\032external_compare_router_id\030\003 \001(\010\022!\n\031a"
      "dvertise_inactive_routes\030\004 \001(\010\022\023\n\013enable"
      "_aigp\030\005 \001(\010\022\"\n\032ignore_next_hop_igp_metri"
      "c\030\006 \001(\010\"\327\001\n\032RouteSelectionOptionsState\022\032"
      "\n\022always_compare_med\030\001 \001(\010\022\035\n\025ignore_as_"
      "path_length\030\002 \001(\010\022\"\n\032external_compare_ro"
      "uter_id\030\003 \001(\010\022!\n\031advertise_inactive_rout"
      "es\030\004 \001(\010\022\023\n\013enable_aigp\030\005 \001(\010\022\"\n\032ignore_"
      "next_hop_igp_metric\030\006 \001(\010\"\203\001\n\025RouteSelec"
      "tionOptions\0225\n\006config\030\001 \001(\0132%.gobgpapi.R"
      "outeSelectionOptionsConfig\0223\n\005state\030\002 \001("
      "\0132$.gobgpapi.RouteSelectionOptionsState\""
      ")\n\026UseMultiplePathsConfig\022\017\n\007enabled\030\001 \001"
      "(\010\"(\n\025UseMultiplePathsState\022\017\n\007enabled\030\001"
      " \001(\010\">\n\nEbgpConfig\022\031\n\021allow_multiple_as\030"
      "\001 \001(\010\022\025\n\rmaximum_paths\030\002 \001(\r\"=\n\tEbgpStat"
      "e\022\031\n\021allow_multiple_as\030\001 \001(\010\022\025\n\rmaximum_"
      "paths\030\002 \001(\r\"P\n\004Ebgp\022$\n\006config\030\001 \001(\0132\024.go"
      "bgpapi.EbgpConfig\022\"\n\005state\030\002 \001(\0132\023.gobgp"
      "api.EbgpState\"#\n\nIbgpConfig\022\025\n\rmaximum_p"
      "aths\030\001 \001(\r\"\"\n\tIbgpState\022\025\n\rmaximum_paths"
      "\030\001 \001(\r\"P\n\004Ibgp\022$\n\006config\030\001 \001(\0132\024.gobgpap"
      "i.IbgpConfig\022\"\n\005state\030\002 \001(\0132\023.gobgpapi.I"
      "bgpState\"\260\001\n\020UseMultiplePaths\0220\n\006config\030"
      "\001 \001(\0132 .gobgpapi.UseMultiplePathsConfig\022"
      ".\n\005state\030\002 \001(\0132\037.gobgpapi.UseMultiplePat"
      "hsState\022\034\n\004ebgp\030\003 \001(\0132\016.gobgpapi.Ebgp\022\034\n"
      "\004ibgp\030\004 \001(\0132\016.gobgpapi.Ibgp\"4\n\033RouteTarg"
      "etMembershipConfig\022\025\n\rdeferral_time\030\001 \001("
      "\r\"3\n\032RouteTargetMembershipState\022\025\n\rdefer"
      "ral_time\030\001 \001(\r\"\203\001\n\025RouteTargetMembership"
      "\0225\n\006config\030\001 \001(\0132%.gobgpapi.RouteTargetM"
      "embershipConfig\0223\n\005state\030\002 \001(\0132$.gobgpap"
      "i.RouteTargetMembershipState\"G\n\036LongLive"
      "dGracefulRestartConfig\022\017\n\007enabled\030\001 \001(\010\022"
      "\024\n\014restart_time\030\002 \001(\r\"\225\001\n\035LongLivedGrace"
      "fulRestartState\022\017\n\007enabled\030\001 \001(\010\022\020\n\010rece"
      "ived\030\002 \001(\010\022\022\n\nadvertised\030\003 \001(\010\022\031\n\021peer_r"
      "estart_time\030\004 \001(\r\022\"\n\032peer_restart_timer_"
      "expired\030\005 \001(\010\"\214\001\n\030LongLivedGracefulResta"
      "rt\0228\n\006config\030\001 \001(\0132(.gobgpapi.LongLivedG"
      "racefulRestartConfig\0226\n\005state\030\002 \001(\0132\'.go"
      "bgpapi.LongLivedGracefulRestartState\"\363\003\n"
      "\007AfiSafi\0228\n\023mp_graceful_restart\030\001 \001(\0132\033."
      "gobgpapi.MpGracefulRestart\022\'\n\006config\030\002 \001"
      "(\0132\027.gobgpapi.AfiSafiConfig\022+\n\014apply_pol"
      "icy\030\003 \001(\0132\025.gobgpapi.ApplyPolicy\022@\n\027rout"
      "e_selection_options\030\004 \001(\0132\037.gobgpapi.Rou"
      "teSelectionOptions\0226\n\022use_multiple_paths"
      "\030\005 \001(\0132\032.gobgpapi.UseMultiplePaths\022,\n\rpr"
      "efix_limits\030\006 \001(\0132\025.gobgpapi.PrefixLimit"
      "\022@\n\027route_target_membership\030\007 \001(\0132\037.gobg"
      "papi.RouteTargetMembership\022G\n\033long_lived"
      "_graceful_restart\030\010 \001(\0132\".gobgpapi.LongL"
      "ivedGracefulRestart\022%\n\tadd_paths\030\t \001(\0132\022"
      ".gobgpapi.AddPaths\"3\n\016AddPathsConfig\022\017\n\007"
      "receive\030\001 \001(\010\022\020\n\010send_max\030\002 \001(\r\"2\n\rAddPa"
      "thsState\022\017\n\007receive\030\001 \001(\010\022\020\n\010send_max\030\002 "
      "\001(\r\"\\\n\010AddPaths\022(\n\006config\030\001 \001(\0132\030.gobgpa"
      "pi.AddPathsConfig\022&\n\005state\030\002 \001(\0132\027.gobgp"
      "api.AddPathsState\"M\n\006Prefix\022\021\n\tip_prefix"
      "\030\001 \001(\t\022\027\n\017mask_length_min\030\002 \001(\r\022\027\n\017mask_"
      "length_max\030\003 \001(\r\"q\n\nDefinedSet\022#\n\004type\030\001"
      " \001(\0162\025.gobgpapi.DefinedType\022\014\n\004name\030\002 \001("
      "\t\022\014\n\004list\030\003 \003(\t\022\"\n\010prefixes\030\004 \003(\0132\020.gobg"
      "papi.Prefix\";\n\010MatchSet\022!\n\004type\030\001 \001(\0162\023."
      "gobgpapi.MatchType\022\014\n\004name\030\002 \001(\t\"H\n\014AsPa"
      "thLength\022(\n\004type\030\001 \001(\0162\032.gobgpapi.AsPath"
      "LengthType\022\016\n\006length\030\002 \001(\r\"\365\003\n\nCondition"
      "s\022&\n\nprefix_set\030\001 \001(\0132\022.gobgpapi.MatchSe"
      "t\022(\n\014neighbor_set\030\002 \001(\0132\022.gobgpapi.Match"
      "Set\022.\n\016as_path_length\030\003 \001(\0132\026.gobgpapi.A"
      "sPathLength\022\'\n\013as_path_set\030\004 \001(\0132\022.gobgp"
      "api.MatchSet\022)\n\rcommunity_set\030\005 \001(\0132\022.go"
      "bgpapi.MatchSet\022-\n\021ext_community_set\030\006 \001"
      "(\0132\022.gobgpapi.MatchSet\022\023\n\013rpki_result\030\007 "
      "\001(\005\0222\n\nroute_type\030\010 \001(\0162\036.gobgpapi.Condi"
      "tions.RouteType\022/\n\023large_community_set\030\t"
      " \001(\0132\022.gobgpapi.MatchSet\"h\n\tRouteType\022\023\n"
      "\017ROUTE_TYPE_NONE\020\000\022\027\n\023ROUTE_TYPE_INTERNA"
      "L\020\001\022\027\n\023ROUTE_TYPE_EXTERNAL\020\002\022\024\n\020ROUTE_TY"
      "PE_LOCAL\020\003\"S\n\017CommunityAction\022+\n\004type\030\001 "
      "\001(\0162\035.gobgpapi.CommunityActionType\022\023\n\013co"
      "mmunities\030\002 \003(\t\"A\n\tMedAction\022%\n\004type\030\001 \001"
      "(\0162\027.gobgpapi.MedActionType\022\r\n\005value\030\002 \001"
      "(\003\"E\n\017AsPrependAction\022\013\n\003asn\030\001 \001(\r\022\016\n\006re"
      "peat\030\002 \001(\r\022\025\n\ruse_left_most\030\003 \001(\010\".\n\rNex"
      "thopAction\022\017\n\007address\030\001 \001(\t\022\014\n\004self\030\002 \001("
      "\010\" \n\017LocalPrefAction\022\r\n\005value\030\001 \001(\r\"\364\002\n\007"
      "Actions\022+\n\014route_action\030\001 \001(\0162\025.gobgpapi"
      ".RouteAction\022,\n\tcommunity\030\002 \001(\0132\031.gobgpa"
      "pi.CommunityAction\022 \n\003med\030\003 \001(\0132\023.gobgpa"
      "pi.MedAction\022-\n\nas_prepend\030\004 \001(\0132\031.gobgp"
      "api.AsPrependAction\0220\n\rext_community\030\005 \001"
      "(\0132\031.gobgpapi.CommunityAction\022(\n\007nexthop"
      "\030\006 \001(\0132\027.gobgpapi.NexthopAction\022-\n\nlocal"
      "_pref\030\007 \001(\0132\031.gobgpapi.LocalPrefAction\0222"
      "\n\017large_community\030\010 \001(\0132\031.gobgpapi.Commu"
      "nityAction\"g\n\tStatement\022\014\n\004name\030\001 \001(\t\022(\n"
      "\nconditions\030\002 \001(\0132\024.gobgpapi.Conditions\022"
      "\"\n\007actions\030\003 \001(\0132\021.gobgpapi.Actions\"\?\n\006P"
      "olicy\022\014\n\004name\030\001 \001(\t\022\'\n\nstatements\030\002 \003(\0132"
      "\023.gobgpapi.Statement\"\266\001\n\020PolicyAssignmen"
      "t\022\"\n\004type\030\001 \001(\0162\024.gobgpapi.PolicyType\022$\n"
      "\010resource\030\002 \001(\0162\022.gobgpapi.Resource\022\014\n\004n"
      "ame\030\003 \001(\t\022\"\n\010policies\030\004 \003(\0132\020.gobgpapi.P"
      "olicy\022&\n\007default\030\005 \001(\0162\025.gobgpapi.RouteA"
      "ction\"f\n\003Roa\022\n\n\002as\030\001 \001(\r\022\021\n\tprefixlen\030\002 "
      "\001(\r\022\016\n\006maxlen\030\003 \001(\r\022\016\n\006prefix\030\004 \001(\t\022 \n\004c"
      "onf\030\005 \001(\0132\022.gobgpapi.RPKIConf\"\037\n\rGetRoaR"
      "equest\022\016\n\006family\030\001 \001(\r\"-\n\016GetRoaResponse"
      "\022\033\n\004roas\030\001 \003(\0132\r.gobgpapi.Roa\"Q\n\003Vrf\022\014\n\004"
      "name\030\001 \001(\t\022\n\n\002rd\030\002 \001(\014\022\021\n\timport_rt\030\003 \003("
      "\014\022\021\n\texport_rt\030\004 \003(\014\022\n\n\002id\030\005 \001(\r\"\204\001\n\006Glo"
      "bal\022\n\n\002as\030\001 \001(\r\022\021\n\trouter_id\030\002 \001(\t\022\023\n\013li"
      "sten_port\030\003 \001(\005\022\030\n\020listen_addresses\030\004 \003("
      "\t\022\020\n\010families\030\005 \003(\r\022\032\n\022use_multiple_path"
      "s\030\006 \001(\010\"\214\001\n\tTableInfo\022 \n\004type\030\001 \001(\0162\022.go"
      "bgpapi.Resource\022\014\n\004name\030\002 \001(\t\022\016\n\006family\030"
      "\003 \001(\r\022\027\n\017num_destination\030\004 \001(\004\022\020\n\010num_pa"
      "th\030\005 \001(\004\022\024\n\014num_accepted\030\006 \001(\004\"6\n\021GetRib"
      "InfoRequest\022!\n\004info\030\001 \001(\0132\023.gobgpapi.Tab"
      "leInfo\"7\n\022GetRibInfoResponse\022!\n\004info\030\001 \001"
      "(\0132\023.gobgpapi.TableInfo*\374\002\n\006Family\022\005\n\001_\020"
      "\000\022\n\n\004IPv4\020\201\200\004\022\n\n\004IPv6\020\201\200\010\022\r\n\007IPv4_MC\020\202\200\004"
      "\022\r\n\007IPv6_MC\020\202\200\010\022\017\n\tIPv4_MPLS\020\204\200\004\022\017\n\tIPv6"
      "_MPLS\020\204\200\010\022\016\n\010IPv4_VPN\020\200\201\004\022\016\n\010IPv6_VPN\020\200\201"
      "\010\022\021\n\013IPv4_VPN_MC\020\201\201\004\022\021\n\013IPv6_VPN_MC\020\201\201\010\022"
      "\n\n\004VPLS\020\301\200d\022\n\n\004EVPN\020\306\200d\022\t\n\003RTC\020\204\201\004\022\020\n\nIP"
      "v4_ENCAP\020\207\200\004\022\020\n\nIPv6_ENCAP\020\207\200\010\022\024\n\016FLOW_S"
      "PEC_IPv4\020\205\201\004\022\024\n\016FLOW_SPEC_IPv6\020\205\201\010\022\030\n\022FL"
      "OW_SPEC_IPv4_VPN\020\206\201\004\022\030\n\022FLOW_SPEC_IPv6_V"
      "PN\020\206\201\010\022\026\n\020FLOW_SPEC_L2_VPN\020\206\201d\022\016\n\006OPAQUE"
      "\020\361\201\264\200\004*C\n\010Resource\022\n\n\006GLOBAL\020\000\022\t\n\005LOCAL\020"
      "\001\022\n\n\006ADJ_IN\020\002\022\013\n\007ADJ_OUT\020\003\022\007\n\003VRF\020\004*L\n\021T"
      "ableLookupOption\022\020\n\014LOOKUP_EXACT\020\000\022\021\n\rLO"
      "OKUP_LONGER\020\001\022\022\n\016LOOKUP_SHORTER\020\002*t\n\013Def"
      "inedType\022\n\n\006PREFIX\020\000\022\014\n\010NEIGHBOR\020\001\022\007\n\003TA"
      "G\020\002\022\013\n\007AS_PATH\020\003\022\r\n\tCOMMUNITY\020\004\022\021\n\rEXT_C"
      "OMMUNITY\020\005\022\023\n\017LARGE_COMMUNITY\020\006*)\n\tMatch"
      "Type\022\007\n\003ANY\020\000\022\007\n\003ALL\020\001\022\n\n\006INVERT\020\002**\n\020As"
      "PathLengthType\022\006\n\002EQ\020\000\022\006\n\002GE\020\001\022\006\n\002LE\020\002*/"
      "\n\013RouteAction\022\010\n\004NONE\020\000\022\n\n\006ACCEPT\020\001\022\n\n\006R"
      "EJECT\020\002*U\n\023CommunityActionType\022\021\n\rCOMMUN"
      "ITY_ADD\020\000\022\024\n\020COMMUNITY_REMOVE\020\001\022\025\n\021COMMU"
      "NITY_REPLACE\020\002*-\n\rMedActionType\022\013\n\007MED_M"
      "OD\020\000\022\017\n\013MED_REPLACE\020\001*,\n\nPolicyType\022\006\n\002I"
      "N\020\000\022\n\n\006IMPORT\020\001\022\n\n\006EXPORT\020\0022\234 \n\010GobgpApi"
      "\022L\n\013StartServer\022\034.gobgpapi.StartServerRe"
      "quest\032\035.gobgpapi.StartServerResponse\"\000\022I"
      "\n\nStopServer\022\033.gobgpapi.StopServerReques"
      "t\032\034.gobgpapi.StopServerResponse\"\000\022F\n\tGet"
      "Server\022\032.gobgpapi.GetServerRequest\032\033.gob"
      "gpapi.GetServerResponse\"\000\022L\n\013AddNeighbor"
      "\022\034.gobgpapi.AddNeighborRequest\032\035.gobgpap"
      "i.AddNeighborResponse\"\000\022U\n\016DeleteNeighbo"
      "r\022\037.gobgpapi.DeleteNeighborRequest\032 .gob"
      "gpapi.DeleteNeighborResponse\"\000\022L\n\013GetNei"
      "ghbor\022\034.gobgpapi.GetNeighborRequest\032\035.go"
      "bgpapi.GetNeighborResponse\"\000\022R\n\rResetNei"
      "ghbor\022\036.gobgpapi.ResetNeighborRequest\032\037."
      "gobgpapi.ResetNeighborResponse\"\000\022^\n\021Soft"
      "ResetNeighbor\022\".gobgpapi.SoftResetNeighb"
      "orRequest\032#.gobgpapi.SoftResetNeighborRe"
      "sponse\"\000\022[\n\020ShutdownNeighbor\022!.gobgpapi."
      "ShutdownNeighborRequest\032\".gobgpapi.Shutd"
      "ownNeighborResponse\"\000\022U\n\016EnableNeighbor\022"
      "\037.gobgpapi.EnableNeighborRequest\032 .gobgp"
      "api.EnableNeighborResponse\"\000\022X\n\017DisableN"
      "eighbor\022 .gobgpapi.DisableNeighborReques"
      "t\032!.gobgpapi.DisableNeighborResponse\"\000\022="
      "\n\006GetRib\022\027.gobgpapi.GetRibRequest\032\030.gobg"
      "papi.GetRibResponse\"\000\0227\n\007GetPath\022\030.gobgp"
      "api.GetPathRequest\032\016.gobgpapi.Path\"\0000\001\022L"
      "\n\013ValidateRib\022\034.gobgpapi.ValidateRibRequ"
      "est\032\035.gobgpapi.ValidateRibResponse\"\000\022@\n\007"
      "AddPath\022\030.gobgpapi.AddPathRequest\032\031.gobg"
      "papi.AddPathResponse\"\000\022I\n\nDeletePath\022\033.g"
      "obgpapi.DeletePathRequest\032\034.gobgpapi.Del"
      "etePathResponse\"\000\022D\n\nMonitorRib\022\033.gobgpa"
      "pi.MonitorRibRequest\032\025.gobgpapi.Destinat"
      "ion\"\0000\001\022;\n\020MonitorPeerState\022\023.gobgpapi.A"
      "rguments\032\016.gobgpapi.Peer\"\0000\001\022F\n\tEnableMr"
      "t\022\032.gobgpapi.EnableMrtRequest\032\033.gobgpapi"
      ".EnableMrtResponse\"\000\022I\n\nDisableMrt\022\033.gob"
      "gpapi.DisableMrtRequest\032\034.gobgpapi.Disab"
      "leMrtResponse\"\000\022H\n\tInjectMrt\022\032.gobgpapi."
      "InjectMrtRequest\032\033.gobgpapi.InjectMrtRes"
      "ponse\"\000(\001\022=\n\006AddBmp\022\027.gobgpapi.AddBmpReq"
      "uest\032\030.gobgpapi.AddBmpResponse\"\000\022F\n\tDele"
      "teBmp\022\032.gobgpapi.DeleteBmpRequest\032\033.gobg"
      "papi.DeleteBmpResponse\"\000\022@\n\007GetRpki\022\030.go"
      "bgpapi.GetRpkiRequest\032\031.gobgpapi.GetRpki"
      "Response\"\000\022@\n\007AddRpki\022\030.gobgpapi.AddRpki"
      "Request\032\031.gobgpapi.AddRpkiResponse\"\000\022I\n\n"
      "DeleteRpki\022\033.gobgpapi.DeleteRpkiRequest\032"
      "\034.gobgpapi.DeleteRpkiResponse\"\000\022I\n\nEnabl"
      "eRpki\022\033.gobgpapi.EnableRpkiRequest\032\034.gob"
      "gpapi.EnableRpkiResponse\"\000\022L\n\013DisableRpk"
      "i\022\034.gobgpapi.DisableRpkiRequest\032\035.gobgpa"
      "pi.DisableRpkiResponse\"\000\022F\n\tResetRpki\022\032."
      "gobgpapi.ResetRpkiRequest\032\033.gobgpapi.Res"
      "etRpkiResponse\"\000\022R\n\rSoftResetRpki\022\036.gobg"
      "papi.SoftResetRpkiRequest\032\037.gobgpapi.Sof"
      "tResetRpkiResponse\"\000\022=\n\006GetRoa\022\027.gobgpap"
      "i.GetRoaRequest\032\030.gobgpapi.GetRoaRespons"
      "e\"\000\022L\n\013EnableZebra\022\034.gobgpapi.EnableZebr"
      "aRequest\032\035.gobgpapi.EnableZebraResponse\""
      "\000\022=\n\006AddVrf\022\027.gobgpapi.AddVrfRequest\032\030.g"
      "obgpapi.AddVrfResponse\"\000\022F\n\tDeleteVrf\022\032."
      "gobgpapi.DeleteVrfRequest\032\033.gobgpapi.Del"
      "eteVrfResponse\"\000\022=\n\006GetVrf\022\027.gobgpapi.Ge"
      "tVrfRequest\032\030.gobgpapi.GetVrfResponse\"\000\022"
      "R\n\rGetDefinedSet\022\036.gobgpapi.GetDefinedSe"
      "tRequest\032\037.gobgpapi.GetDefinedSetRespons"
      "e\"\000\022R\n\rAddDefinedSet\022\036.gobgpapi.AddDefin"
      "edSetRequest\032\037.gobgpapi.AddDefinedSetRes"
      "ponse\"\000\022[\n\020DeleteDefinedSet\022!.gobgpapi.D"
      "eleteDefinedSetRequest\032\".gobgpapi.Delete"
      "DefinedSetResponse\"\000\022^\n\021ReplaceDefinedSe"
      "t\022\".gobgpapi.ReplaceDefinedSetRequest\032#."
      "gobgpapi.ReplaceDefinedSetResponse\"\000\022O\n\014"
      "GetStatement\022\035.gobgpapi.GetStatementRequ"
      "est\032\036.gobgpapi.GetStatementResponse\"\000\022O\n"
      "\014AddStatement\022\035.gobgpapi.AddStatementReq"
      "uest\032\036.gobgpapi.AddStatementResponse\"\000\022X"
      "\n\017DeleteStatement\022 .gobgpapi.DeleteState"
      "mentRequest\032!.gobgpapi.DeleteStatementRe"
      "sponse\"\000\022[\n\020ReplaceStatement\022!.gobgpapi."
      "ReplaceStatementRequest\032\".gobgpapi.Repla"
      "ceStatementResponse\"\000\022F\n\tGetPolicy\022\032.gob"
      "gpapi.GetPolicyRequest\032\033.gobgpapi.GetPol"
      "icyResponse\"\000\022F\n\tAddPolicy\022\032.gobgpapi.Ad"
      "dPolicyRequest\032\033.gobgpapi.AddPolicyRespo"
      "nse\"\000\022O\n\014DeletePolicy\022\035.gobgpapi.DeleteP"
      "olicyRequest\032\036.gobgpapi.DeletePolicyResp"
      "onse\"\000\022R\n\rReplacePolicy\022\036.gobgpapi.Repla"
      "cePolicyRequest\032\037.gobgpapi.ReplacePolicy"
      "Response\"\000\022d\n\023GetPolicyAssignment\022$.gobg"
      "papi.GetPolicyAssignmentRequest\032%.gobgpa"
      "pi.GetPolicyAssignmentResponse\"\000\022d\n\023AddP"
      "olicyAssignment\022$.gobgpapi.AddPolicyAssi"
      "gnmentRequest\032%.gobgpapi.AddPolicyAssign"
      "mentResponse\"\000\022m\n\026DeletePolicyAssignment"
      "\022\'.gobgpapi.DeletePolicyAssignmentReques"
      "t\032(.gobgpapi.DeletePolicyAssignmentRespo"
      "nse\"\000\022p\n\027ReplacePolicyAssignment\022(.gobgp"
      "api.ReplacePolicyAssignmentRequest\032).gob"
      "gpapi.ReplacePolicyAssignmentResponse\"\000\022"
      "I\n\nGetRibInfo\022\033.gobgpapi.GetRibInfoReque"
      "st\032\034.gobgpapi.GetRibInfoResponse\"\000b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 20162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gobgp.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gobgp_2eproto
namespace gobgpapi {
const ::google::protobuf::EnumDescriptor* SoftResetNeighborRequest_SoftResetDirection_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[0];
}
bool SoftResetNeighborRequest_SoftResetDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SoftResetNeighborRequest_SoftResetDirection SoftResetNeighborRequest::IN;
const SoftResetNeighborRequest_SoftResetDirection SoftResetNeighborRequest::OUT;
const SoftResetNeighborRequest_SoftResetDirection SoftResetNeighborRequest::BOTH;
const SoftResetNeighborRequest_SoftResetDirection SoftResetNeighborRequest::SoftResetDirection_MIN;
const SoftResetNeighborRequest_SoftResetDirection SoftResetNeighborRequest::SoftResetDirection_MAX;
const int SoftResetNeighborRequest::SoftResetDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AddBmpRequest_MonitoringPolicy_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[1];
}
bool AddBmpRequest_MonitoringPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AddBmpRequest_MonitoringPolicy AddBmpRequest::PRE;
const AddBmpRequest_MonitoringPolicy AddBmpRequest::POST;
const AddBmpRequest_MonitoringPolicy AddBmpRequest::BOTH;
const AddBmpRequest_MonitoringPolicy AddBmpRequest::LOCAL;
const AddBmpRequest_MonitoringPolicy AddBmpRequest::ALL;
const AddBmpRequest_MonitoringPolicy AddBmpRequest::MonitoringPolicy_MIN;
const AddBmpRequest_MonitoringPolicy AddBmpRequest::MonitoringPolicy_MAX;
const int AddBmpRequest::MonitoringPolicy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RPKIValidation_State_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[2];
}
bool RPKIValidation_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RPKIValidation_State RPKIValidation::STATE_NONE;
const RPKIValidation_State RPKIValidation::STATE_NOT_FOUND;
const RPKIValidation_State RPKIValidation::STATE_VALID;
const RPKIValidation_State RPKIValidation::STATE_INVALID;
const RPKIValidation_State RPKIValidation::State_MIN;
const RPKIValidation_State RPKIValidation::State_MAX;
const int RPKIValidation::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RPKIValidation_Reason_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[3];
}
bool RPKIValidation_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RPKIValidation_Reason RPKIValidation::REASOT_NONE;
const RPKIValidation_Reason RPKIValidation::REASON_AS;
const RPKIValidation_Reason RPKIValidation::REASON_LENGTH;
const RPKIValidation_Reason RPKIValidation::Reason_MIN;
const RPKIValidation_Reason RPKIValidation::Reason_MAX;
const int RPKIValidation::Reason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PeerConf_RemovePrivateAs_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[4];
}
bool PeerConf_RemovePrivateAs_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PeerConf_RemovePrivateAs PeerConf::NONE;
const PeerConf_RemovePrivateAs PeerConf::ALL;
const PeerConf_RemovePrivateAs PeerConf::REPLACE;
const PeerConf_RemovePrivateAs PeerConf::RemovePrivateAs_MIN;
const PeerConf_RemovePrivateAs PeerConf::RemovePrivateAs_MAX;
const int PeerConf::RemovePrivateAs_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PeerState_AdminState_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[5];
}
bool PeerState_AdminState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PeerState_AdminState PeerState::UP;
const PeerState_AdminState PeerState::DOWN;
const PeerState_AdminState PeerState::PFX_CT;
const PeerState_AdminState PeerState::AdminState_MIN;
const PeerState_AdminState PeerState::AdminState_MAX;
const int PeerState::AdminState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Conditions_RouteType_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[6];
}
bool Conditions_RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Conditions_RouteType Conditions::ROUTE_TYPE_NONE;
const Conditions_RouteType Conditions::ROUTE_TYPE_INTERNAL;
const Conditions_RouteType Conditions::ROUTE_TYPE_EXTERNAL;
const Conditions_RouteType Conditions::ROUTE_TYPE_LOCAL;
const Conditions_RouteType Conditions::RouteType_MIN;
const Conditions_RouteType Conditions::RouteType_MAX;
const int Conditions::RouteType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Family_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[7];
}
bool Family_IsValid(int value) {
  switch (value) {
    case 0:
    case 65537:
    case 65538:
    case 65540:
    case 65543:
    case 65664:
    case 65665:
    case 65668:
    case 65669:
    case 65670:
    case 131073:
    case 131074:
    case 131076:
    case 131079:
    case 131200:
    case 131201:
    case 131205:
    case 131206:
    case 1638465:
    case 1638470:
    case 1638534:
    case 1074594033:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Resource_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[8];
}
bool Resource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TableLookupOption_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[9];
}
bool TableLookupOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DefinedType_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[10];
}
bool DefinedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[11];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AsPathLengthType_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[12];
}
bool AsPathLengthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RouteAction_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[13];
}
bool RouteAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommunityActionType_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[14];
}
bool CommunityActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MedActionType_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[15];
}
bool MedActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PolicyType_descriptor() {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gobgp_2eproto::file_level_enum_descriptors[16];
}
bool PolicyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetNeighborRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNeighborRequest::kEnableAdvertisedFieldNumber;
const int GetNeighborRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNeighborRequest::GetNeighborRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetNeighborRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetNeighborRequest)
}
GetNeighborRequest::GetNeighborRequest(const GetNeighborRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  enableadvertised_ = from.enableadvertised_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetNeighborRequest)
}

void GetNeighborRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enableadvertised_ = false;
  _cached_size_ = 0;
}

GetNeighborRequest::~GetNeighborRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetNeighborRequest)
  SharedDtor();
}

void GetNeighborRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetNeighborRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNeighborRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNeighborRequest& GetNeighborRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetNeighborRequest();
  return *internal_default_instance();
}

GetNeighborRequest* GetNeighborRequest::New(::google::protobuf::Arena* arena) const {
  GetNeighborRequest* n = new GetNeighborRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enableadvertised_ = false;
  _internal_metadata_.Clear();
}

bool GetNeighborRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetNeighborRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enableAdvertised = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableadvertised_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.GetNeighborRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetNeighborRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetNeighborRequest)
  return false;
#undef DO_
}

void GetNeighborRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enableAdvertised = 1;
  if (this->enableadvertised() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enableadvertised(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.GetNeighborRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetNeighborRequest)
}

::google::protobuf::uint8* GetNeighborRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enableAdvertised = 1;
  if (this->enableadvertised() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enableadvertised(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.GetNeighborRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetNeighborRequest)
  return target;
}

size_t GetNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetNeighborRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // bool enableAdvertised = 1;
  if (this->enableadvertised() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNeighborRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNeighborRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNeighborRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetNeighborRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetNeighborRequest)
    MergeFrom(*source);
  }
}

void GetNeighborRequest::MergeFrom(const GetNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.enableadvertised() != 0) {
    set_enableadvertised(from.enableadvertised());
  }
}

void GetNeighborRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNeighborRequest::CopyFrom(const GetNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNeighborRequest::IsInitialized() const {
  return true;
}

void GetNeighborRequest::Swap(GetNeighborRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNeighborRequest::InternalSwap(GetNeighborRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(enableadvertised_, other->enableadvertised_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNeighborRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNeighborResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNeighborResponse::kPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNeighborResponse::GetNeighborResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetNeighborResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetNeighborResponse)
}
GetNeighborResponse::GetNeighborResponse(const GetNeighborResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peers_(from.peers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetNeighborResponse)
}

void GetNeighborResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetNeighborResponse::~GetNeighborResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetNeighborResponse)
  SharedDtor();
}

void GetNeighborResponse::SharedDtor() {
}

void GetNeighborResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNeighborResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNeighborResponse& GetNeighborResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetNeighborResponse();
  return *internal_default_instance();
}

GetNeighborResponse* GetNeighborResponse::New(::google::protobuf::Arena* arena) const {
  GetNeighborResponse* n = new GetNeighborResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  _internal_metadata_.Clear();
}

bool GetNeighborResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetNeighborResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gobgpapi.Peer peers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetNeighborResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetNeighborResponse)
  return false;
#undef DO_
}

void GetNeighborResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Peer peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetNeighborResponse)
}

::google::protobuf::uint8* GetNeighborResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Peer peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->peers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetNeighborResponse)
  return target;
}

size_t GetNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetNeighborResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Peer peers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->peers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNeighborResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNeighborResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNeighborResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetNeighborResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetNeighborResponse)
    MergeFrom(*source);
  }
}

void GetNeighborResponse::MergeFrom(const GetNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
}

void GetNeighborResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNeighborResponse::CopyFrom(const GetNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNeighborResponse::IsInitialized() const {
  return true;
}

void GetNeighborResponse::Swap(GetNeighborResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNeighborResponse::InternalSwap(GetNeighborResponse* other) {
  using std::swap;
  peers_.InternalSwap(&other->peers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNeighborResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Arguments::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Arguments::kResourceFieldNumber;
const int Arguments::kFamilyFieldNumber;
const int Arguments::kNameFieldNumber;
const int Arguments::kCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Arguments::Arguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsArguments();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Arguments)
}
Arguments::Arguments(const Arguments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&resource_, &from.resource_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&resource_)) + sizeof(current_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Arguments)
}

void Arguments::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&resource_)) + sizeof(current_));
  _cached_size_ = 0;
}

Arguments::~Arguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.Arguments)
  SharedDtor();
}

void Arguments::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Arguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arguments::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Arguments& Arguments::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsArguments();
  return *internal_default_instance();
}

Arguments* Arguments::New(::google::protobuf::Arena* arena) const {
  Arguments* n = new Arguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Arguments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&resource_)) + sizeof(current_));
  _internal_metadata_.Clear();
}

bool Arguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Arguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Resource resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 family = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Arguments.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool current = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Arguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Arguments)
  return false;
#undef DO_
}

void Arguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Arguments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource(), output);
  }

  // uint32 family = 2;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Arguments.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // bool current = 4;
  if (this->current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->current(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Arguments)
}

::google::protobuf::uint8* Arguments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Arguments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource(), target);
  }

  // uint32 family = 2;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Arguments.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // bool current = 4;
  if (this->current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->current(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Arguments)
  return target;
}

size_t Arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Arguments)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  // uint32 family = 2;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // bool current = 4;
  if (this->current() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arguments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Arguments)
  GOOGLE_DCHECK_NE(&from, this);
  const Arguments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Arguments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Arguments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Arguments)
    MergeFrom(*source);
  }
}

void Arguments::MergeFrom(const Arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Arguments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.current() != 0) {
    set_current(from.current());
  }
}

void Arguments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arguments::CopyFrom(const Arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arguments::IsInitialized() const {
  return true;
}

void Arguments::Swap(Arguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Arguments::InternalSwap(Arguments* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(resource_, other->resource_);
  swap(family_, other->family_);
  swap(current_, other->current_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Arguments::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPathRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddPathRequest_default_instance_._instance.get_mutable()->path_ = const_cast< ::gobgpapi::Path*>(
      ::gobgpapi::Path::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPathRequest::kResourceFieldNumber;
const int AddPathRequest::kVrfIdFieldNumber;
const int AddPathRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPathRequest::AddPathRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddPathRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPathRequest)
}
AddPathRequest::AddPathRequest(const AddPathRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vrf_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vrf_id().size() > 0) {
    vrf_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  if (from.has_path()) {
    path_ = new ::gobgpapi::Path(*from.path_);
  } else {
    path_ = NULL;
  }
  resource_ = from.resource_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPathRequest)
}

void AddPathRequest::SharedCtor() {
  vrf_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&path_)) + sizeof(resource_));
  _cached_size_ = 0;
}

AddPathRequest::~AddPathRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPathRequest)
  SharedDtor();
}

void AddPathRequest::SharedDtor() {
  vrf_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void AddPathRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPathRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPathRequest& AddPathRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddPathRequest();
  return *internal_default_instance();
}

AddPathRequest* AddPathRequest::New(::google::protobuf::Arena* arena) const {
  AddPathRequest* n = new AddPathRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrf_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  resource_ = 0;
  _internal_metadata_.Clear();
}

bool AddPathRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddPathRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Resource resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vrf_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vrf_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vrf_id().data(), static_cast<int>(this->vrf_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.AddPathRequest.vrf_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Path path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddPathRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddPathRequest)
  return false;
#undef DO_
}

void AddPathRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource(), output);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrf_id().data(), static_cast<int>(this->vrf_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddPathRequest.vrf_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vrf_id(), output);
  }

  // .gobgpapi.Path path = 3;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->path_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddPathRequest)
}

::google::protobuf::uint8* AddPathRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource(), target);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrf_id().data(), static_cast<int>(this->vrf_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddPathRequest.vrf_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vrf_id(), target);
  }

  // .gobgpapi.Path path = 3;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->path_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPathRequest)
  return target;
}

size_t AddPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPathRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vrf_id());
  }

  // .gobgpapi.Path path = 3;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->path_);
  }

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPathRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPathRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPathRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPathRequest)
    MergeFrom(*source);
  }
}

void AddPathRequest::MergeFrom(const AddPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrf_id().size() > 0) {

    vrf_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  if (from.has_path()) {
    mutable_path()->::gobgpapi::Path::MergeFrom(from.path());
  }
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
}

void AddPathRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathRequest::CopyFrom(const AddPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathRequest::IsInitialized() const {
  return true;
}

void AddPathRequest::Swap(AddPathRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPathRequest::InternalSwap(AddPathRequest* other) {
  using std::swap;
  vrf_id_.Swap(&other->vrf_id_);
  swap(path_, other->path_);
  swap(resource_, other->resource_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPathRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPathResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPathResponse::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPathResponse::AddPathResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddPathResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPathResponse)
}
AddPathResponse::AddPathResponse(const AddPathResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPathResponse)
}

void AddPathResponse::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AddPathResponse::~AddPathResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPathResponse)
  SharedDtor();
}

void AddPathResponse::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddPathResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPathResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPathResponse& AddPathResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddPathResponse();
  return *internal_default_instance();
}

AddPathResponse* AddPathResponse::New(::google::protobuf::Arena* arena) const {
  AddPathResponse* n = new AddPathResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AddPathResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddPathResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddPathResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddPathResponse)
  return false;
#undef DO_
}

void AddPathResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uuid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddPathResponse)
}

::google::protobuf::uint8* AddPathResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPathResponse)
  return target;
}

size_t AddPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPathResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPathResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPathResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPathResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPathResponse)
    MergeFrom(*source);
  }
}

void AddPathResponse::MergeFrom(const AddPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void AddPathResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathResponse::CopyFrom(const AddPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathResponse::IsInitialized() const {
  return true;
}

void AddPathResponse::Swap(AddPathResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPathResponse::InternalSwap(AddPathResponse* other) {
  using std::swap;
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPathResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeletePathRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeletePathRequest_default_instance_._instance.get_mutable()->path_ = const_cast< ::gobgpapi::Path*>(
      ::gobgpapi::Path::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeletePathRequest::kResourceFieldNumber;
const int DeletePathRequest::kVrfIdFieldNumber;
const int DeletePathRequest::kFamilyFieldNumber;
const int DeletePathRequest::kPathFieldNumber;
const int DeletePathRequest::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletePathRequest::DeletePathRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeletePathRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePathRequest)
}
DeletePathRequest::DeletePathRequest(const DeletePathRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vrf_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vrf_id().size() > 0) {
    vrf_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_path()) {
    path_ = new ::gobgpapi::Path(*from.path_);
  } else {
    path_ = NULL;
  }
  ::memcpy(&resource_, &from.resource_,
    static_cast<size_t>(reinterpret_cast<char*>(&family_) -
    reinterpret_cast<char*>(&resource_)) + sizeof(family_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePathRequest)
}

void DeletePathRequest::SharedCtor() {
  vrf_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&path_)) + sizeof(family_));
  _cached_size_ = 0;
}

DeletePathRequest::~DeletePathRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePathRequest)
  SharedDtor();
}

void DeletePathRequest::SharedDtor() {
  vrf_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void DeletePathRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePathRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeletePathRequest& DeletePathRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeletePathRequest();
  return *internal_default_instance();
}

DeletePathRequest* DeletePathRequest::New(::google::protobuf::Arena* arena) const {
  DeletePathRequest* n = new DeletePathRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeletePathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrf_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  ::memset(&resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&resource_)) + sizeof(family_));
  _internal_metadata_.Clear();
}

bool DeletePathRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeletePathRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Resource resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vrf_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vrf_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vrf_id().data(), static_cast<int>(this->vrf_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DeletePathRequest.vrf_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Path path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes uuid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeletePathRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeletePathRequest)
  return false;
#undef DO_
}

void DeletePathRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeletePathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource(), output);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrf_id().data(), static_cast<int>(this->vrf_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeletePathRequest.vrf_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vrf_id(), output);
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family(), output);
  }

  // .gobgpapi.Path path = 4;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->path_, output);
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->uuid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeletePathRequest)
}

::google::protobuf::uint8* DeletePathRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource(), target);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrf_id().data(), static_cast<int>(this->vrf_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeletePathRequest.vrf_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vrf_id(), target);
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family(), target);
  }

  // .gobgpapi.Path path = 4;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->path_, deterministic, target);
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->uuid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePathRequest)
  return target;
}

size_t DeletePathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePathRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vrf_id());
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // .gobgpapi.Path path = 4;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->path_);
  }

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePathRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePathRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletePathRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePathRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePathRequest)
    MergeFrom(*source);
  }
}

void DeletePathRequest::MergeFrom(const DeletePathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrf_id().size() > 0) {

    vrf_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_path()) {
    mutable_path()->::gobgpapi::Path::MergeFrom(from.path());
  }
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
}

void DeletePathRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePathRequest::CopyFrom(const DeletePathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePathRequest::IsInitialized() const {
  return true;
}

void DeletePathRequest::Swap(DeletePathRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletePathRequest::InternalSwap(DeletePathRequest* other) {
  using std::swap;
  vrf_id_.Swap(&other->vrf_id_);
  uuid_.Swap(&other->uuid_);
  swap(path_, other->path_);
  swap(resource_, other->resource_);
  swap(family_, other->family_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeletePathRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeletePathResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletePathResponse::DeletePathResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeletePathResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePathResponse)
}
DeletePathResponse::DeletePathResponse(const DeletePathResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePathResponse)
}

void DeletePathResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeletePathResponse::~DeletePathResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePathResponse)
  SharedDtor();
}

void DeletePathResponse::SharedDtor() {
}

void DeletePathResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePathResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeletePathResponse& DeletePathResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeletePathResponse();
  return *internal_default_instance();
}

DeletePathResponse* DeletePathResponse::New(::google::protobuf::Arena* arena) const {
  DeletePathResponse* n = new DeletePathResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeletePathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeletePathResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeletePathResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeletePathResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeletePathResponse)
  return false;
#undef DO_
}

void DeletePathResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeletePathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeletePathResponse)
}

::google::protobuf::uint8* DeletePathResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePathResponse)
  return target;
}

size_t DeletePathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePathResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePathResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePathResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletePathResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePathResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePathResponse)
    MergeFrom(*source);
  }
}

void DeletePathResponse::MergeFrom(const DeletePathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeletePathResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePathResponse::CopyFrom(const DeletePathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePathResponse::IsInitialized() const {
  return true;
}

void DeletePathResponse::Swap(DeletePathResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletePathResponse::InternalSwap(DeletePathResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeletePathResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddNeighborRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddNeighborRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::gobgpapi::Peer*>(
      ::gobgpapi::Peer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddNeighborRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddNeighborRequest::AddNeighborRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddNeighborRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddNeighborRequest)
}
AddNeighborRequest::AddNeighborRequest(const AddNeighborRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::gobgpapi::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddNeighborRequest)
}

void AddNeighborRequest::SharedCtor() {
  peer_ = NULL;
  _cached_size_ = 0;
}

AddNeighborRequest::~AddNeighborRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddNeighborRequest)
  SharedDtor();
}

void AddNeighborRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void AddNeighborRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNeighborRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddNeighborRequest& AddNeighborRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddNeighborRequest();
  return *internal_default_instance();
}

AddNeighborRequest* AddNeighborRequest::New(::google::protobuf::Arena* arena) const {
  AddNeighborRequest* n = new AddNeighborRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

bool AddNeighborRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddNeighborRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddNeighborRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddNeighborRequest)
  return false;
#undef DO_
}

void AddNeighborRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddNeighborRequest)
}

::google::protobuf::uint8* AddNeighborRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddNeighborRequest)
  return target;
}

size_t AddNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddNeighborRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNeighborRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNeighborRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddNeighborRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddNeighborRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddNeighborRequest)
    MergeFrom(*source);
  }
}

void AddNeighborRequest::MergeFrom(const AddNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::gobgpapi::Peer::MergeFrom(from.peer());
  }
}

void AddNeighborRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNeighborRequest::CopyFrom(const AddNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNeighborRequest::IsInitialized() const {
  return true;
}

void AddNeighborRequest::Swap(AddNeighborRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddNeighborRequest::InternalSwap(AddNeighborRequest* other) {
  using std::swap;
  swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddNeighborRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddNeighborResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddNeighborResponse::AddNeighborResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddNeighborResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddNeighborResponse)
}
AddNeighborResponse::AddNeighborResponse(const AddNeighborResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddNeighborResponse)
}

void AddNeighborResponse::SharedCtor() {
  _cached_size_ = 0;
}

AddNeighborResponse::~AddNeighborResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddNeighborResponse)
  SharedDtor();
}

void AddNeighborResponse::SharedDtor() {
}

void AddNeighborResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNeighborResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddNeighborResponse& AddNeighborResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddNeighborResponse();
  return *internal_default_instance();
}

AddNeighborResponse* AddNeighborResponse::New(::google::protobuf::Arena* arena) const {
  AddNeighborResponse* n = new AddNeighborResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AddNeighborResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddNeighborResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddNeighborResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddNeighborResponse)
  return false;
#undef DO_
}

void AddNeighborResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddNeighborResponse)
}

::google::protobuf::uint8* AddNeighborResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddNeighborResponse)
  return target;
}

size_t AddNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddNeighborResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNeighborResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNeighborResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddNeighborResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddNeighborResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddNeighborResponse)
    MergeFrom(*source);
  }
}

void AddNeighborResponse::MergeFrom(const AddNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddNeighborResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNeighborResponse::CopyFrom(const AddNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNeighborResponse::IsInitialized() const {
  return true;
}

void AddNeighborResponse::Swap(AddNeighborResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddNeighborResponse::InternalSwap(AddNeighborResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddNeighborResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteNeighborRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeleteNeighborRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::gobgpapi::Peer*>(
      ::gobgpapi::Peer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteNeighborRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteNeighborRequest::DeleteNeighborRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteNeighborRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteNeighborRequest)
}
DeleteNeighborRequest::DeleteNeighborRequest(const DeleteNeighborRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::gobgpapi::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteNeighborRequest)
}

void DeleteNeighborRequest::SharedCtor() {
  peer_ = NULL;
  _cached_size_ = 0;
}

DeleteNeighborRequest::~DeleteNeighborRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteNeighborRequest)
  SharedDtor();
}

void DeleteNeighborRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void DeleteNeighborRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteNeighborRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteNeighborRequest& DeleteNeighborRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteNeighborRequest();
  return *internal_default_instance();
}

DeleteNeighborRequest* DeleteNeighborRequest::New(::google::protobuf::Arena* arena) const {
  DeleteNeighborRequest* n = new DeleteNeighborRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

bool DeleteNeighborRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteNeighborRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteNeighborRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteNeighborRequest)
  return false;
#undef DO_
}

void DeleteNeighborRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteNeighborRequest)
}

::google::protobuf::uint8* DeleteNeighborRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteNeighborRequest)
  return target;
}

size_t DeleteNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteNeighborRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteNeighborRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteNeighborRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteNeighborRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteNeighborRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteNeighborRequest)
    MergeFrom(*source);
  }
}

void DeleteNeighborRequest::MergeFrom(const DeleteNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::gobgpapi::Peer::MergeFrom(from.peer());
  }
}

void DeleteNeighborRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNeighborRequest::CopyFrom(const DeleteNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNeighborRequest::IsInitialized() const {
  return true;
}

void DeleteNeighborRequest::Swap(DeleteNeighborRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteNeighborRequest::InternalSwap(DeleteNeighborRequest* other) {
  using std::swap;
  swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteNeighborRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteNeighborResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteNeighborResponse::DeleteNeighborResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteNeighborResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteNeighborResponse)
}
DeleteNeighborResponse::DeleteNeighborResponse(const DeleteNeighborResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteNeighborResponse)
}

void DeleteNeighborResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteNeighborResponse::~DeleteNeighborResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteNeighborResponse)
  SharedDtor();
}

void DeleteNeighborResponse::SharedDtor() {
}

void DeleteNeighborResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteNeighborResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteNeighborResponse& DeleteNeighborResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteNeighborResponse();
  return *internal_default_instance();
}

DeleteNeighborResponse* DeleteNeighborResponse::New(::google::protobuf::Arena* arena) const {
  DeleteNeighborResponse* n = new DeleteNeighborResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeleteNeighborResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteNeighborResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteNeighborResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteNeighborResponse)
  return false;
#undef DO_
}

void DeleteNeighborResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteNeighborResponse)
}

::google::protobuf::uint8* DeleteNeighborResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteNeighborResponse)
  return target;
}

size_t DeleteNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteNeighborResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteNeighborResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteNeighborResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteNeighborResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteNeighborResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteNeighborResponse)
    MergeFrom(*source);
  }
}

void DeleteNeighborResponse::MergeFrom(const DeleteNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteNeighborResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNeighborResponse::CopyFrom(const DeleteNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNeighborResponse::IsInitialized() const {
  return true;
}

void DeleteNeighborResponse::Swap(DeleteNeighborResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteNeighborResponse::InternalSwap(DeleteNeighborResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteNeighborResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetNeighborRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetNeighborRequest::kAddressFieldNumber;
const int ResetNeighborRequest::kCommunicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetNeighborRequest::ResetNeighborRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsResetNeighborRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ResetNeighborRequest)
}
ResetNeighborRequest::ResetNeighborRequest(const ResetNeighborRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  communication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.communication().size() > 0) {
    communication_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ResetNeighborRequest)
}

void ResetNeighborRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  communication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResetNeighborRequest::~ResetNeighborRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ResetNeighborRequest)
  SharedDtor();
}

void ResetNeighborRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  communication_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResetNeighborRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetNeighborRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetNeighborRequest& ResetNeighborRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsResetNeighborRequest();
  return *internal_default_instance();
}

ResetNeighborRequest* ResetNeighborRequest::New(::google::protobuf::Arena* arena) const {
  ResetNeighborRequest* n = new ResetNeighborRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ResetNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  communication_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ResetNeighborRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ResetNeighborRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ResetNeighborRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string communication = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_communication()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->communication().data(), static_cast<int>(this->communication().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ResetNeighborRequest.communication"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ResetNeighborRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ResetNeighborRequest)
  return false;
#undef DO_
}

void ResetNeighborRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ResetNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ResetNeighborRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communication().data(), static_cast<int>(this->communication().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ResetNeighborRequest.communication");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->communication(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ResetNeighborRequest)
}

::google::protobuf::uint8* ResetNeighborRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ResetNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ResetNeighborRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communication().data(), static_cast<int>(this->communication().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ResetNeighborRequest.communication");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->communication(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ResetNeighborRequest)
  return target;
}

size_t ResetNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ResetNeighborRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->communication());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetNeighborRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ResetNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetNeighborRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetNeighborRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ResetNeighborRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ResetNeighborRequest)
    MergeFrom(*source);
  }
}

void ResetNeighborRequest::MergeFrom(const ResetNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ResetNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.communication().size() > 0) {

    communication_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
}

void ResetNeighborRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ResetNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetNeighborRequest::CopyFrom(const ResetNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ResetNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetNeighborRequest::IsInitialized() const {
  return true;
}

void ResetNeighborRequest::Swap(ResetNeighborRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetNeighborRequest::InternalSwap(ResetNeighborRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  communication_.Swap(&other->communication_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetNeighborRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetNeighborResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetNeighborResponse::ResetNeighborResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsResetNeighborResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ResetNeighborResponse)
}
ResetNeighborResponse::ResetNeighborResponse(const ResetNeighborResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ResetNeighborResponse)
}

void ResetNeighborResponse::SharedCtor() {
  _cached_size_ = 0;
}

ResetNeighborResponse::~ResetNeighborResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ResetNeighborResponse)
  SharedDtor();
}

void ResetNeighborResponse::SharedDtor() {
}

void ResetNeighborResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetNeighborResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetNeighborResponse& ResetNeighborResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsResetNeighborResponse();
  return *internal_default_instance();
}

ResetNeighborResponse* ResetNeighborResponse::New(::google::protobuf::Arena* arena) const {
  ResetNeighborResponse* n = new ResetNeighborResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ResetNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ResetNeighborResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ResetNeighborResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ResetNeighborResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ResetNeighborResponse)
  return false;
#undef DO_
}

void ResetNeighborResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ResetNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ResetNeighborResponse)
}

::google::protobuf::uint8* ResetNeighborResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ResetNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ResetNeighborResponse)
  return target;
}

size_t ResetNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ResetNeighborResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetNeighborResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ResetNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetNeighborResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetNeighborResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ResetNeighborResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ResetNeighborResponse)
    MergeFrom(*source);
  }
}

void ResetNeighborResponse::MergeFrom(const ResetNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ResetNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetNeighborResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ResetNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetNeighborResponse::CopyFrom(const ResetNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ResetNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetNeighborResponse::IsInitialized() const {
  return true;
}

void ResetNeighborResponse::Swap(ResetNeighborResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetNeighborResponse::InternalSwap(ResetNeighborResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetNeighborResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SoftResetNeighborRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftResetNeighborRequest::kAddressFieldNumber;
const int SoftResetNeighborRequest::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftResetNeighborRequest::SoftResetNeighborRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsSoftResetNeighborRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.SoftResetNeighborRequest)
}
SoftResetNeighborRequest::SoftResetNeighborRequest(const SoftResetNeighborRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.SoftResetNeighborRequest)
}

void SoftResetNeighborRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  _cached_size_ = 0;
}

SoftResetNeighborRequest::~SoftResetNeighborRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.SoftResetNeighborRequest)
  SharedDtor();
}

void SoftResetNeighborRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SoftResetNeighborRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftResetNeighborRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftResetNeighborRequest& SoftResetNeighborRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsSoftResetNeighborRequest();
  return *internal_default_instance();
}

SoftResetNeighborRequest* SoftResetNeighborRequest::New(::google::protobuf::Arena* arena) const {
  SoftResetNeighborRequest* n = new SoftResetNeighborRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftResetNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.SoftResetNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  _internal_metadata_.Clear();
}

bool SoftResetNeighborRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.SoftResetNeighborRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.SoftResetNeighborRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.SoftResetNeighborRequest.SoftResetDirection direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::gobgpapi::SoftResetNeighborRequest_SoftResetDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.SoftResetNeighborRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.SoftResetNeighborRequest)
  return false;
#undef DO_
}

void SoftResetNeighborRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.SoftResetNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.SoftResetNeighborRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // .gobgpapi.SoftResetNeighborRequest.SoftResetDirection direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.SoftResetNeighborRequest)
}

::google::protobuf::uint8* SoftResetNeighborRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.SoftResetNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.SoftResetNeighborRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // .gobgpapi.SoftResetNeighborRequest.SoftResetDirection direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.SoftResetNeighborRequest)
  return target;
}

size_t SoftResetNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.SoftResetNeighborRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // .gobgpapi.SoftResetNeighborRequest.SoftResetDirection direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftResetNeighborRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.SoftResetNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftResetNeighborRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftResetNeighborRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.SoftResetNeighborRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.SoftResetNeighborRequest)
    MergeFrom(*source);
  }
}

void SoftResetNeighborRequest::MergeFrom(const SoftResetNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.SoftResetNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void SoftResetNeighborRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.SoftResetNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftResetNeighborRequest::CopyFrom(const SoftResetNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.SoftResetNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftResetNeighborRequest::IsInitialized() const {
  return true;
}

void SoftResetNeighborRequest::Swap(SoftResetNeighborRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftResetNeighborRequest::InternalSwap(SoftResetNeighborRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(direction_, other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftResetNeighborRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SoftResetNeighborResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftResetNeighborResponse::SoftResetNeighborResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsSoftResetNeighborResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.SoftResetNeighborResponse)
}
SoftResetNeighborResponse::SoftResetNeighborResponse(const SoftResetNeighborResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.SoftResetNeighborResponse)
}

void SoftResetNeighborResponse::SharedCtor() {
  _cached_size_ = 0;
}

SoftResetNeighborResponse::~SoftResetNeighborResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.SoftResetNeighborResponse)
  SharedDtor();
}

void SoftResetNeighborResponse::SharedDtor() {
}

void SoftResetNeighborResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftResetNeighborResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftResetNeighborResponse& SoftResetNeighborResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsSoftResetNeighborResponse();
  return *internal_default_instance();
}

SoftResetNeighborResponse* SoftResetNeighborResponse::New(::google::protobuf::Arena* arena) const {
  SoftResetNeighborResponse* n = new SoftResetNeighborResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftResetNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.SoftResetNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SoftResetNeighborResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.SoftResetNeighborResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.SoftResetNeighborResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.SoftResetNeighborResponse)
  return false;
#undef DO_
}

void SoftResetNeighborResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.SoftResetNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.SoftResetNeighborResponse)
}

::google::protobuf::uint8* SoftResetNeighborResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.SoftResetNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.SoftResetNeighborResponse)
  return target;
}

size_t SoftResetNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.SoftResetNeighborResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftResetNeighborResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.SoftResetNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftResetNeighborResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftResetNeighborResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.SoftResetNeighborResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.SoftResetNeighborResponse)
    MergeFrom(*source);
  }
}

void SoftResetNeighborResponse::MergeFrom(const SoftResetNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.SoftResetNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SoftResetNeighborResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.SoftResetNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftResetNeighborResponse::CopyFrom(const SoftResetNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.SoftResetNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftResetNeighborResponse::IsInitialized() const {
  return true;
}

void SoftResetNeighborResponse::Swap(SoftResetNeighborResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftResetNeighborResponse::InternalSwap(SoftResetNeighborResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftResetNeighborResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShutdownNeighborRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownNeighborRequest::kAddressFieldNumber;
const int ShutdownNeighborRequest::kCommunicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownNeighborRequest::ShutdownNeighborRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsShutdownNeighborRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ShutdownNeighborRequest)
}
ShutdownNeighborRequest::ShutdownNeighborRequest(const ShutdownNeighborRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  communication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.communication().size() > 0) {
    communication_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ShutdownNeighborRequest)
}

void ShutdownNeighborRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  communication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ShutdownNeighborRequest::~ShutdownNeighborRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ShutdownNeighborRequest)
  SharedDtor();
}

void ShutdownNeighborRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  communication_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShutdownNeighborRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownNeighborRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShutdownNeighborRequest& ShutdownNeighborRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsShutdownNeighborRequest();
  return *internal_default_instance();
}

ShutdownNeighborRequest* ShutdownNeighborRequest::New(::google::protobuf::Arena* arena) const {
  ShutdownNeighborRequest* n = new ShutdownNeighborRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ShutdownNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  communication_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ShutdownNeighborRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ShutdownNeighborRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ShutdownNeighborRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string communication = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_communication()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->communication().data(), static_cast<int>(this->communication().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ShutdownNeighborRequest.communication"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ShutdownNeighborRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ShutdownNeighborRequest)
  return false;
#undef DO_
}

void ShutdownNeighborRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ShutdownNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ShutdownNeighborRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communication().data(), static_cast<int>(this->communication().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ShutdownNeighborRequest.communication");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->communication(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ShutdownNeighborRequest)
}

::google::protobuf::uint8* ShutdownNeighborRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ShutdownNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ShutdownNeighborRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communication().data(), static_cast<int>(this->communication().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ShutdownNeighborRequest.communication");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->communication(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ShutdownNeighborRequest)
  return target;
}

size_t ShutdownNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ShutdownNeighborRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->communication());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownNeighborRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ShutdownNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownNeighborRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownNeighborRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ShutdownNeighborRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ShutdownNeighborRequest)
    MergeFrom(*source);
  }
}

void ShutdownNeighborRequest::MergeFrom(const ShutdownNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ShutdownNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.communication().size() > 0) {

    communication_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
}

void ShutdownNeighborRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ShutdownNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownNeighborRequest::CopyFrom(const ShutdownNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ShutdownNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownNeighborRequest::IsInitialized() const {
  return true;
}

void ShutdownNeighborRequest::Swap(ShutdownNeighborRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownNeighborRequest::InternalSwap(ShutdownNeighborRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  communication_.Swap(&other->communication_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownNeighborRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShutdownNeighborResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownNeighborResponse::ShutdownNeighborResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsShutdownNeighborResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ShutdownNeighborResponse)
}
ShutdownNeighborResponse::ShutdownNeighborResponse(const ShutdownNeighborResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ShutdownNeighborResponse)
}

void ShutdownNeighborResponse::SharedCtor() {
  _cached_size_ = 0;
}

ShutdownNeighborResponse::~ShutdownNeighborResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ShutdownNeighborResponse)
  SharedDtor();
}

void ShutdownNeighborResponse::SharedDtor() {
}

void ShutdownNeighborResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownNeighborResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShutdownNeighborResponse& ShutdownNeighborResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsShutdownNeighborResponse();
  return *internal_default_instance();
}

ShutdownNeighborResponse* ShutdownNeighborResponse::New(::google::protobuf::Arena* arena) const {
  ShutdownNeighborResponse* n = new ShutdownNeighborResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ShutdownNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ShutdownNeighborResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ShutdownNeighborResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ShutdownNeighborResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ShutdownNeighborResponse)
  return false;
#undef DO_
}

void ShutdownNeighborResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ShutdownNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ShutdownNeighborResponse)
}

::google::protobuf::uint8* ShutdownNeighborResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ShutdownNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ShutdownNeighborResponse)
  return target;
}

size_t ShutdownNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ShutdownNeighborResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownNeighborResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ShutdownNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownNeighborResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownNeighborResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ShutdownNeighborResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ShutdownNeighborResponse)
    MergeFrom(*source);
  }
}

void ShutdownNeighborResponse::MergeFrom(const ShutdownNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ShutdownNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ShutdownNeighborResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ShutdownNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownNeighborResponse::CopyFrom(const ShutdownNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ShutdownNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownNeighborResponse::IsInitialized() const {
  return true;
}

void ShutdownNeighborResponse::Swap(ShutdownNeighborResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownNeighborResponse::InternalSwap(ShutdownNeighborResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownNeighborResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnableNeighborRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableNeighborRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableNeighborRequest::EnableNeighborRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEnableNeighborRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableNeighborRequest)
}
EnableNeighborRequest::EnableNeighborRequest(const EnableNeighborRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableNeighborRequest)
}

void EnableNeighborRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EnableNeighborRequest::~EnableNeighborRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableNeighborRequest)
  SharedDtor();
}

void EnableNeighborRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnableNeighborRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableNeighborRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnableNeighborRequest& EnableNeighborRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEnableNeighborRequest();
  return *internal_default_instance();
}

EnableNeighborRequest* EnableNeighborRequest::New(::google::protobuf::Arena* arena) const {
  EnableNeighborRequest* n = new EnableNeighborRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EnableNeighborRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EnableNeighborRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.EnableNeighborRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EnableNeighborRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EnableNeighborRequest)
  return false;
#undef DO_
}

void EnableNeighborRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EnableNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableNeighborRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EnableNeighborRequest)
}

::google::protobuf::uint8* EnableNeighborRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableNeighborRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableNeighborRequest)
  return target;
}

size_t EnableNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableNeighborRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableNeighborRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableNeighborRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableNeighborRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableNeighborRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableNeighborRequest)
    MergeFrom(*source);
  }
}

void EnableNeighborRequest::MergeFrom(const EnableNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void EnableNeighborRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableNeighborRequest::CopyFrom(const EnableNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableNeighborRequest::IsInitialized() const {
  return true;
}

void EnableNeighborRequest::Swap(EnableNeighborRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableNeighborRequest::InternalSwap(EnableNeighborRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableNeighborRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnableNeighborResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableNeighborResponse::EnableNeighborResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEnableNeighborResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableNeighborResponse)
}
EnableNeighborResponse::EnableNeighborResponse(const EnableNeighborResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableNeighborResponse)
}

void EnableNeighborResponse::SharedCtor() {
  _cached_size_ = 0;
}

EnableNeighborResponse::~EnableNeighborResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableNeighborResponse)
  SharedDtor();
}

void EnableNeighborResponse::SharedDtor() {
}

void EnableNeighborResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableNeighborResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnableNeighborResponse& EnableNeighborResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEnableNeighborResponse();
  return *internal_default_instance();
}

EnableNeighborResponse* EnableNeighborResponse::New(::google::protobuf::Arena* arena) const {
  EnableNeighborResponse* n = new EnableNeighborResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EnableNeighborResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EnableNeighborResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EnableNeighborResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EnableNeighborResponse)
  return false;
#undef DO_
}

void EnableNeighborResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EnableNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EnableNeighborResponse)
}

::google::protobuf::uint8* EnableNeighborResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableNeighborResponse)
  return target;
}

size_t EnableNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableNeighborResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableNeighborResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableNeighborResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableNeighborResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableNeighborResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableNeighborResponse)
    MergeFrom(*source);
  }
}

void EnableNeighborResponse::MergeFrom(const EnableNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnableNeighborResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableNeighborResponse::CopyFrom(const EnableNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableNeighborResponse::IsInitialized() const {
  return true;
}

void EnableNeighborResponse::Swap(EnableNeighborResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableNeighborResponse::InternalSwap(EnableNeighborResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableNeighborResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DisableNeighborRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisableNeighborRequest::kAddressFieldNumber;
const int DisableNeighborRequest::kCommunicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisableNeighborRequest::DisableNeighborRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDisableNeighborRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DisableNeighborRequest)
}
DisableNeighborRequest::DisableNeighborRequest(const DisableNeighborRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  communication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.communication().size() > 0) {
    communication_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DisableNeighborRequest)
}

void DisableNeighborRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  communication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DisableNeighborRequest::~DisableNeighborRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DisableNeighborRequest)
  SharedDtor();
}

void DisableNeighborRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  communication_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DisableNeighborRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableNeighborRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisableNeighborRequest& DisableNeighborRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDisableNeighborRequest();
  return *internal_default_instance();
}

DisableNeighborRequest* DisableNeighborRequest::New(::google::protobuf::Arena* arena) const {
  DisableNeighborRequest* n = new DisableNeighborRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisableNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DisableNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  communication_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DisableNeighborRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DisableNeighborRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DisableNeighborRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string communication = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_communication()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->communication().data(), static_cast<int>(this->communication().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DisableNeighborRequest.communication"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DisableNeighborRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DisableNeighborRequest)
  return false;
#undef DO_
}

void DisableNeighborRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DisableNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DisableNeighborRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communication().data(), static_cast<int>(this->communication().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DisableNeighborRequest.communication");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->communication(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DisableNeighborRequest)
}

::google::protobuf::uint8* DisableNeighborRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DisableNeighborRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DisableNeighborRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communication().data(), static_cast<int>(this->communication().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DisableNeighborRequest.communication");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->communication(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DisableNeighborRequest)
  return target;
}

size_t DisableNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DisableNeighborRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->communication());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableNeighborRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DisableNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableNeighborRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisableNeighborRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DisableNeighborRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DisableNeighborRequest)
    MergeFrom(*source);
  }
}

void DisableNeighborRequest::MergeFrom(const DisableNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DisableNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.communication().size() > 0) {

    communication_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
}

void DisableNeighborRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DisableNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableNeighborRequest::CopyFrom(const DisableNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DisableNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableNeighborRequest::IsInitialized() const {
  return true;
}

void DisableNeighborRequest::Swap(DisableNeighborRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisableNeighborRequest::InternalSwap(DisableNeighborRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  communication_.Swap(&other->communication_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisableNeighborRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DisableNeighborResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisableNeighborResponse::DisableNeighborResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDisableNeighborResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DisableNeighborResponse)
}
DisableNeighborResponse::DisableNeighborResponse(const DisableNeighborResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DisableNeighborResponse)
}

void DisableNeighborResponse::SharedCtor() {
  _cached_size_ = 0;
}

DisableNeighborResponse::~DisableNeighborResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DisableNeighborResponse)
  SharedDtor();
}

void DisableNeighborResponse::SharedDtor() {
}

void DisableNeighborResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableNeighborResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisableNeighborResponse& DisableNeighborResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDisableNeighborResponse();
  return *internal_default_instance();
}

DisableNeighborResponse* DisableNeighborResponse::New(::google::protobuf::Arena* arena) const {
  DisableNeighborResponse* n = new DisableNeighborResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisableNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DisableNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DisableNeighborResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DisableNeighborResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DisableNeighborResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DisableNeighborResponse)
  return false;
#undef DO_
}

void DisableNeighborResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DisableNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DisableNeighborResponse)
}

::google::protobuf::uint8* DisableNeighborResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DisableNeighborResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DisableNeighborResponse)
  return target;
}

size_t DisableNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DisableNeighborResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableNeighborResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DisableNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableNeighborResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisableNeighborResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DisableNeighborResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DisableNeighborResponse)
    MergeFrom(*source);
  }
}

void DisableNeighborResponse::MergeFrom(const DisableNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DisableNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DisableNeighborResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DisableNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableNeighborResponse::CopyFrom(const DisableNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DisableNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableNeighborResponse::IsInitialized() const {
  return true;
}

void DisableNeighborResponse::Swap(DisableNeighborResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisableNeighborResponse::InternalSwap(DisableNeighborResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisableNeighborResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnableMrtRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableMrtRequest::kDumpTypeFieldNumber;
const int EnableMrtRequest::kFilenameFieldNumber;
const int EnableMrtRequest::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableMrtRequest::EnableMrtRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEnableMrtRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableMrtRequest)
}
EnableMrtRequest::EnableMrtRequest(const EnableMrtRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_type_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(dump_type_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableMrtRequest)
}

void EnableMrtRequest::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_type_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(dump_type_));
  _cached_size_ = 0;
}

EnableMrtRequest::~EnableMrtRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableMrtRequest)
  SharedDtor();
}

void EnableMrtRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnableMrtRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableMrtRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnableMrtRequest& EnableMrtRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEnableMrtRequest();
  return *internal_default_instance();
}

EnableMrtRequest* EnableMrtRequest::New(::google::protobuf::Arena* arena) const {
  EnableMrtRequest* n = new EnableMrtRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableMrtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableMrtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_type_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(dump_type_));
  _internal_metadata_.Clear();
}

bool EnableMrtRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EnableMrtRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dump_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dump_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.EnableMrtRequest.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EnableMrtRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EnableMrtRequest)
  return false;
#undef DO_
}

void EnableMrtRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EnableMrtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dump_type = 1;
  if (this->dump_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dump_type(), output);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableMrtRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // uint64 interval = 3;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->interval(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EnableMrtRequest)
}

::google::protobuf::uint8* EnableMrtRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableMrtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dump_type = 1;
  if (this->dump_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dump_type(), target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableMrtRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // uint64 interval = 3;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->interval(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableMrtRequest)
  return target;
}

size_t EnableMrtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableMrtRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // uint64 interval = 3;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->interval());
  }

  // int32 dump_type = 1;
  if (this->dump_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dump_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableMrtRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableMrtRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableMrtRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableMrtRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableMrtRequest)
    MergeFrom(*source);
  }
}

void EnableMrtRequest::MergeFrom(const EnableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
  if (from.dump_type() != 0) {
    set_dump_type(from.dump_type());
  }
}

void EnableMrtRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableMrtRequest::CopyFrom(const EnableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMrtRequest::IsInitialized() const {
  return true;
}

void EnableMrtRequest::Swap(EnableMrtRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableMrtRequest::InternalSwap(EnableMrtRequest* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  swap(interval_, other->interval_);
  swap(dump_type_, other->dump_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableMrtRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnableMrtResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableMrtResponse::EnableMrtResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEnableMrtResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableMrtResponse)
}
EnableMrtResponse::EnableMrtResponse(const EnableMrtResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableMrtResponse)
}

void EnableMrtResponse::SharedCtor() {
  _cached_size_ = 0;
}

EnableMrtResponse::~EnableMrtResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableMrtResponse)
  SharedDtor();
}

void EnableMrtResponse::SharedDtor() {
}

void EnableMrtResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableMrtResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnableMrtResponse& EnableMrtResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEnableMrtResponse();
  return *internal_default_instance();
}

EnableMrtResponse* EnableMrtResponse::New(::google::protobuf::Arena* arena) const {
  EnableMrtResponse* n = new EnableMrtResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableMrtResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableMrtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EnableMrtResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EnableMrtResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EnableMrtResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EnableMrtResponse)
  return false;
#undef DO_
}

void EnableMrtResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EnableMrtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EnableMrtResponse)
}

::google::protobuf::uint8* EnableMrtResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableMrtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableMrtResponse)
  return target;
}

size_t EnableMrtResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableMrtResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableMrtResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableMrtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableMrtResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableMrtResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableMrtResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableMrtResponse)
    MergeFrom(*source);
  }
}

void EnableMrtResponse::MergeFrom(const EnableMrtResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableMrtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnableMrtResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableMrtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableMrtResponse::CopyFrom(const EnableMrtResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableMrtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMrtResponse::IsInitialized() const {
  return true;
}

void EnableMrtResponse::Swap(EnableMrtResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableMrtResponse::InternalSwap(EnableMrtResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableMrtResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DisableMrtRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisableMrtRequest::DisableMrtRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDisableMrtRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DisableMrtRequest)
}
DisableMrtRequest::DisableMrtRequest(const DisableMrtRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DisableMrtRequest)
}

void DisableMrtRequest::SharedCtor() {
  _cached_size_ = 0;
}

DisableMrtRequest::~DisableMrtRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DisableMrtRequest)
  SharedDtor();
}

void DisableMrtRequest::SharedDtor() {
}

void DisableMrtRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableMrtRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisableMrtRequest& DisableMrtRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDisableMrtRequest();
  return *internal_default_instance();
}

DisableMrtRequest* DisableMrtRequest::New(::google::protobuf::Arena* arena) const {
  DisableMrtRequest* n = new DisableMrtRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisableMrtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DisableMrtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DisableMrtRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DisableMrtRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DisableMrtRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DisableMrtRequest)
  return false;
#undef DO_
}

void DisableMrtRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DisableMrtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DisableMrtRequest)
}

::google::protobuf::uint8* DisableMrtRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DisableMrtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DisableMrtRequest)
  return target;
}

size_t DisableMrtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DisableMrtRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableMrtRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DisableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableMrtRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisableMrtRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DisableMrtRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DisableMrtRequest)
    MergeFrom(*source);
  }
}

void DisableMrtRequest::MergeFrom(const DisableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DisableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DisableMrtRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DisableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableMrtRequest::CopyFrom(const DisableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DisableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableMrtRequest::IsInitialized() const {
  return true;
}

void DisableMrtRequest::Swap(DisableMrtRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisableMrtRequest::InternalSwap(DisableMrtRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisableMrtRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DisableMrtResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisableMrtResponse::DisableMrtResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDisableMrtResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DisableMrtResponse)
}
DisableMrtResponse::DisableMrtResponse(const DisableMrtResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DisableMrtResponse)
}

void DisableMrtResponse::SharedCtor() {
  _cached_size_ = 0;
}

DisableMrtResponse::~DisableMrtResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DisableMrtResponse)
  SharedDtor();
}

void DisableMrtResponse::SharedDtor() {
}

void DisableMrtResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableMrtResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisableMrtResponse& DisableMrtResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDisableMrtResponse();
  return *internal_default_instance();
}

DisableMrtResponse* DisableMrtResponse::New(::google::protobuf::Arena* arena) const {
  DisableMrtResponse* n = new DisableMrtResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisableMrtResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DisableMrtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DisableMrtResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DisableMrtResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DisableMrtResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DisableMrtResponse)
  return false;
#undef DO_
}

void DisableMrtResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DisableMrtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DisableMrtResponse)
}

::google::protobuf::uint8* DisableMrtResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DisableMrtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DisableMrtResponse)
  return target;
}

size_t DisableMrtResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DisableMrtResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableMrtResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DisableMrtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableMrtResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisableMrtResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DisableMrtResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DisableMrtResponse)
    MergeFrom(*source);
  }
}

void DisableMrtResponse::MergeFrom(const DisableMrtResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DisableMrtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DisableMrtResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DisableMrtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableMrtResponse::CopyFrom(const DisableMrtResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DisableMrtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableMrtResponse::IsInitialized() const {
  return true;
}

void DisableMrtResponse::Swap(DisableMrtResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisableMrtResponse::InternalSwap(DisableMrtResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisableMrtResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InjectMrtRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InjectMrtRequest::kResourceFieldNumber;
const int InjectMrtRequest::kVrfIdFieldNumber;
const int InjectMrtRequest::kPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InjectMrtRequest::InjectMrtRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsInjectMrtRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.InjectMrtRequest)
}
InjectMrtRequest::InjectMrtRequest(const InjectMrtRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      paths_(from.paths_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vrf_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vrf_id().size() > 0) {
    vrf_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  resource_ = from.resource_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.InjectMrtRequest)
}

void InjectMrtRequest::SharedCtor() {
  vrf_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_ = 0;
  _cached_size_ = 0;
}

InjectMrtRequest::~InjectMrtRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.InjectMrtRequest)
  SharedDtor();
}

void InjectMrtRequest::SharedDtor() {
  vrf_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InjectMrtRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InjectMrtRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InjectMrtRequest& InjectMrtRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsInjectMrtRequest();
  return *internal_default_instance();
}

InjectMrtRequest* InjectMrtRequest::New(::google::protobuf::Arena* arena) const {
  InjectMrtRequest* n = new InjectMrtRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InjectMrtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.InjectMrtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  vrf_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_ = 0;
  _internal_metadata_.Clear();
}

bool InjectMrtRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.InjectMrtRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Resource resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vrf_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vrf_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vrf_id().data(), static_cast<int>(this->vrf_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.InjectMrtRequest.vrf_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.Path paths = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.InjectMrtRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.InjectMrtRequest)
  return false;
#undef DO_
}

void InjectMrtRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.InjectMrtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource(), output);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrf_id().data(), static_cast<int>(this->vrf_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.InjectMrtRequest.vrf_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vrf_id(), output);
  }

  // repeated .gobgpapi.Path paths = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->paths(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.InjectMrtRequest)
}

::google::protobuf::uint8* InjectMrtRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.InjectMrtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource(), target);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrf_id().data(), static_cast<int>(this->vrf_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.InjectMrtRequest.vrf_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vrf_id(), target);
  }

  // repeated .gobgpapi.Path paths = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->paths(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.InjectMrtRequest)
  return target;
}

size_t InjectMrtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.InjectMrtRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Path paths = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->paths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->paths(static_cast<int>(i)));
    }
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vrf_id());
  }

  // .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InjectMrtRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.InjectMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InjectMrtRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InjectMrtRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.InjectMrtRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.InjectMrtRequest)
    MergeFrom(*source);
  }
}

void InjectMrtRequest::MergeFrom(const InjectMrtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.InjectMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.vrf_id().size() > 0) {

    vrf_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
}

void InjectMrtRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.InjectMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InjectMrtRequest::CopyFrom(const InjectMrtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.InjectMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InjectMrtRequest::IsInitialized() const {
  return true;
}

void InjectMrtRequest::Swap(InjectMrtRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InjectMrtRequest::InternalSwap(InjectMrtRequest* other) {
  using std::swap;
  paths_.InternalSwap(&other->paths_);
  vrf_id_.Swap(&other->vrf_id_);
  swap(resource_, other->resource_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InjectMrtRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InjectMrtResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InjectMrtResponse::InjectMrtResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsInjectMrtResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.InjectMrtResponse)
}
InjectMrtResponse::InjectMrtResponse(const InjectMrtResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.InjectMrtResponse)
}

void InjectMrtResponse::SharedCtor() {
  _cached_size_ = 0;
}

InjectMrtResponse::~InjectMrtResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.InjectMrtResponse)
  SharedDtor();
}

void InjectMrtResponse::SharedDtor() {
}

void InjectMrtResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InjectMrtResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InjectMrtResponse& InjectMrtResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsInjectMrtResponse();
  return *internal_default_instance();
}

InjectMrtResponse* InjectMrtResponse::New(::google::protobuf::Arena* arena) const {
  InjectMrtResponse* n = new InjectMrtResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InjectMrtResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.InjectMrtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool InjectMrtResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.InjectMrtResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.InjectMrtResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.InjectMrtResponse)
  return false;
#undef DO_
}

void InjectMrtResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.InjectMrtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.InjectMrtResponse)
}

::google::protobuf::uint8* InjectMrtResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.InjectMrtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.InjectMrtResponse)
  return target;
}

size_t InjectMrtResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.InjectMrtResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InjectMrtResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.InjectMrtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InjectMrtResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InjectMrtResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.InjectMrtResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.InjectMrtResponse)
    MergeFrom(*source);
  }
}

void InjectMrtResponse::MergeFrom(const InjectMrtResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.InjectMrtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InjectMrtResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.InjectMrtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InjectMrtResponse::CopyFrom(const InjectMrtResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.InjectMrtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InjectMrtResponse::IsInitialized() const {
  return true;
}

void InjectMrtResponse::Swap(InjectMrtResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InjectMrtResponse::InternalSwap(InjectMrtResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InjectMrtResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddBmpRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddBmpRequest::kAddressFieldNumber;
const int AddBmpRequest::kPortFieldNumber;
const int AddBmpRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddBmpRequest::AddBmpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddBmpRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddBmpRequest)
}
AddBmpRequest::AddBmpRequest(const AddBmpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&port_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddBmpRequest)
}

void AddBmpRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&port_)) + sizeof(type_));
  _cached_size_ = 0;
}

AddBmpRequest::~AddBmpRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddBmpRequest)
  SharedDtor();
}

void AddBmpRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddBmpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBmpRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddBmpRequest& AddBmpRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddBmpRequest();
  return *internal_default_instance();
}

AddBmpRequest* AddBmpRequest::New(::google::protobuf::Arena* arena) const {
  AddBmpRequest* n = new AddBmpRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddBmpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddBmpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&port_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool AddBmpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddBmpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.AddBmpRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.AddBmpRequest.MonitoringPolicy type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::AddBmpRequest_MonitoringPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddBmpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddBmpRequest)
  return false;
#undef DO_
}

void AddBmpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddBmpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddBmpRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // .gobgpapi.AddBmpRequest.MonitoringPolicy type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddBmpRequest)
}

::google::protobuf::uint8* AddBmpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddBmpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddBmpRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // .gobgpapi.AddBmpRequest.MonitoringPolicy type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddBmpRequest)
  return target;
}

size_t AddBmpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddBmpRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // .gobgpapi.AddBmpRequest.MonitoringPolicy type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBmpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBmpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddBmpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddBmpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddBmpRequest)
    MergeFrom(*source);
  }
}

void AddBmpRequest::MergeFrom(const AddBmpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AddBmpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBmpRequest::CopyFrom(const AddBmpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBmpRequest::IsInitialized() const {
  return true;
}

void AddBmpRequest::Swap(AddBmpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddBmpRequest::InternalSwap(AddBmpRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(port_, other->port_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddBmpRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddBmpResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddBmpResponse::AddBmpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddBmpResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddBmpResponse)
}
AddBmpResponse::AddBmpResponse(const AddBmpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddBmpResponse)
}

void AddBmpResponse::SharedCtor() {
  _cached_size_ = 0;
}

AddBmpResponse::~AddBmpResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddBmpResponse)
  SharedDtor();
}

void AddBmpResponse::SharedDtor() {
}

void AddBmpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBmpResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddBmpResponse& AddBmpResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddBmpResponse();
  return *internal_default_instance();
}

AddBmpResponse* AddBmpResponse::New(::google::protobuf::Arena* arena) const {
  AddBmpResponse* n = new AddBmpResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddBmpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddBmpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AddBmpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddBmpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddBmpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddBmpResponse)
  return false;
#undef DO_
}

void AddBmpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddBmpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddBmpResponse)
}

::google::protobuf::uint8* AddBmpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddBmpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddBmpResponse)
  return target;
}

size_t AddBmpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddBmpResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBmpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddBmpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBmpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddBmpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddBmpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddBmpResponse)
    MergeFrom(*source);
  }
}

void AddBmpResponse::MergeFrom(const AddBmpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddBmpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddBmpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddBmpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBmpResponse::CopyFrom(const AddBmpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddBmpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBmpResponse::IsInitialized() const {
  return true;
}

void AddBmpResponse::Swap(AddBmpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddBmpResponse::InternalSwap(AddBmpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddBmpResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteBmpRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteBmpRequest::kAddressFieldNumber;
const int DeleteBmpRequest::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteBmpRequest::DeleteBmpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteBmpRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteBmpRequest)
}
DeleteBmpRequest::DeleteBmpRequest(const DeleteBmpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteBmpRequest)
}

void DeleteBmpRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _cached_size_ = 0;
}

DeleteBmpRequest::~DeleteBmpRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteBmpRequest)
  SharedDtor();
}

void DeleteBmpRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteBmpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteBmpRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteBmpRequest& DeleteBmpRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteBmpRequest();
  return *internal_default_instance();
}

DeleteBmpRequest* DeleteBmpRequest::New(::google::protobuf::Arena* arena) const {
  DeleteBmpRequest* n = new DeleteBmpRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteBmpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteBmpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

bool DeleteBmpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteBmpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DeleteBmpRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteBmpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteBmpRequest)
  return false;
#undef DO_
}

void DeleteBmpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteBmpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeleteBmpRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteBmpRequest)
}

::google::protobuf::uint8* DeleteBmpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteBmpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeleteBmpRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteBmpRequest)
  return target;
}

size_t DeleteBmpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteBmpRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBmpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteBmpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteBmpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteBmpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteBmpRequest)
    MergeFrom(*source);
  }
}

void DeleteBmpRequest::MergeFrom(const DeleteBmpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void DeleteBmpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBmpRequest::CopyFrom(const DeleteBmpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBmpRequest::IsInitialized() const {
  return true;
}

void DeleteBmpRequest::Swap(DeleteBmpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteBmpRequest::InternalSwap(DeleteBmpRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteBmpRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteBmpResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteBmpResponse::DeleteBmpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteBmpResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteBmpResponse)
}
DeleteBmpResponse::DeleteBmpResponse(const DeleteBmpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteBmpResponse)
}

void DeleteBmpResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteBmpResponse::~DeleteBmpResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteBmpResponse)
  SharedDtor();
}

void DeleteBmpResponse::SharedDtor() {
}

void DeleteBmpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteBmpResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteBmpResponse& DeleteBmpResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteBmpResponse();
  return *internal_default_instance();
}

DeleteBmpResponse* DeleteBmpResponse::New(::google::protobuf::Arena* arena) const {
  DeleteBmpResponse* n = new DeleteBmpResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteBmpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteBmpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeleteBmpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteBmpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteBmpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteBmpResponse)
  return false;
#undef DO_
}

void DeleteBmpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteBmpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteBmpResponse)
}

::google::protobuf::uint8* DeleteBmpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteBmpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteBmpResponse)
  return target;
}

size_t DeleteBmpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteBmpResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBmpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteBmpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteBmpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteBmpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteBmpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteBmpResponse)
    MergeFrom(*source);
  }
}

void DeleteBmpResponse::MergeFrom(const DeleteBmpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteBmpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteBmpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteBmpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBmpResponse::CopyFrom(const DeleteBmpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteBmpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBmpResponse::IsInitialized() const {
  return true;
}

void DeleteBmpResponse::Swap(DeleteBmpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteBmpResponse::InternalSwap(DeleteBmpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteBmpResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MonitorRibRequest::InitAsDefaultInstance() {
  ::gobgpapi::_MonitorRibRequest_default_instance_._instance.get_mutable()->table_ = const_cast< ::gobgpapi::Table*>(
      ::gobgpapi::Table::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonitorRibRequest::kTableFieldNumber;
const int MonitorRibRequest::kCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonitorRibRequest::MonitorRibRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsMonitorRibRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MonitorRibRequest)
}
MonitorRibRequest::MonitorRibRequest(const MonitorRibRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table()) {
    table_ = new ::gobgpapi::Table(*from.table_);
  } else {
    table_ = NULL;
  }
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MonitorRibRequest)
}

void MonitorRibRequest::SharedCtor() {
  ::memset(&table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&table_)) + sizeof(current_));
  _cached_size_ = 0;
}

MonitorRibRequest::~MonitorRibRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.MonitorRibRequest)
  SharedDtor();
}

void MonitorRibRequest::SharedDtor() {
  if (this != internal_default_instance()) delete table_;
}

void MonitorRibRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorRibRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MonitorRibRequest& MonitorRibRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsMonitorRibRequest();
  return *internal_default_instance();
}

MonitorRibRequest* MonitorRibRequest::New(::google::protobuf::Arena* arena) const {
  MonitorRibRequest* n = new MonitorRibRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MonitorRibRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MonitorRibRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
  current_ = false;
  _internal_metadata_.Clear();
}

bool MonitorRibRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MonitorRibRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Table table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool current = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MonitorRibRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MonitorRibRequest)
  return false;
#undef DO_
}

void MonitorRibRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MonitorRibRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Table table = 1;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_, output);
  }

  // bool current = 2;
  if (this->current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->current(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.MonitorRibRequest)
}

::google::protobuf::uint8* MonitorRibRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MonitorRibRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Table table = 1;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->table_, deterministic, target);
  }

  // bool current = 2;
  if (this->current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->current(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MonitorRibRequest)
  return target;
}

size_t MonitorRibRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MonitorRibRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Table table = 1;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->table_);
  }

  // bool current = 2;
  if (this->current() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorRibRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MonitorRibRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorRibRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MonitorRibRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MonitorRibRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MonitorRibRequest)
    MergeFrom(*source);
  }
}

void MonitorRibRequest::MergeFrom(const MonitorRibRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MonitorRibRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table()) {
    mutable_table()->::gobgpapi::Table::MergeFrom(from.table());
  }
  if (from.current() != 0) {
    set_current(from.current());
  }
}

void MonitorRibRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MonitorRibRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorRibRequest::CopyFrom(const MonitorRibRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MonitorRibRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorRibRequest::IsInitialized() const {
  return true;
}

void MonitorRibRequest::Swap(MonitorRibRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonitorRibRequest::InternalSwap(MonitorRibRequest* other) {
  using std::swap;
  swap(table_, other->table_);
  swap(current_, other->current_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MonitorRibRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPKIConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPKIConf::kAddressFieldNumber;
const int RPKIConf::kRemotePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPKIConf::RPKIConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRPKIConf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RPKIConf)
}
RPKIConf::RPKIConf(const RPKIConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  remote_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_port().size() > 0) {
    remote_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_port_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RPKIConf)
}

void RPKIConf::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RPKIConf::~RPKIConf() {
  // @@protoc_insertion_point(destructor:gobgpapi.RPKIConf)
  SharedDtor();
}

void RPKIConf::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPKIConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPKIConf::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPKIConf& RPKIConf::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRPKIConf();
  return *internal_default_instance();
}

RPKIConf* RPKIConf::New(::google::protobuf::Arena* arena) const {
  RPKIConf* n = new RPKIConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPKIConf::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RPKIConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RPKIConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RPKIConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.RPKIConf.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_port().data(), static_cast<int>(this->remote_port().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.RPKIConf.remote_port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RPKIConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RPKIConf)
  return false;
#undef DO_
}

void RPKIConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RPKIConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RPKIConf.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string remote_port = 2;
  if (this->remote_port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_port().data(), static_cast<int>(this->remote_port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RPKIConf.remote_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->remote_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RPKIConf)
}

::google::protobuf::uint8* RPKIConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RPKIConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RPKIConf.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string remote_port = 2;
  if (this->remote_port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_port().data(), static_cast<int>(this->remote_port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RPKIConf.remote_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->remote_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RPKIConf)
  return target;
}

size_t RPKIConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RPKIConf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string remote_port = 2;
  if (this->remote_port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPKIConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RPKIConf)
  GOOGLE_DCHECK_NE(&from, this);
  const RPKIConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPKIConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RPKIConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RPKIConf)
    MergeFrom(*source);
  }
}

void RPKIConf::MergeFrom(const RPKIConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RPKIConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.remote_port().size() > 0) {

    remote_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_port_);
  }
}

void RPKIConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RPKIConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKIConf::CopyFrom(const RPKIConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RPKIConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKIConf::IsInitialized() const {
  return true;
}

void RPKIConf::Swap(RPKIConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPKIConf::InternalSwap(RPKIConf* other) {
  using std::swap;
  address_.Swap(&other->address_);
  remote_port_.Swap(&other->remote_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPKIConf::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPKIState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPKIState::kUptimeFieldNumber;
const int RPKIState::kDowntimeFieldNumber;
const int RPKIState::kUpFieldNumber;
const int RPKIState::kRecordIpv4FieldNumber;
const int RPKIState::kRecordIpv6FieldNumber;
const int RPKIState::kPrefixIpv4FieldNumber;
const int RPKIState::kPrefixIpv6FieldNumber;
const int RPKIState::kSerialFieldNumber;
const int RPKIState::kReceivedIpv4FieldNumber;
const int RPKIState::kReceivedIpv6FieldNumber;
const int RPKIState::kSerialNotifyFieldNumber;
const int RPKIState::kCacheResetFieldNumber;
const int RPKIState::kCacheResponseFieldNumber;
const int RPKIState::kEndOfDataFieldNumber;
const int RPKIState::kErrorFieldNumber;
const int RPKIState::kSerialQueryFieldNumber;
const int RPKIState::kResetQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPKIState::RPKIState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRPKIState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RPKIState)
}
RPKIState::RPKIState(const RPKIState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uptime_, &from.uptime_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_query_) -
    reinterpret_cast<char*>(&uptime_)) + sizeof(reset_query_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RPKIState)
}

void RPKIState::SharedCtor() {
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_query_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(reset_query_));
  _cached_size_ = 0;
}

RPKIState::~RPKIState() {
  // @@protoc_insertion_point(destructor:gobgpapi.RPKIState)
  SharedDtor();
}

void RPKIState::SharedDtor() {
}

void RPKIState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPKIState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPKIState& RPKIState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRPKIState();
  return *internal_default_instance();
}

RPKIState* RPKIState::New(::google::protobuf::Arena* arena) const {
  RPKIState* n = new RPKIState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPKIState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RPKIState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_query_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(reset_query_));
  _internal_metadata_.Clear();
}

bool RPKIState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RPKIState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 uptime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 downtime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &downtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool up = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 record_ipv4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_ipv4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 record_ipv6 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_ipv6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prefix_ipv4 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefix_ipv4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prefix_ipv6 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefix_ipv6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 serial = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 received_ipv4 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &received_ipv4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 received_ipv6 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &received_ipv6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 serial_notify = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_notify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cache_reset = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cache_response = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end_of_data = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_of_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 error = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 serial_query = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 reset_query = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reset_query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RPKIState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RPKIState)
  return false;
#undef DO_
}

void RPKIState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RPKIState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uptime = 1;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uptime(), output);
  }

  // int64 downtime = 2;
  if (this->downtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->downtime(), output);
  }

  // bool up = 3;
  if (this->up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->up(), output);
  }

  // uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->record_ipv4(), output);
  }

  // uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->record_ipv6(), output);
  }

  // uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prefix_ipv4(), output);
  }

  // uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->prefix_ipv6(), output);
  }

  // uint32 serial = 8;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->serial(), output);
  }

  // int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->received_ipv4(), output);
  }

  // int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->received_ipv6(), output);
  }

  // int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->serial_notify(), output);
  }

  // int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->cache_reset(), output);
  }

  // int64 cache_response = 13;
  if (this->cache_response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->cache_response(), output);
  }

  // int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->end_of_data(), output);
  }

  // int64 error = 15;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->error(), output);
  }

  // int64 serial_query = 16;
  if (this->serial_query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->serial_query(), output);
  }

  // int64 reset_query = 17;
  if (this->reset_query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->reset_query(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RPKIState)
}

::google::protobuf::uint8* RPKIState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RPKIState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uptime = 1;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uptime(), target);
  }

  // int64 downtime = 2;
  if (this->downtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->downtime(), target);
  }

  // bool up = 3;
  if (this->up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->up(), target);
  }

  // uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->record_ipv4(), target);
  }

  // uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->record_ipv6(), target);
  }

  // uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prefix_ipv4(), target);
  }

  // uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->prefix_ipv6(), target);
  }

  // uint32 serial = 8;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->serial(), target);
  }

  // int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->received_ipv4(), target);
  }

  // int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->received_ipv6(), target);
  }

  // int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->serial_notify(), target);
  }

  // int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->cache_reset(), target);
  }

  // int64 cache_response = 13;
  if (this->cache_response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->cache_response(), target);
  }

  // int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->end_of_data(), target);
  }

  // int64 error = 15;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->error(), target);
  }

  // int64 serial_query = 16;
  if (this->serial_query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->serial_query(), target);
  }

  // int64 reset_query = 17;
  if (this->reset_query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->reset_query(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RPKIState)
  return target;
}

size_t RPKIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RPKIState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 uptime = 1;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uptime());
  }

  // int64 downtime = 2;
  if (this->downtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->downtime());
  }

  // bool up = 3;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->record_ipv4());
  }

  // uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->record_ipv6());
  }

  // uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefix_ipv4());
  }

  // uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefix_ipv6());
  }

  // uint32 serial = 8;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serial());
  }

  // int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->received_ipv4());
  }

  // int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->received_ipv6());
  }

  // int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serial_notify());
  }

  // int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cache_reset());
  }

  // int64 cache_response = 13;
  if (this->cache_response() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cache_response());
  }

  // int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_of_data());
  }

  // int64 error = 15;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error());
  }

  // int64 serial_query = 16;
  if (this->serial_query() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serial_query());
  }

  // int64 reset_query = 17;
  if (this->reset_query() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->reset_query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPKIState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RPKIState)
  GOOGLE_DCHECK_NE(&from, this);
  const RPKIState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPKIState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RPKIState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RPKIState)
    MergeFrom(*source);
  }
}

void RPKIState::MergeFrom(const RPKIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RPKIState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.downtime() != 0) {
    set_downtime(from.downtime());
  }
  if (from.up() != 0) {
    set_up(from.up());
  }
  if (from.record_ipv4() != 0) {
    set_record_ipv4(from.record_ipv4());
  }
  if (from.record_ipv6() != 0) {
    set_record_ipv6(from.record_ipv6());
  }
  if (from.prefix_ipv4() != 0) {
    set_prefix_ipv4(from.prefix_ipv4());
  }
  if (from.prefix_ipv6() != 0) {
    set_prefix_ipv6(from.prefix_ipv6());
  }
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
  if (from.received_ipv4() != 0) {
    set_received_ipv4(from.received_ipv4());
  }
  if (from.received_ipv6() != 0) {
    set_received_ipv6(from.received_ipv6());
  }
  if (from.serial_notify() != 0) {
    set_serial_notify(from.serial_notify());
  }
  if (from.cache_reset() != 0) {
    set_cache_reset(from.cache_reset());
  }
  if (from.cache_response() != 0) {
    set_cache_response(from.cache_response());
  }
  if (from.end_of_data() != 0) {
    set_end_of_data(from.end_of_data());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.serial_query() != 0) {
    set_serial_query(from.serial_query());
  }
  if (from.reset_query() != 0) {
    set_reset_query(from.reset_query());
  }
}

void RPKIState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RPKIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKIState::CopyFrom(const RPKIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RPKIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKIState::IsInitialized() const {
  return true;
}

void RPKIState::Swap(RPKIState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPKIState::InternalSwap(RPKIState* other) {
  using std::swap;
  swap(uptime_, other->uptime_);
  swap(downtime_, other->downtime_);
  swap(up_, other->up_);
  swap(record_ipv4_, other->record_ipv4_);
  swap(record_ipv6_, other->record_ipv6_);
  swap(prefix_ipv4_, other->prefix_ipv4_);
  swap(prefix_ipv6_, other->prefix_ipv6_);
  swap(serial_, other->serial_);
  swap(received_ipv4_, other->received_ipv4_);
  swap(received_ipv6_, other->received_ipv6_);
  swap(serial_notify_, other->serial_notify_);
  swap(cache_reset_, other->cache_reset_);
  swap(cache_response_, other->cache_response_);
  swap(end_of_data_, other->end_of_data_);
  swap(error_, other->error_);
  swap(serial_query_, other->serial_query_);
  swap(reset_query_, other->reset_query_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPKIState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rpki::InitAsDefaultInstance() {
  ::gobgpapi::_Rpki_default_instance_._instance.get_mutable()->conf_ = const_cast< ::gobgpapi::RPKIConf*>(
      ::gobgpapi::RPKIConf::internal_default_instance());
  ::gobgpapi::_Rpki_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::RPKIState*>(
      ::gobgpapi::RPKIState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rpki::kConfFieldNumber;
const int Rpki::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rpki::Rpki()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRpki();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Rpki)
}
Rpki::Rpki(const Rpki& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conf()) {
    conf_ = new ::gobgpapi::RPKIConf(*from.conf_);
  } else {
    conf_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::RPKIState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Rpki)
}

void Rpki::SharedCtor() {
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(state_));
  _cached_size_ = 0;
}

Rpki::~Rpki() {
  // @@protoc_insertion_point(destructor:gobgpapi.Rpki)
  SharedDtor();
}

void Rpki::SharedDtor() {
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete state_;
}

void Rpki::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rpki::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rpki& Rpki::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRpki();
  return *internal_default_instance();
}

Rpki* Rpki::New(::google::protobuf::Arena* arena) const {
  Rpki* n = new Rpki;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rpki::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Rpki)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && conf_ != NULL) {
    delete conf_;
  }
  conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Rpki::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Rpki)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.RPKIConf conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RPKIState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Rpki)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Rpki)
  return false;
#undef DO_
}

void Rpki::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Rpki)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RPKIConf conf = 1;
  if (this->has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conf_, output);
  }

  // .gobgpapi.RPKIState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Rpki)
}

::google::protobuf::uint8* Rpki::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Rpki)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RPKIConf conf = 1;
  if (this->has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->conf_, deterministic, target);
  }

  // .gobgpapi.RPKIState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Rpki)
  return target;
}

size_t Rpki::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Rpki)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.RPKIConf conf = 1;
  if (this->has_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conf_);
  }

  // .gobgpapi.RPKIState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rpki::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Rpki)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpki* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rpki>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Rpki)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Rpki)
    MergeFrom(*source);
  }
}

void Rpki::MergeFrom(const Rpki& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Rpki)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conf()) {
    mutable_conf()->::gobgpapi::RPKIConf::MergeFrom(from.conf());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::RPKIState::MergeFrom(from.state());
  }
}

void Rpki::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Rpki)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpki::CopyFrom(const Rpki& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Rpki)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpki::IsInitialized() const {
  return true;
}

void Rpki::Swap(Rpki* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpki::InternalSwap(Rpki* other) {
  using std::swap;
  swap(conf_, other->conf_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rpki::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRpkiRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRpkiRequest::kFamilyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRpkiRequest::GetRpkiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetRpkiRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetRpkiRequest)
}
GetRpkiRequest::GetRpkiRequest(const GetRpkiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_ = from.family_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetRpkiRequest)
}

void GetRpkiRequest::SharedCtor() {
  family_ = 0u;
  _cached_size_ = 0;
}

GetRpkiRequest::~GetRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetRpkiRequest)
  SharedDtor();
}

void GetRpkiRequest::SharedDtor() {
}

void GetRpkiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRpkiRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRpkiRequest& GetRpkiRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetRpkiRequest();
  return *internal_default_instance();
}

GetRpkiRequest* GetRpkiRequest::New(::google::protobuf::Arena* arena) const {
  GetRpkiRequest* n = new GetRpkiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  family_ = 0u;
  _internal_metadata_.Clear();
}

bool GetRpkiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetRpkiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 family = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetRpkiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetRpkiRequest)
  return false;
#undef DO_
}

void GetRpkiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetRpkiRequest)
}

::google::protobuf::uint8* GetRpkiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetRpkiRequest)
  return target;
}

size_t GetRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetRpkiRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 family = 1;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRpkiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRpkiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRpkiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetRpkiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetRpkiRequest)
    MergeFrom(*source);
  }
}

void GetRpkiRequest::MergeFrom(const GetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.family() != 0) {
    set_family(from.family());
  }
}

void GetRpkiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRpkiRequest::CopyFrom(const GetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRpkiRequest::IsInitialized() const {
  return true;
}

void GetRpkiRequest::Swap(GetRpkiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRpkiRequest::InternalSwap(GetRpkiRequest* other) {
  using std::swap;
  swap(family_, other->family_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRpkiRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRpkiResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRpkiResponse::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRpkiResponse::GetRpkiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetRpkiResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetRpkiResponse)
}
GetRpkiResponse::GetRpkiResponse(const GetRpkiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      servers_(from.servers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetRpkiResponse)
}

void GetRpkiResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetRpkiResponse::~GetRpkiResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetRpkiResponse)
  SharedDtor();
}

void GetRpkiResponse::SharedDtor() {
}

void GetRpkiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRpkiResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRpkiResponse& GetRpkiResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetRpkiResponse();
  return *internal_default_instance();
}

GetRpkiResponse* GetRpkiResponse::New(::google::protobuf::Arena* arena) const {
  GetRpkiResponse* n = new GetRpkiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRpkiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _internal_metadata_.Clear();
}

bool GetRpkiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetRpkiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gobgpapi.Rpki servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetRpkiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetRpkiResponse)
  return false;
#undef DO_
}

void GetRpkiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Rpki servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetRpkiResponse)
}

::google::protobuf::uint8* GetRpkiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Rpki servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetRpkiResponse)
  return target;
}

size_t GetRpkiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetRpkiResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Rpki servers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRpkiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRpkiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRpkiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetRpkiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetRpkiResponse)
    MergeFrom(*source);
  }
}

void GetRpkiResponse::MergeFrom(const GetRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void GetRpkiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRpkiResponse::CopyFrom(const GetRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRpkiResponse::IsInitialized() const {
  return true;
}

void GetRpkiResponse::Swap(GetRpkiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRpkiResponse::InternalSwap(GetRpkiResponse* other) {
  using std::swap;
  servers_.InternalSwap(&other->servers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRpkiResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddRpkiRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRpkiRequest::kAddressFieldNumber;
const int AddRpkiRequest::kPortFieldNumber;
const int AddRpkiRequest::kLifetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRpkiRequest::AddRpkiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddRpkiRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddRpkiRequest)
}
AddRpkiRequest::AddRpkiRequest(const AddRpkiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&lifetime_, &from.lifetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&lifetime_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddRpkiRequest)
}

void AddRpkiRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&lifetime_)) + sizeof(port_));
  _cached_size_ = 0;
}

AddRpkiRequest::~AddRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddRpkiRequest)
  SharedDtor();
}

void AddRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddRpkiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRpkiRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddRpkiRequest& AddRpkiRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddRpkiRequest();
  return *internal_default_instance();
}

AddRpkiRequest* AddRpkiRequest::New(::google::protobuf::Arena* arena) const {
  AddRpkiRequest* n = new AddRpkiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&lifetime_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool AddRpkiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddRpkiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.AddRpkiRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lifetime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddRpkiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddRpkiRequest)
  return false;
#undef DO_
}

void AddRpkiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddRpkiRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // int64 lifetime = 3;
  if (this->lifetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lifetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddRpkiRequest)
}

::google::protobuf::uint8* AddRpkiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddRpkiRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // int64 lifetime = 3;
  if (this->lifetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lifetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddRpkiRequest)
  return target;
}

size_t AddRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddRpkiRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // int64 lifetime = 3;
  if (this->lifetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lifetime());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRpkiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRpkiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRpkiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddRpkiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddRpkiRequest)
    MergeFrom(*source);
  }
}

void AddRpkiRequest::MergeFrom(const AddRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.lifetime() != 0) {
    set_lifetime(from.lifetime());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void AddRpkiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRpkiRequest::CopyFrom(const AddRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRpkiRequest::IsInitialized() const {
  return true;
}

void AddRpkiRequest::Swap(AddRpkiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRpkiRequest::InternalSwap(AddRpkiRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(lifetime_, other->lifetime_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddRpkiRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddRpkiResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRpkiResponse::AddRpkiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddRpkiResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddRpkiResponse)
}
AddRpkiResponse::AddRpkiResponse(const AddRpkiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddRpkiResponse)
}

void AddRpkiResponse::SharedCtor() {
  _cached_size_ = 0;
}

AddRpkiResponse::~AddRpkiResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddRpkiResponse)
  SharedDtor();
}

void AddRpkiResponse::SharedDtor() {
}

void AddRpkiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRpkiResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddRpkiResponse& AddRpkiResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddRpkiResponse();
  return *internal_default_instance();
}

AddRpkiResponse* AddRpkiResponse::New(::google::protobuf::Arena* arena) const {
  AddRpkiResponse* n = new AddRpkiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRpkiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AddRpkiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddRpkiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddRpkiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddRpkiResponse)
  return false;
#undef DO_
}

void AddRpkiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddRpkiResponse)
}

::google::protobuf::uint8* AddRpkiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddRpkiResponse)
  return target;
}

size_t AddRpkiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddRpkiResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRpkiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRpkiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRpkiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddRpkiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddRpkiResponse)
    MergeFrom(*source);
  }
}

void AddRpkiResponse::MergeFrom(const AddRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddRpkiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRpkiResponse::CopyFrom(const AddRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRpkiResponse::IsInitialized() const {
  return true;
}

void AddRpkiResponse::Swap(AddRpkiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRpkiResponse::InternalSwap(AddRpkiResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddRpkiResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteRpkiRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRpkiRequest::kAddressFieldNumber;
const int DeleteRpkiRequest::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRpkiRequest::DeleteRpkiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteRpkiRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteRpkiRequest)
}
DeleteRpkiRequest::DeleteRpkiRequest(const DeleteRpkiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteRpkiRequest)
}

void DeleteRpkiRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _cached_size_ = 0;
}

DeleteRpkiRequest::~DeleteRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteRpkiRequest)
  SharedDtor();
}

void DeleteRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteRpkiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRpkiRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRpkiRequest& DeleteRpkiRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteRpkiRequest();
  return *internal_default_instance();
}

DeleteRpkiRequest* DeleteRpkiRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRpkiRequest* n = new DeleteRpkiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

bool DeleteRpkiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteRpkiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DeleteRpkiRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteRpkiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteRpkiRequest)
  return false;
#undef DO_
}

void DeleteRpkiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeleteRpkiRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteRpkiRequest)
}

::google::protobuf::uint8* DeleteRpkiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeleteRpkiRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteRpkiRequest)
  return target;
}

size_t DeleteRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteRpkiRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRpkiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRpkiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRpkiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteRpkiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteRpkiRequest)
    MergeFrom(*source);
  }
}

void DeleteRpkiRequest::MergeFrom(const DeleteRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void DeleteRpkiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRpkiRequest::CopyFrom(const DeleteRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRpkiRequest::IsInitialized() const {
  return true;
}

void DeleteRpkiRequest::Swap(DeleteRpkiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRpkiRequest::InternalSwap(DeleteRpkiRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRpkiRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteRpkiResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRpkiResponse::DeleteRpkiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteRpkiResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteRpkiResponse)
}
DeleteRpkiResponse::DeleteRpkiResponse(const DeleteRpkiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteRpkiResponse)
}

void DeleteRpkiResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteRpkiResponse::~DeleteRpkiResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteRpkiResponse)
  SharedDtor();
}

void DeleteRpkiResponse::SharedDtor() {
}

void DeleteRpkiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRpkiResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRpkiResponse& DeleteRpkiResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteRpkiResponse();
  return *internal_default_instance();
}

DeleteRpkiResponse* DeleteRpkiResponse::New(::google::protobuf::Arena* arena) const {
  DeleteRpkiResponse* n = new DeleteRpkiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRpkiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeleteRpkiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteRpkiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteRpkiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteRpkiResponse)
  return false;
#undef DO_
}

void DeleteRpkiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteRpkiResponse)
}

::google::protobuf::uint8* DeleteRpkiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteRpkiResponse)
  return target;
}

size_t DeleteRpkiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteRpkiResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRpkiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRpkiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRpkiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteRpkiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteRpkiResponse)
    MergeFrom(*source);
  }
}

void DeleteRpkiResponse::MergeFrom(const DeleteRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteRpkiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRpkiResponse::CopyFrom(const DeleteRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRpkiResponse::IsInitialized() const {
  return true;
}

void DeleteRpkiResponse::Swap(DeleteRpkiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRpkiResponse::InternalSwap(DeleteRpkiResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRpkiResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnableRpkiRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableRpkiRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableRpkiRequest::EnableRpkiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEnableRpkiRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableRpkiRequest)
}
EnableRpkiRequest::EnableRpkiRequest(const EnableRpkiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableRpkiRequest)
}

void EnableRpkiRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EnableRpkiRequest::~EnableRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableRpkiRequest)
  SharedDtor();
}

void EnableRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnableRpkiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableRpkiRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnableRpkiRequest& EnableRpkiRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEnableRpkiRequest();
  return *internal_default_instance();
}

EnableRpkiRequest* EnableRpkiRequest::New(::google::protobuf::Arena* arena) const {
  EnableRpkiRequest* n = new EnableRpkiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EnableRpkiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EnableRpkiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.EnableRpkiRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EnableRpkiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EnableRpkiRequest)
  return false;
#undef DO_
}

void EnableRpkiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EnableRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableRpkiRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EnableRpkiRequest)
}

::google::protobuf::uint8* EnableRpkiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableRpkiRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableRpkiRequest)
  return target;
}

size_t EnableRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableRpkiRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableRpkiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableRpkiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableRpkiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableRpkiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableRpkiRequest)
    MergeFrom(*source);
  }
}

void EnableRpkiRequest::MergeFrom(const EnableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void EnableRpkiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableRpkiRequest::CopyFrom(const EnableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableRpkiRequest::IsInitialized() const {
  return true;
}

void EnableRpkiRequest::Swap(EnableRpkiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableRpkiRequest::InternalSwap(EnableRpkiRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableRpkiRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnableRpkiResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableRpkiResponse::EnableRpkiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEnableRpkiResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableRpkiResponse)
}
EnableRpkiResponse::EnableRpkiResponse(const EnableRpkiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableRpkiResponse)
}

void EnableRpkiResponse::SharedCtor() {
  _cached_size_ = 0;
}

EnableRpkiResponse::~EnableRpkiResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableRpkiResponse)
  SharedDtor();
}

void EnableRpkiResponse::SharedDtor() {
}

void EnableRpkiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableRpkiResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnableRpkiResponse& EnableRpkiResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEnableRpkiResponse();
  return *internal_default_instance();
}

EnableRpkiResponse* EnableRpkiResponse::New(::google::protobuf::Arena* arena) const {
  EnableRpkiResponse* n = new EnableRpkiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableRpkiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EnableRpkiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EnableRpkiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EnableRpkiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EnableRpkiResponse)
  return false;
#undef DO_
}

void EnableRpkiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EnableRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EnableRpkiResponse)
}

::google::protobuf::uint8* EnableRpkiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableRpkiResponse)
  return target;
}

size_t EnableRpkiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableRpkiResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableRpkiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableRpkiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableRpkiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableRpkiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableRpkiResponse)
    MergeFrom(*source);
  }
}

void EnableRpkiResponse::MergeFrom(const EnableRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnableRpkiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableRpkiResponse::CopyFrom(const EnableRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableRpkiResponse::IsInitialized() const {
  return true;
}

void EnableRpkiResponse::Swap(EnableRpkiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableRpkiResponse::InternalSwap(EnableRpkiResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableRpkiResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DisableRpkiRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisableRpkiRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisableRpkiRequest::DisableRpkiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDisableRpkiRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DisableRpkiRequest)
}
DisableRpkiRequest::DisableRpkiRequest(const DisableRpkiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DisableRpkiRequest)
}

void DisableRpkiRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DisableRpkiRequest::~DisableRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DisableRpkiRequest)
  SharedDtor();
}

void DisableRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DisableRpkiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableRpkiRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisableRpkiRequest& DisableRpkiRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDisableRpkiRequest();
  return *internal_default_instance();
}

DisableRpkiRequest* DisableRpkiRequest::New(::google::protobuf::Arena* arena) const {
  DisableRpkiRequest* n = new DisableRpkiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisableRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DisableRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DisableRpkiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DisableRpkiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DisableRpkiRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DisableRpkiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DisableRpkiRequest)
  return false;
#undef DO_
}

void DisableRpkiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DisableRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DisableRpkiRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DisableRpkiRequest)
}

::google::protobuf::uint8* DisableRpkiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DisableRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DisableRpkiRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DisableRpkiRequest)
  return target;
}

size_t DisableRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DisableRpkiRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableRpkiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DisableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableRpkiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisableRpkiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DisableRpkiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DisableRpkiRequest)
    MergeFrom(*source);
  }
}

void DisableRpkiRequest::MergeFrom(const DisableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DisableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void DisableRpkiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DisableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableRpkiRequest::CopyFrom(const DisableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DisableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableRpkiRequest::IsInitialized() const {
  return true;
}

void DisableRpkiRequest::Swap(DisableRpkiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisableRpkiRequest::InternalSwap(DisableRpkiRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisableRpkiRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DisableRpkiResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisableRpkiResponse::DisableRpkiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDisableRpkiResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DisableRpkiResponse)
}
DisableRpkiResponse::DisableRpkiResponse(const DisableRpkiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DisableRpkiResponse)
}

void DisableRpkiResponse::SharedCtor() {
  _cached_size_ = 0;
}

DisableRpkiResponse::~DisableRpkiResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DisableRpkiResponse)
  SharedDtor();
}

void DisableRpkiResponse::SharedDtor() {
}

void DisableRpkiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableRpkiResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisableRpkiResponse& DisableRpkiResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDisableRpkiResponse();
  return *internal_default_instance();
}

DisableRpkiResponse* DisableRpkiResponse::New(::google::protobuf::Arena* arena) const {
  DisableRpkiResponse* n = new DisableRpkiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisableRpkiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DisableRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DisableRpkiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DisableRpkiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DisableRpkiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DisableRpkiResponse)
  return false;
#undef DO_
}

void DisableRpkiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DisableRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DisableRpkiResponse)
}

::google::protobuf::uint8* DisableRpkiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DisableRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DisableRpkiResponse)
  return target;
}

size_t DisableRpkiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DisableRpkiResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableRpkiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DisableRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableRpkiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisableRpkiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DisableRpkiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DisableRpkiResponse)
    MergeFrom(*source);
  }
}

void DisableRpkiResponse::MergeFrom(const DisableRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DisableRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DisableRpkiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DisableRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableRpkiResponse::CopyFrom(const DisableRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DisableRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableRpkiResponse::IsInitialized() const {
  return true;
}

void DisableRpkiResponse::Swap(DisableRpkiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisableRpkiResponse::InternalSwap(DisableRpkiResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisableRpkiResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetRpkiRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetRpkiRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetRpkiRequest::ResetRpkiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsResetRpkiRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ResetRpkiRequest)
}
ResetRpkiRequest::ResetRpkiRequest(const ResetRpkiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ResetRpkiRequest)
}

void ResetRpkiRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResetRpkiRequest::~ResetRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ResetRpkiRequest)
  SharedDtor();
}

void ResetRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResetRpkiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetRpkiRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetRpkiRequest& ResetRpkiRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsResetRpkiRequest();
  return *internal_default_instance();
}

ResetRpkiRequest* ResetRpkiRequest::New(::google::protobuf::Arena* arena) const {
  ResetRpkiRequest* n = new ResetRpkiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ResetRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ResetRpkiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ResetRpkiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ResetRpkiRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ResetRpkiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ResetRpkiRequest)
  return false;
#undef DO_
}

void ResetRpkiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ResetRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ResetRpkiRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ResetRpkiRequest)
}

::google::protobuf::uint8* ResetRpkiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ResetRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ResetRpkiRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ResetRpkiRequest)
  return target;
}

size_t ResetRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ResetRpkiRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetRpkiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ResetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRpkiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetRpkiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ResetRpkiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ResetRpkiRequest)
    MergeFrom(*source);
  }
}

void ResetRpkiRequest::MergeFrom(const ResetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ResetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void ResetRpkiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ResetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRpkiRequest::CopyFrom(const ResetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ResetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRpkiRequest::IsInitialized() const {
  return true;
}

void ResetRpkiRequest::Swap(ResetRpkiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetRpkiRequest::InternalSwap(ResetRpkiRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetRpkiRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetRpkiResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetRpkiResponse::ResetRpkiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsResetRpkiResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ResetRpkiResponse)
}
ResetRpkiResponse::ResetRpkiResponse(const ResetRpkiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ResetRpkiResponse)
}

void ResetRpkiResponse::SharedCtor() {
  _cached_size_ = 0;
}

ResetRpkiResponse::~ResetRpkiResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ResetRpkiResponse)
  SharedDtor();
}

void ResetRpkiResponse::SharedDtor() {
}

void ResetRpkiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetRpkiResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetRpkiResponse& ResetRpkiResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsResetRpkiResponse();
  return *internal_default_instance();
}

ResetRpkiResponse* ResetRpkiResponse::New(::google::protobuf::Arena* arena) const {
  ResetRpkiResponse* n = new ResetRpkiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetRpkiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ResetRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ResetRpkiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ResetRpkiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ResetRpkiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ResetRpkiResponse)
  return false;
#undef DO_
}

void ResetRpkiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ResetRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ResetRpkiResponse)
}

::google::protobuf::uint8* ResetRpkiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ResetRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ResetRpkiResponse)
  return target;
}

size_t ResetRpkiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ResetRpkiResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetRpkiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ResetRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRpkiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetRpkiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ResetRpkiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ResetRpkiResponse)
    MergeFrom(*source);
  }
}

void ResetRpkiResponse::MergeFrom(const ResetRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ResetRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetRpkiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ResetRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRpkiResponse::CopyFrom(const ResetRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ResetRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRpkiResponse::IsInitialized() const {
  return true;
}

void ResetRpkiResponse::Swap(ResetRpkiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetRpkiResponse::InternalSwap(ResetRpkiResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetRpkiResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SoftResetRpkiRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftResetRpkiRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftResetRpkiRequest::SoftResetRpkiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsSoftResetRpkiRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.SoftResetRpkiRequest)
}
SoftResetRpkiRequest::SoftResetRpkiRequest(const SoftResetRpkiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.SoftResetRpkiRequest)
}

void SoftResetRpkiRequest::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SoftResetRpkiRequest::~SoftResetRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.SoftResetRpkiRequest)
  SharedDtor();
}

void SoftResetRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SoftResetRpkiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftResetRpkiRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftResetRpkiRequest& SoftResetRpkiRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsSoftResetRpkiRequest();
  return *internal_default_instance();
}

SoftResetRpkiRequest* SoftResetRpkiRequest::New(::google::protobuf::Arena* arena) const {
  SoftResetRpkiRequest* n = new SoftResetRpkiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftResetRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.SoftResetRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SoftResetRpkiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.SoftResetRpkiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.SoftResetRpkiRequest.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.SoftResetRpkiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.SoftResetRpkiRequest)
  return false;
#undef DO_
}

void SoftResetRpkiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.SoftResetRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.SoftResetRpkiRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.SoftResetRpkiRequest)
}

::google::protobuf::uint8* SoftResetRpkiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.SoftResetRpkiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.SoftResetRpkiRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.SoftResetRpkiRequest)
  return target;
}

size_t SoftResetRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.SoftResetRpkiRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftResetRpkiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.SoftResetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftResetRpkiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftResetRpkiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.SoftResetRpkiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.SoftResetRpkiRequest)
    MergeFrom(*source);
  }
}

void SoftResetRpkiRequest::MergeFrom(const SoftResetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.SoftResetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void SoftResetRpkiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.SoftResetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftResetRpkiRequest::CopyFrom(const SoftResetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.SoftResetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftResetRpkiRequest::IsInitialized() const {
  return true;
}

void SoftResetRpkiRequest::Swap(SoftResetRpkiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftResetRpkiRequest::InternalSwap(SoftResetRpkiRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftResetRpkiRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SoftResetRpkiResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftResetRpkiResponse::SoftResetRpkiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsSoftResetRpkiResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.SoftResetRpkiResponse)
}
SoftResetRpkiResponse::SoftResetRpkiResponse(const SoftResetRpkiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.SoftResetRpkiResponse)
}

void SoftResetRpkiResponse::SharedCtor() {
  _cached_size_ = 0;
}

SoftResetRpkiResponse::~SoftResetRpkiResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.SoftResetRpkiResponse)
  SharedDtor();
}

void SoftResetRpkiResponse::SharedDtor() {
}

void SoftResetRpkiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftResetRpkiResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftResetRpkiResponse& SoftResetRpkiResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsSoftResetRpkiResponse();
  return *internal_default_instance();
}

SoftResetRpkiResponse* SoftResetRpkiResponse::New(::google::protobuf::Arena* arena) const {
  SoftResetRpkiResponse* n = new SoftResetRpkiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftResetRpkiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.SoftResetRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SoftResetRpkiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.SoftResetRpkiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.SoftResetRpkiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.SoftResetRpkiResponse)
  return false;
#undef DO_
}

void SoftResetRpkiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.SoftResetRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.SoftResetRpkiResponse)
}

::google::protobuf::uint8* SoftResetRpkiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.SoftResetRpkiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.SoftResetRpkiResponse)
  return target;
}

size_t SoftResetRpkiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.SoftResetRpkiResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftResetRpkiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.SoftResetRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftResetRpkiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftResetRpkiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.SoftResetRpkiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.SoftResetRpkiResponse)
    MergeFrom(*source);
  }
}

void SoftResetRpkiResponse::MergeFrom(const SoftResetRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.SoftResetRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SoftResetRpkiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.SoftResetRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftResetRpkiResponse::CopyFrom(const SoftResetRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.SoftResetRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftResetRpkiResponse::IsInitialized() const {
  return true;
}

void SoftResetRpkiResponse::Swap(SoftResetRpkiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftResetRpkiResponse::InternalSwap(SoftResetRpkiResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftResetRpkiResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnableZebraRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableZebraRequest::kUrlFieldNumber;
const int EnableZebraRequest::kRouteTypesFieldNumber;
const int EnableZebraRequest::kVersionFieldNumber;
const int EnableZebraRequest::kNexthopTriggerEnableFieldNumber;
const int EnableZebraRequest::kNexthopTriggerDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableZebraRequest::EnableZebraRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEnableZebraRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableZebraRequest)
}
EnableZebraRequest::EnableZebraRequest(const EnableZebraRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      route_types_(from.route_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&nexthop_trigger_delay_) -
    reinterpret_cast<char*>(&version_)) + sizeof(nexthop_trigger_delay_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableZebraRequest)
}

void EnableZebraRequest::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nexthop_trigger_delay_) -
      reinterpret_cast<char*>(&version_)) + sizeof(nexthop_trigger_delay_));
  _cached_size_ = 0;
}

EnableZebraRequest::~EnableZebraRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableZebraRequest)
  SharedDtor();
}

void EnableZebraRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnableZebraRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableZebraRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnableZebraRequest& EnableZebraRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEnableZebraRequest();
  return *internal_default_instance();
}

EnableZebraRequest* EnableZebraRequest::New(::google::protobuf::Arena* arena) const {
  EnableZebraRequest* n = new EnableZebraRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableZebraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableZebraRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_types_.Clear();
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nexthop_trigger_delay_) -
      reinterpret_cast<char*>(&version_)) + sizeof(nexthop_trigger_delay_));
  _internal_metadata_.Clear();
}

bool EnableZebraRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EnableZebraRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.EnableZebraRequest.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string route_types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_route_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_types(this->route_types_size() - 1).data(),
            static_cast<int>(this->route_types(this->route_types_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.EnableZebraRequest.route_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool nexthop_trigger_enable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nexthop_trigger_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nexthop_trigger_delay = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexthop_trigger_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EnableZebraRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EnableZebraRequest)
  return false;
#undef DO_
}

void EnableZebraRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EnableZebraRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableZebraRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // repeated string route_types = 2;
  for (int i = 0, n = this->route_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_types(i).data(), static_cast<int>(this->route_types(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableZebraRequest.route_types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->route_types(i), output);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // bool nexthop_trigger_enable = 4;
  if (this->nexthop_trigger_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->nexthop_trigger_enable(), output);
  }

  // uint32 nexthop_trigger_delay = 5;
  if (this->nexthop_trigger_delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nexthop_trigger_delay(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EnableZebraRequest)
}

::google::protobuf::uint8* EnableZebraRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableZebraRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableZebraRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // repeated string route_types = 2;
  for (int i = 0, n = this->route_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_types(i).data(), static_cast<int>(this->route_types(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableZebraRequest.route_types");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->route_types(i), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  // bool nexthop_trigger_enable = 4;
  if (this->nexthop_trigger_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->nexthop_trigger_enable(), target);
  }

  // uint32 nexthop_trigger_delay = 5;
  if (this->nexthop_trigger_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nexthop_trigger_delay(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableZebraRequest)
  return target;
}

size_t EnableZebraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableZebraRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string route_types = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->route_types_size());
  for (int i = 0, n = this->route_types_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->route_types(i));
  }

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // bool nexthop_trigger_enable = 4;
  if (this->nexthop_trigger_enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 nexthop_trigger_delay = 5;
  if (this->nexthop_trigger_delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nexthop_trigger_delay());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableZebraRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableZebraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableZebraRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableZebraRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableZebraRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableZebraRequest)
    MergeFrom(*source);
  }
}

void EnableZebraRequest::MergeFrom(const EnableZebraRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableZebraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_types_.MergeFrom(from.route_types_);
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.nexthop_trigger_enable() != 0) {
    set_nexthop_trigger_enable(from.nexthop_trigger_enable());
  }
  if (from.nexthop_trigger_delay() != 0) {
    set_nexthop_trigger_delay(from.nexthop_trigger_delay());
  }
}

void EnableZebraRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableZebraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableZebraRequest::CopyFrom(const EnableZebraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableZebraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableZebraRequest::IsInitialized() const {
  return true;
}

void EnableZebraRequest::Swap(EnableZebraRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableZebraRequest::InternalSwap(EnableZebraRequest* other) {
  using std::swap;
  route_types_.InternalSwap(&other->route_types_);
  url_.Swap(&other->url_);
  swap(version_, other->version_);
  swap(nexthop_trigger_enable_, other->nexthop_trigger_enable_);
  swap(nexthop_trigger_delay_, other->nexthop_trigger_delay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableZebraRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnableZebraResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableZebraResponse::EnableZebraResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEnableZebraResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableZebraResponse)
}
EnableZebraResponse::EnableZebraResponse(const EnableZebraResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableZebraResponse)
}

void EnableZebraResponse::SharedCtor() {
  _cached_size_ = 0;
}

EnableZebraResponse::~EnableZebraResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableZebraResponse)
  SharedDtor();
}

void EnableZebraResponse::SharedDtor() {
}

void EnableZebraResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableZebraResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnableZebraResponse& EnableZebraResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEnableZebraResponse();
  return *internal_default_instance();
}

EnableZebraResponse* EnableZebraResponse::New(::google::protobuf::Arena* arena) const {
  EnableZebraResponse* n = new EnableZebraResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableZebraResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableZebraResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EnableZebraResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EnableZebraResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EnableZebraResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EnableZebraResponse)
  return false;
#undef DO_
}

void EnableZebraResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EnableZebraResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EnableZebraResponse)
}

::google::protobuf::uint8* EnableZebraResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableZebraResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableZebraResponse)
  return target;
}

size_t EnableZebraResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableZebraResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableZebraResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableZebraResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableZebraResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableZebraResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableZebraResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableZebraResponse)
    MergeFrom(*source);
  }
}

void EnableZebraResponse::MergeFrom(const EnableZebraResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableZebraResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnableZebraResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableZebraResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableZebraResponse::CopyFrom(const EnableZebraResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableZebraResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableZebraResponse::IsInitialized() const {
  return true;
}

void EnableZebraResponse::Swap(EnableZebraResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableZebraResponse::InternalSwap(EnableZebraResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableZebraResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetVrfRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVrfRequest::GetVrfRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetVrfRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetVrfRequest)
}
GetVrfRequest::GetVrfRequest(const GetVrfRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetVrfRequest)
}

void GetVrfRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetVrfRequest::~GetVrfRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetVrfRequest)
  SharedDtor();
}

void GetVrfRequest::SharedDtor() {
}

void GetVrfRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVrfRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVrfRequest& GetVrfRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetVrfRequest();
  return *internal_default_instance();
}

GetVrfRequest* GetVrfRequest::New(::google::protobuf::Arena* arena) const {
  GetVrfRequest* n = new GetVrfRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetVrfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetVrfRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetVrfRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetVrfRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetVrfRequest)
  return false;
#undef DO_
}

void GetVrfRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetVrfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetVrfRequest)
}

::google::protobuf::uint8* GetVrfRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetVrfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetVrfRequest)
  return target;
}

size_t GetVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetVrfRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVrfRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVrfRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVrfRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetVrfRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetVrfRequest)
    MergeFrom(*source);
  }
}

void GetVrfRequest::MergeFrom(const GetVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetVrfRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVrfRequest::CopyFrom(const GetVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVrfRequest::IsInitialized() const {
  return true;
}

void GetVrfRequest::Swap(GetVrfRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVrfRequest::InternalSwap(GetVrfRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVrfRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetVrfResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVrfResponse::kVrfsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVrfResponse::GetVrfResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetVrfResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetVrfResponse)
}
GetVrfResponse::GetVrfResponse(const GetVrfResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vrfs_(from.vrfs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetVrfResponse)
}

void GetVrfResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetVrfResponse::~GetVrfResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetVrfResponse)
  SharedDtor();
}

void GetVrfResponse::SharedDtor() {
}

void GetVrfResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVrfResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVrfResponse& GetVrfResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetVrfResponse();
  return *internal_default_instance();
}

GetVrfResponse* GetVrfResponse::New(::google::protobuf::Arena* arena) const {
  GetVrfResponse* n = new GetVrfResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetVrfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetVrfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfs_.Clear();
  _internal_metadata_.Clear();
}

bool GetVrfResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetVrfResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gobgpapi.Vrf vrfs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_vrfs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetVrfResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetVrfResponse)
  return false;
#undef DO_
}

void GetVrfResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetVrfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Vrf vrfs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vrfs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vrfs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetVrfResponse)
}

::google::protobuf::uint8* GetVrfResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetVrfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Vrf vrfs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vrfs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vrfs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetVrfResponse)
  return target;
}

size_t GetVrfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetVrfResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Vrf vrfs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vrfs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vrfs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVrfResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVrfResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVrfResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetVrfResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetVrfResponse)
    MergeFrom(*source);
  }
}

void GetVrfResponse::MergeFrom(const GetVrfResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vrfs_.MergeFrom(from.vrfs_);
}

void GetVrfResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVrfResponse::CopyFrom(const GetVrfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVrfResponse::IsInitialized() const {
  return true;
}

void GetVrfResponse::Swap(GetVrfResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVrfResponse::InternalSwap(GetVrfResponse* other) {
  using std::swap;
  vrfs_.InternalSwap(&other->vrfs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVrfResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddVrfRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddVrfRequest_default_instance_._instance.get_mutable()->vrf_ = const_cast< ::gobgpapi::Vrf*>(
      ::gobgpapi::Vrf::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddVrfRequest::kVrfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddVrfRequest::AddVrfRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddVrfRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddVrfRequest)
}
AddVrfRequest::AddVrfRequest(const AddVrfRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vrf()) {
    vrf_ = new ::gobgpapi::Vrf(*from.vrf_);
  } else {
    vrf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddVrfRequest)
}

void AddVrfRequest::SharedCtor() {
  vrf_ = NULL;
  _cached_size_ = 0;
}

AddVrfRequest::~AddVrfRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddVrfRequest)
  SharedDtor();
}

void AddVrfRequest::SharedDtor() {
  if (this != internal_default_instance()) delete vrf_;
}

void AddVrfRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddVrfRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddVrfRequest& AddVrfRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddVrfRequest();
  return *internal_default_instance();
}

AddVrfRequest* AddVrfRequest::New(::google::protobuf::Arena* arena) const {
  AddVrfRequest* n = new AddVrfRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddVrfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && vrf_ != NULL) {
    delete vrf_;
  }
  vrf_ = NULL;
  _internal_metadata_.Clear();
}

bool AddVrfRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddVrfRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Vrf vrf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vrf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddVrfRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddVrfRequest)
  return false;
#undef DO_
}

void AddVrfRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddVrfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->vrf_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddVrfRequest)
}

::google::protobuf::uint8* AddVrfRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddVrfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->vrf_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddVrfRequest)
  return target;
}

size_t AddVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddVrfRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vrf_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddVrfRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddVrfRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddVrfRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddVrfRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddVrfRequest)
    MergeFrom(*source);
  }
}

void AddVrfRequest::MergeFrom(const AddVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vrf()) {
    mutable_vrf()->::gobgpapi::Vrf::MergeFrom(from.vrf());
  }
}

void AddVrfRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddVrfRequest::CopyFrom(const AddVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddVrfRequest::IsInitialized() const {
  return true;
}

void AddVrfRequest::Swap(AddVrfRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddVrfRequest::InternalSwap(AddVrfRequest* other) {
  using std::swap;
  swap(vrf_, other->vrf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddVrfRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddVrfResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddVrfResponse::AddVrfResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddVrfResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddVrfResponse)
}
AddVrfResponse::AddVrfResponse(const AddVrfResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddVrfResponse)
}

void AddVrfResponse::SharedCtor() {
  _cached_size_ = 0;
}

AddVrfResponse::~AddVrfResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddVrfResponse)
  SharedDtor();
}

void AddVrfResponse::SharedDtor() {
}

void AddVrfResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddVrfResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddVrfResponse& AddVrfResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddVrfResponse();
  return *internal_default_instance();
}

AddVrfResponse* AddVrfResponse::New(::google::protobuf::Arena* arena) const {
  AddVrfResponse* n = new AddVrfResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddVrfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddVrfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AddVrfResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddVrfResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddVrfResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddVrfResponse)
  return false;
#undef DO_
}

void AddVrfResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddVrfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddVrfResponse)
}

::google::protobuf::uint8* AddVrfResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddVrfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddVrfResponse)
  return target;
}

size_t AddVrfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddVrfResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddVrfResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddVrfResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddVrfResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddVrfResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddVrfResponse)
    MergeFrom(*source);
  }
}

void AddVrfResponse::MergeFrom(const AddVrfResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddVrfResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddVrfResponse::CopyFrom(const AddVrfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddVrfResponse::IsInitialized() const {
  return true;
}

void AddVrfResponse::Swap(AddVrfResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddVrfResponse::InternalSwap(AddVrfResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddVrfResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteVrfRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeleteVrfRequest_default_instance_._instance.get_mutable()->vrf_ = const_cast< ::gobgpapi::Vrf*>(
      ::gobgpapi::Vrf::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteVrfRequest::kVrfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteVrfRequest::DeleteVrfRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteVrfRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteVrfRequest)
}
DeleteVrfRequest::DeleteVrfRequest(const DeleteVrfRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vrf()) {
    vrf_ = new ::gobgpapi::Vrf(*from.vrf_);
  } else {
    vrf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteVrfRequest)
}

void DeleteVrfRequest::SharedCtor() {
  vrf_ = NULL;
  _cached_size_ = 0;
}

DeleteVrfRequest::~DeleteVrfRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteVrfRequest)
  SharedDtor();
}

void DeleteVrfRequest::SharedDtor() {
  if (this != internal_default_instance()) delete vrf_;
}

void DeleteVrfRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteVrfRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteVrfRequest& DeleteVrfRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteVrfRequest();
  return *internal_default_instance();
}

DeleteVrfRequest* DeleteVrfRequest::New(::google::protobuf::Arena* arena) const {
  DeleteVrfRequest* n = new DeleteVrfRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteVrfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && vrf_ != NULL) {
    delete vrf_;
  }
  vrf_ = NULL;
  _internal_metadata_.Clear();
}

bool DeleteVrfRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteVrfRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Vrf vrf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vrf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteVrfRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteVrfRequest)
  return false;
#undef DO_
}

void DeleteVrfRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteVrfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->vrf_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteVrfRequest)
}

::google::protobuf::uint8* DeleteVrfRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteVrfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->vrf_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteVrfRequest)
  return target;
}

size_t DeleteVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteVrfRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vrf_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteVrfRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVrfRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteVrfRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteVrfRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteVrfRequest)
    MergeFrom(*source);
  }
}

void DeleteVrfRequest::MergeFrom(const DeleteVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vrf()) {
    mutable_vrf()->::gobgpapi::Vrf::MergeFrom(from.vrf());
  }
}

void DeleteVrfRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVrfRequest::CopyFrom(const DeleteVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVrfRequest::IsInitialized() const {
  return true;
}

void DeleteVrfRequest::Swap(DeleteVrfRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteVrfRequest::InternalSwap(DeleteVrfRequest* other) {
  using std::swap;
  swap(vrf_, other->vrf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteVrfRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteVrfResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteVrfResponse::DeleteVrfResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteVrfResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteVrfResponse)
}
DeleteVrfResponse::DeleteVrfResponse(const DeleteVrfResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteVrfResponse)
}

void DeleteVrfResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteVrfResponse::~DeleteVrfResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteVrfResponse)
  SharedDtor();
}

void DeleteVrfResponse::SharedDtor() {
}

void DeleteVrfResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteVrfResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteVrfResponse& DeleteVrfResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteVrfResponse();
  return *internal_default_instance();
}

DeleteVrfResponse* DeleteVrfResponse::New(::google::protobuf::Arena* arena) const {
  DeleteVrfResponse* n = new DeleteVrfResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteVrfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteVrfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeleteVrfResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteVrfResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteVrfResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteVrfResponse)
  return false;
#undef DO_
}

void DeleteVrfResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteVrfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteVrfResponse)
}

::google::protobuf::uint8* DeleteVrfResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteVrfResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteVrfResponse)
  return target;
}

size_t DeleteVrfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteVrfResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteVrfResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVrfResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteVrfResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteVrfResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteVrfResponse)
    MergeFrom(*source);
  }
}

void DeleteVrfResponse::MergeFrom(const DeleteVrfResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteVrfResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVrfResponse::CopyFrom(const DeleteVrfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVrfResponse::IsInitialized() const {
  return true;
}

void DeleteVrfResponse::Swap(DeleteVrfResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteVrfResponse::InternalSwap(DeleteVrfResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteVrfResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetDefinedSetRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDefinedSetRequest::kTypeFieldNumber;
const int GetDefinedSetRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDefinedSetRequest::GetDefinedSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetDefinedSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetDefinedSetRequest)
}
GetDefinedSetRequest::GetDefinedSetRequest(const GetDefinedSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetDefinedSetRequest)
}

void GetDefinedSetRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

GetDefinedSetRequest::~GetDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetDefinedSetRequest)
  SharedDtor();
}

void GetDefinedSetRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetDefinedSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDefinedSetRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDefinedSetRequest& GetDefinedSetRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetDefinedSetRequest();
  return *internal_default_instance();
}

GetDefinedSetRequest* GetDefinedSetRequest::New(::google::protobuf::Arena* arena) const {
  GetDefinedSetRequest* n = new GetDefinedSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool GetDefinedSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetDefinedSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.DefinedType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::DefinedType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.GetDefinedSetRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetDefinedSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetDefinedSetRequest)
  return false;
#undef DO_
}

void GetDefinedSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.GetDefinedSetRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetDefinedSetRequest)
}

::google::protobuf::uint8* GetDefinedSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.GetDefinedSetRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetDefinedSetRequest)
  return target;
}

size_t GetDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetDefinedSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gobgpapi.DefinedType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDefinedSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDefinedSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDefinedSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetDefinedSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetDefinedSetRequest)
    MergeFrom(*source);
  }
}

void GetDefinedSetRequest::MergeFrom(const GetDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GetDefinedSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDefinedSetRequest::CopyFrom(const GetDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDefinedSetRequest::IsInitialized() const {
  return true;
}

void GetDefinedSetRequest::Swap(GetDefinedSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDefinedSetRequest::InternalSwap(GetDefinedSetRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDefinedSetRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetDefinedSetResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDefinedSetResponse::kSetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDefinedSetResponse::GetDefinedSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetDefinedSetResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetDefinedSetResponse)
}
GetDefinedSetResponse::GetDefinedSetResponse(const GetDefinedSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sets_(from.sets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetDefinedSetResponse)
}

void GetDefinedSetResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetDefinedSetResponse::~GetDefinedSetResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetDefinedSetResponse)
  SharedDtor();
}

void GetDefinedSetResponse::SharedDtor() {
}

void GetDefinedSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDefinedSetResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDefinedSetResponse& GetDefinedSetResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetDefinedSetResponse();
  return *internal_default_instance();
}

GetDefinedSetResponse* GetDefinedSetResponse::New(::google::protobuf::Arena* arena) const {
  GetDefinedSetResponse* n = new GetDefinedSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDefinedSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sets_.Clear();
  _internal_metadata_.Clear();
}

bool GetDefinedSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetDefinedSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gobgpapi.DefinedSet sets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetDefinedSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetDefinedSetResponse)
  return false;
#undef DO_
}

void GetDefinedSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.DefinedSet sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sets(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetDefinedSetResponse)
}

::google::protobuf::uint8* GetDefinedSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.DefinedSet sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sets(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetDefinedSetResponse)
  return target;
}

size_t GetDefinedSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetDefinedSetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.DefinedSet sets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDefinedSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDefinedSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDefinedSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetDefinedSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetDefinedSetResponse)
    MergeFrom(*source);
  }
}

void GetDefinedSetResponse::MergeFrom(const GetDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sets_.MergeFrom(from.sets_);
}

void GetDefinedSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDefinedSetResponse::CopyFrom(const GetDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDefinedSetResponse::IsInitialized() const {
  return true;
}

void GetDefinedSetResponse::Swap(GetDefinedSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDefinedSetResponse::InternalSwap(GetDefinedSetResponse* other) {
  using std::swap;
  sets_.InternalSwap(&other->sets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDefinedSetResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddDefinedSetRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddDefinedSetRequest_default_instance_._instance.get_mutable()->set_ = const_cast< ::gobgpapi::DefinedSet*>(
      ::gobgpapi::DefinedSet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddDefinedSetRequest::kSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddDefinedSetRequest::AddDefinedSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddDefinedSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddDefinedSetRequest)
}
AddDefinedSetRequest::AddDefinedSetRequest(const AddDefinedSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set()) {
    set_ = new ::gobgpapi::DefinedSet(*from.set_);
  } else {
    set_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddDefinedSetRequest)
}

void AddDefinedSetRequest::SharedCtor() {
  set_ = NULL;
  _cached_size_ = 0;
}

AddDefinedSetRequest::~AddDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddDefinedSetRequest)
  SharedDtor();
}

void AddDefinedSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete set_;
}

void AddDefinedSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDefinedSetRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddDefinedSetRequest& AddDefinedSetRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddDefinedSetRequest();
  return *internal_default_instance();
}

AddDefinedSetRequest* AddDefinedSetRequest::New(::google::protobuf::Arena* arena) const {
  AddDefinedSetRequest* n = new AddDefinedSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_ != NULL) {
    delete set_;
  }
  set_ = NULL;
  _internal_metadata_.Clear();
}

bool AddDefinedSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddDefinedSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.DefinedSet set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddDefinedSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddDefinedSetRequest)
  return false;
#undef DO_
}

void AddDefinedSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet set = 1;
  if (this->has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->set_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddDefinedSetRequest)
}

::google::protobuf::uint8* AddDefinedSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet set = 1;
  if (this->has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->set_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddDefinedSetRequest)
  return target;
}

size_t AddDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddDefinedSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.DefinedSet set = 1;
  if (this->has_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDefinedSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDefinedSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddDefinedSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddDefinedSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddDefinedSetRequest)
    MergeFrom(*source);
  }
}

void AddDefinedSetRequest::MergeFrom(const AddDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set()) {
    mutable_set()->::gobgpapi::DefinedSet::MergeFrom(from.set());
  }
}

void AddDefinedSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDefinedSetRequest::CopyFrom(const AddDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDefinedSetRequest::IsInitialized() const {
  return true;
}

void AddDefinedSetRequest::Swap(AddDefinedSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddDefinedSetRequest::InternalSwap(AddDefinedSetRequest* other) {
  using std::swap;
  swap(set_, other->set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddDefinedSetRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddDefinedSetResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddDefinedSetResponse::AddDefinedSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddDefinedSetResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddDefinedSetResponse)
}
AddDefinedSetResponse::AddDefinedSetResponse(const AddDefinedSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddDefinedSetResponse)
}

void AddDefinedSetResponse::SharedCtor() {
  _cached_size_ = 0;
}

AddDefinedSetResponse::~AddDefinedSetResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddDefinedSetResponse)
  SharedDtor();
}

void AddDefinedSetResponse::SharedDtor() {
}

void AddDefinedSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDefinedSetResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddDefinedSetResponse& AddDefinedSetResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddDefinedSetResponse();
  return *internal_default_instance();
}

AddDefinedSetResponse* AddDefinedSetResponse::New(::google::protobuf::Arena* arena) const {
  AddDefinedSetResponse* n = new AddDefinedSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddDefinedSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AddDefinedSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddDefinedSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddDefinedSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddDefinedSetResponse)
  return false;
#undef DO_
}

void AddDefinedSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddDefinedSetResponse)
}

::google::protobuf::uint8* AddDefinedSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddDefinedSetResponse)
  return target;
}

size_t AddDefinedSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddDefinedSetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDefinedSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDefinedSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddDefinedSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddDefinedSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddDefinedSetResponse)
    MergeFrom(*source);
  }
}

void AddDefinedSetResponse::MergeFrom(const AddDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddDefinedSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDefinedSetResponse::CopyFrom(const AddDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDefinedSetResponse::IsInitialized() const {
  return true;
}

void AddDefinedSetResponse::Swap(AddDefinedSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddDefinedSetResponse::InternalSwap(AddDefinedSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddDefinedSetResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteDefinedSetRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeleteDefinedSetRequest_default_instance_._instance.get_mutable()->set_ = const_cast< ::gobgpapi::DefinedSet*>(
      ::gobgpapi::DefinedSet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteDefinedSetRequest::kSetFieldNumber;
const int DeleteDefinedSetRequest::kAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDefinedSetRequest::DeleteDefinedSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteDefinedSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteDefinedSetRequest)
}
DeleteDefinedSetRequest::DeleteDefinedSetRequest(const DeleteDefinedSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set()) {
    set_ = new ::gobgpapi::DefinedSet(*from.set_);
  } else {
    set_ = NULL;
  }
  all_ = from.all_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteDefinedSetRequest)
}

void DeleteDefinedSetRequest::SharedCtor() {
  ::memset(&set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&set_)) + sizeof(all_));
  _cached_size_ = 0;
}

DeleteDefinedSetRequest::~DeleteDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteDefinedSetRequest)
  SharedDtor();
}

void DeleteDefinedSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete set_;
}

void DeleteDefinedSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDefinedSetRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteDefinedSetRequest& DeleteDefinedSetRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteDefinedSetRequest();
  return *internal_default_instance();
}

DeleteDefinedSetRequest* DeleteDefinedSetRequest::New(::google::protobuf::Arena* arena) const {
  DeleteDefinedSetRequest* n = new DeleteDefinedSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_ != NULL) {
    delete set_;
  }
  set_ = NULL;
  all_ = false;
  _internal_metadata_.Clear();
}

bool DeleteDefinedSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteDefinedSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.DefinedSet set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool all = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteDefinedSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteDefinedSetRequest)
  return false;
#undef DO_
}

void DeleteDefinedSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet set = 1;
  if (this->has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->set_, output);
  }

  // bool all = 2;
  if (this->all() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->all(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteDefinedSetRequest)
}

::google::protobuf::uint8* DeleteDefinedSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet set = 1;
  if (this->has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->set_, deterministic, target);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->all(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteDefinedSetRequest)
  return target;
}

size_t DeleteDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteDefinedSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.DefinedSet set = 1;
  if (this->has_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_);
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDefinedSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDefinedSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteDefinedSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteDefinedSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteDefinedSetRequest)
    MergeFrom(*source);
  }
}

void DeleteDefinedSetRequest::MergeFrom(const DeleteDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set()) {
    mutable_set()->::gobgpapi::DefinedSet::MergeFrom(from.set());
  }
  if (from.all() != 0) {
    set_all(from.all());
  }
}

void DeleteDefinedSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDefinedSetRequest::CopyFrom(const DeleteDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDefinedSetRequest::IsInitialized() const {
  return true;
}

void DeleteDefinedSetRequest::Swap(DeleteDefinedSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteDefinedSetRequest::InternalSwap(DeleteDefinedSetRequest* other) {
  using std::swap;
  swap(set_, other->set_);
  swap(all_, other->all_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteDefinedSetRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteDefinedSetResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDefinedSetResponse::DeleteDefinedSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteDefinedSetResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteDefinedSetResponse)
}
DeleteDefinedSetResponse::DeleteDefinedSetResponse(const DeleteDefinedSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteDefinedSetResponse)
}

void DeleteDefinedSetResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteDefinedSetResponse::~DeleteDefinedSetResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteDefinedSetResponse)
  SharedDtor();
}

void DeleteDefinedSetResponse::SharedDtor() {
}

void DeleteDefinedSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDefinedSetResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteDefinedSetResponse& DeleteDefinedSetResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteDefinedSetResponse();
  return *internal_default_instance();
}

DeleteDefinedSetResponse* DeleteDefinedSetResponse::New(::google::protobuf::Arena* arena) const {
  DeleteDefinedSetResponse* n = new DeleteDefinedSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteDefinedSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeleteDefinedSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteDefinedSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteDefinedSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteDefinedSetResponse)
  return false;
#undef DO_
}

void DeleteDefinedSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteDefinedSetResponse)
}

::google::protobuf::uint8* DeleteDefinedSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteDefinedSetResponse)
  return target;
}

size_t DeleteDefinedSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteDefinedSetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDefinedSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDefinedSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteDefinedSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteDefinedSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteDefinedSetResponse)
    MergeFrom(*source);
  }
}

void DeleteDefinedSetResponse::MergeFrom(const DeleteDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteDefinedSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDefinedSetResponse::CopyFrom(const DeleteDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDefinedSetResponse::IsInitialized() const {
  return true;
}

void DeleteDefinedSetResponse::Swap(DeleteDefinedSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteDefinedSetResponse::InternalSwap(DeleteDefinedSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteDefinedSetResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplaceDefinedSetRequest::InitAsDefaultInstance() {
  ::gobgpapi::_ReplaceDefinedSetRequest_default_instance_._instance.get_mutable()->set_ = const_cast< ::gobgpapi::DefinedSet*>(
      ::gobgpapi::DefinedSet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplaceDefinedSetRequest::kSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceDefinedSetRequest::ReplaceDefinedSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsReplaceDefinedSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ReplaceDefinedSetRequest)
}
ReplaceDefinedSetRequest::ReplaceDefinedSetRequest(const ReplaceDefinedSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set()) {
    set_ = new ::gobgpapi::DefinedSet(*from.set_);
  } else {
    set_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ReplaceDefinedSetRequest)
}

void ReplaceDefinedSetRequest::SharedCtor() {
  set_ = NULL;
  _cached_size_ = 0;
}

ReplaceDefinedSetRequest::~ReplaceDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ReplaceDefinedSetRequest)
  SharedDtor();
}

void ReplaceDefinedSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete set_;
}

void ReplaceDefinedSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceDefinedSetRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplaceDefinedSetRequest& ReplaceDefinedSetRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsReplaceDefinedSetRequest();
  return *internal_default_instance();
}

ReplaceDefinedSetRequest* ReplaceDefinedSetRequest::New(::google::protobuf::Arena* arena) const {
  ReplaceDefinedSetRequest* n = new ReplaceDefinedSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplaceDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ReplaceDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_ != NULL) {
    delete set_;
  }
  set_ = NULL;
  _internal_metadata_.Clear();
}

bool ReplaceDefinedSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ReplaceDefinedSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.DefinedSet set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ReplaceDefinedSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ReplaceDefinedSetRequest)
  return false;
#undef DO_
}

void ReplaceDefinedSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ReplaceDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet set = 1;
  if (this->has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->set_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ReplaceDefinedSetRequest)
}

::google::protobuf::uint8* ReplaceDefinedSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ReplaceDefinedSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet set = 1;
  if (this->has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->set_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ReplaceDefinedSetRequest)
  return target;
}

size_t ReplaceDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ReplaceDefinedSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.DefinedSet set = 1;
  if (this->has_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceDefinedSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ReplaceDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceDefinedSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplaceDefinedSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ReplaceDefinedSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ReplaceDefinedSetRequest)
    MergeFrom(*source);
  }
}

void ReplaceDefinedSetRequest::MergeFrom(const ReplaceDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ReplaceDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set()) {
    mutable_set()->::gobgpapi::DefinedSet::MergeFrom(from.set());
  }
}

void ReplaceDefinedSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ReplaceDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceDefinedSetRequest::CopyFrom(const ReplaceDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ReplaceDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceDefinedSetRequest::IsInitialized() const {
  return true;
}

void ReplaceDefinedSetRequest::Swap(ReplaceDefinedSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceDefinedSetRequest::InternalSwap(ReplaceDefinedSetRequest* other) {
  using std::swap;
  swap(set_, other->set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplaceDefinedSetRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplaceDefinedSetResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceDefinedSetResponse::ReplaceDefinedSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsReplaceDefinedSetResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ReplaceDefinedSetResponse)
}
ReplaceDefinedSetResponse::ReplaceDefinedSetResponse(const ReplaceDefinedSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ReplaceDefinedSetResponse)
}

void ReplaceDefinedSetResponse::SharedCtor() {
  _cached_size_ = 0;
}

ReplaceDefinedSetResponse::~ReplaceDefinedSetResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ReplaceDefinedSetResponse)
  SharedDtor();
}

void ReplaceDefinedSetResponse::SharedDtor() {
}

void ReplaceDefinedSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceDefinedSetResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplaceDefinedSetResponse& ReplaceDefinedSetResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsReplaceDefinedSetResponse();
  return *internal_default_instance();
}

ReplaceDefinedSetResponse* ReplaceDefinedSetResponse::New(::google::protobuf::Arena* arena) const {
  ReplaceDefinedSetResponse* n = new ReplaceDefinedSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplaceDefinedSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ReplaceDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReplaceDefinedSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ReplaceDefinedSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ReplaceDefinedSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ReplaceDefinedSetResponse)
  return false;
#undef DO_
}

void ReplaceDefinedSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ReplaceDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ReplaceDefinedSetResponse)
}

::google::protobuf::uint8* ReplaceDefinedSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ReplaceDefinedSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ReplaceDefinedSetResponse)
  return target;
}

size_t ReplaceDefinedSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ReplaceDefinedSetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceDefinedSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ReplaceDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceDefinedSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplaceDefinedSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ReplaceDefinedSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ReplaceDefinedSetResponse)
    MergeFrom(*source);
  }
}

void ReplaceDefinedSetResponse::MergeFrom(const ReplaceDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ReplaceDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReplaceDefinedSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ReplaceDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceDefinedSetResponse::CopyFrom(const ReplaceDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ReplaceDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceDefinedSetResponse::IsInitialized() const {
  return true;
}

void ReplaceDefinedSetResponse::Swap(ReplaceDefinedSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceDefinedSetResponse::InternalSwap(ReplaceDefinedSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplaceDefinedSetResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetStatementRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStatementRequest::GetStatementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetStatementRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetStatementRequest)
}
GetStatementRequest::GetStatementRequest(const GetStatementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetStatementRequest)
}

void GetStatementRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetStatementRequest::~GetStatementRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetStatementRequest)
  SharedDtor();
}

void GetStatementRequest::SharedDtor() {
}

void GetStatementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStatementRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetStatementRequest& GetStatementRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetStatementRequest();
  return *internal_default_instance();
}

GetStatementRequest* GetStatementRequest::New(::google::protobuf::Arena* arena) const {
  GetStatementRequest* n = new GetStatementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetStatementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetStatementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetStatementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetStatementRequest)
  return false;
#undef DO_
}

void GetStatementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetStatementRequest)
}

::google::protobuf::uint8* GetStatementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetStatementRequest)
  return target;
}

size_t GetStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetStatementRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStatementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStatementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetStatementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetStatementRequest)
    MergeFrom(*source);
  }
}

void GetStatementRequest::MergeFrom(const GetStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetStatementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatementRequest::CopyFrom(const GetStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatementRequest::IsInitialized() const {
  return true;
}

void GetStatementRequest::Swap(GetStatementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStatementRequest::InternalSwap(GetStatementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStatementRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetStatementResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStatementResponse::kStatementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStatementResponse::GetStatementResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetStatementResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetStatementResponse)
}
GetStatementResponse::GetStatementResponse(const GetStatementResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statements_(from.statements_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetStatementResponse)
}

void GetStatementResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetStatementResponse::~GetStatementResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetStatementResponse)
  SharedDtor();
}

void GetStatementResponse::SharedDtor() {
}

void GetStatementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStatementResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetStatementResponse& GetStatementResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetStatementResponse();
  return *internal_default_instance();
}

GetStatementResponse* GetStatementResponse::New(::google::protobuf::Arena* arena) const {
  GetStatementResponse* n = new GetStatementResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetStatementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statements_.Clear();
  _internal_metadata_.Clear();
}

bool GetStatementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetStatementResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gobgpapi.Statement statements = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_statements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetStatementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetStatementResponse)
  return false;
#undef DO_
}

void GetStatementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Statement statements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statements(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetStatementResponse)
}

::google::protobuf::uint8* GetStatementResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Statement statements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->statements(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetStatementResponse)
  return target;
}

size_t GetStatementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetStatementResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Statement statements = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->statements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->statements(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStatementResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatementResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStatementResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetStatementResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetStatementResponse)
    MergeFrom(*source);
  }
}

void GetStatementResponse::MergeFrom(const GetStatementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statements_.MergeFrom(from.statements_);
}

void GetStatementResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatementResponse::CopyFrom(const GetStatementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatementResponse::IsInitialized() const {
  return true;
}

void GetStatementResponse::Swap(GetStatementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStatementResponse::InternalSwap(GetStatementResponse* other) {
  using std::swap;
  statements_.InternalSwap(&other->statements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStatementResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddStatementRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddStatementRequest_default_instance_._instance.get_mutable()->statement_ = const_cast< ::gobgpapi::Statement*>(
      ::gobgpapi::Statement::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddStatementRequest::kStatementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddStatementRequest::AddStatementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddStatementRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddStatementRequest)
}
AddStatementRequest::AddStatementRequest(const AddStatementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statement()) {
    statement_ = new ::gobgpapi::Statement(*from.statement_);
  } else {
    statement_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddStatementRequest)
}

void AddStatementRequest::SharedCtor() {
  statement_ = NULL;
  _cached_size_ = 0;
}

AddStatementRequest::~AddStatementRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddStatementRequest)
  SharedDtor();
}

void AddStatementRequest::SharedDtor() {
  if (this != internal_default_instance()) delete statement_;
}

void AddStatementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddStatementRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddStatementRequest& AddStatementRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddStatementRequest();
  return *internal_default_instance();
}

AddStatementRequest* AddStatementRequest::New(::google::protobuf::Arena* arena) const {
  AddStatementRequest* n = new AddStatementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && statement_ != NULL) {
    delete statement_;
  }
  statement_ = NULL;
  _internal_metadata_.Clear();
}

bool AddStatementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddStatementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Statement statement = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_statement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddStatementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddStatementRequest)
  return false;
#undef DO_
}

void AddStatementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statement_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddStatementRequest)
}

::google::protobuf::uint8* AddStatementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->statement_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddStatementRequest)
  return target;
}

size_t AddStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddStatementRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->statement_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddStatementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddStatementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddStatementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddStatementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddStatementRequest)
    MergeFrom(*source);
  }
}

void AddStatementRequest::MergeFrom(const AddStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statement()) {
    mutable_statement()->::gobgpapi::Statement::MergeFrom(from.statement());
  }
}

void AddStatementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStatementRequest::CopyFrom(const AddStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStatementRequest::IsInitialized() const {
  return true;
}

void AddStatementRequest::Swap(AddStatementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddStatementRequest::InternalSwap(AddStatementRequest* other) {
  using std::swap;
  swap(statement_, other->statement_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddStatementRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddStatementResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddStatementResponse::AddStatementResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddStatementResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddStatementResponse)
}
AddStatementResponse::AddStatementResponse(const AddStatementResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddStatementResponse)
}

void AddStatementResponse::SharedCtor() {
  _cached_size_ = 0;
}

AddStatementResponse::~AddStatementResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddStatementResponse)
  SharedDtor();
}

void AddStatementResponse::SharedDtor() {
}

void AddStatementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddStatementResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddStatementResponse& AddStatementResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddStatementResponse();
  return *internal_default_instance();
}

AddStatementResponse* AddStatementResponse::New(::google::protobuf::Arena* arena) const {
  AddStatementResponse* n = new AddStatementResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddStatementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AddStatementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddStatementResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddStatementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddStatementResponse)
  return false;
#undef DO_
}

void AddStatementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddStatementResponse)
}

::google::protobuf::uint8* AddStatementResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddStatementResponse)
  return target;
}

size_t AddStatementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddStatementResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddStatementResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddStatementResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddStatementResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddStatementResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddStatementResponse)
    MergeFrom(*source);
  }
}

void AddStatementResponse::MergeFrom(const AddStatementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddStatementResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStatementResponse::CopyFrom(const AddStatementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStatementResponse::IsInitialized() const {
  return true;
}

void AddStatementResponse::Swap(AddStatementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddStatementResponse::InternalSwap(AddStatementResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddStatementResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteStatementRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeleteStatementRequest_default_instance_._instance.get_mutable()->statement_ = const_cast< ::gobgpapi::Statement*>(
      ::gobgpapi::Statement::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteStatementRequest::kStatementFieldNumber;
const int DeleteStatementRequest::kAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteStatementRequest::DeleteStatementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteStatementRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteStatementRequest)
}
DeleteStatementRequest::DeleteStatementRequest(const DeleteStatementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statement()) {
    statement_ = new ::gobgpapi::Statement(*from.statement_);
  } else {
    statement_ = NULL;
  }
  all_ = from.all_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteStatementRequest)
}

void DeleteStatementRequest::SharedCtor() {
  ::memset(&statement_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&statement_)) + sizeof(all_));
  _cached_size_ = 0;
}

DeleteStatementRequest::~DeleteStatementRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteStatementRequest)
  SharedDtor();
}

void DeleteStatementRequest::SharedDtor() {
  if (this != internal_default_instance()) delete statement_;
}

void DeleteStatementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteStatementRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteStatementRequest& DeleteStatementRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteStatementRequest();
  return *internal_default_instance();
}

DeleteStatementRequest* DeleteStatementRequest::New(::google::protobuf::Arena* arena) const {
  DeleteStatementRequest* n = new DeleteStatementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && statement_ != NULL) {
    delete statement_;
  }
  statement_ = NULL;
  all_ = false;
  _internal_metadata_.Clear();
}

bool DeleteStatementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteStatementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Statement statement = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_statement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool all = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteStatementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteStatementRequest)
  return false;
#undef DO_
}

void DeleteStatementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statement_, output);
  }

  // bool all = 2;
  if (this->all() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->all(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteStatementRequest)
}

::google::protobuf::uint8* DeleteStatementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->statement_, deterministic, target);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->all(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteStatementRequest)
  return target;
}

size_t DeleteStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteStatementRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->statement_);
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteStatementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStatementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteStatementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteStatementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteStatementRequest)
    MergeFrom(*source);
  }
}

void DeleteStatementRequest::MergeFrom(const DeleteStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statement()) {
    mutable_statement()->::gobgpapi::Statement::MergeFrom(from.statement());
  }
  if (from.all() != 0) {
    set_all(from.all());
  }
}

void DeleteStatementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStatementRequest::CopyFrom(const DeleteStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStatementRequest::IsInitialized() const {
  return true;
}

void DeleteStatementRequest::Swap(DeleteStatementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteStatementRequest::InternalSwap(DeleteStatementRequest* other) {
  using std::swap;
  swap(statement_, other->statement_);
  swap(all_, other->all_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteStatementRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteStatementResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteStatementResponse::DeleteStatementResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeleteStatementResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteStatementResponse)
}
DeleteStatementResponse::DeleteStatementResponse(const DeleteStatementResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteStatementResponse)
}

void DeleteStatementResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteStatementResponse::~DeleteStatementResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteStatementResponse)
  SharedDtor();
}

void DeleteStatementResponse::SharedDtor() {
}

void DeleteStatementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteStatementResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteStatementResponse& DeleteStatementResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeleteStatementResponse();
  return *internal_default_instance();
}

DeleteStatementResponse* DeleteStatementResponse::New(::google::protobuf::Arena* arena) const {
  DeleteStatementResponse* n = new DeleteStatementResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteStatementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeleteStatementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeleteStatementResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeleteStatementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeleteStatementResponse)
  return false;
#undef DO_
}

void DeleteStatementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeleteStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeleteStatementResponse)
}

::google::protobuf::uint8* DeleteStatementResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteStatementResponse)
  return target;
}

size_t DeleteStatementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteStatementResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteStatementResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStatementResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteStatementResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteStatementResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteStatementResponse)
    MergeFrom(*source);
  }
}

void DeleteStatementResponse::MergeFrom(const DeleteStatementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteStatementResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStatementResponse::CopyFrom(const DeleteStatementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStatementResponse::IsInitialized() const {
  return true;
}

void DeleteStatementResponse::Swap(DeleteStatementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteStatementResponse::InternalSwap(DeleteStatementResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteStatementResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplaceStatementRequest::InitAsDefaultInstance() {
  ::gobgpapi::_ReplaceStatementRequest_default_instance_._instance.get_mutable()->statement_ = const_cast< ::gobgpapi::Statement*>(
      ::gobgpapi::Statement::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplaceStatementRequest::kStatementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceStatementRequest::ReplaceStatementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsReplaceStatementRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ReplaceStatementRequest)
}
ReplaceStatementRequest::ReplaceStatementRequest(const ReplaceStatementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statement()) {
    statement_ = new ::gobgpapi::Statement(*from.statement_);
  } else {
    statement_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ReplaceStatementRequest)
}

void ReplaceStatementRequest::SharedCtor() {
  statement_ = NULL;
  _cached_size_ = 0;
}

ReplaceStatementRequest::~ReplaceStatementRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ReplaceStatementRequest)
  SharedDtor();
}

void ReplaceStatementRequest::SharedDtor() {
  if (this != internal_default_instance()) delete statement_;
}

void ReplaceStatementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceStatementRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplaceStatementRequest& ReplaceStatementRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsReplaceStatementRequest();
  return *internal_default_instance();
}

ReplaceStatementRequest* ReplaceStatementRequest::New(::google::protobuf::Arena* arena) const {
  ReplaceStatementRequest* n = new ReplaceStatementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplaceStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ReplaceStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && statement_ != NULL) {
    delete statement_;
  }
  statement_ = NULL;
  _internal_metadata_.Clear();
}

bool ReplaceStatementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ReplaceStatementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Statement statement = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_statement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ReplaceStatementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ReplaceStatementRequest)
  return false;
#undef DO_
}

void ReplaceStatementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ReplaceStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statement_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ReplaceStatementRequest)
}

::google::protobuf::uint8* ReplaceStatementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ReplaceStatementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->statement_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ReplaceStatementRequest)
  return target;
}

size_t ReplaceStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ReplaceStatementRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->statement_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceStatementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ReplaceStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceStatementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplaceStatementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ReplaceStatementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ReplaceStatementRequest)
    MergeFrom(*source);
  }
}

void ReplaceStatementRequest::MergeFrom(const ReplaceStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ReplaceStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statement()) {
    mutable_statement()->::gobgpapi::Statement::MergeFrom(from.statement());
  }
}

void ReplaceStatementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ReplaceStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceStatementRequest::CopyFrom(const ReplaceStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ReplaceStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceStatementRequest::IsInitialized() const {
  return true;
}

void ReplaceStatementRequest::Swap(ReplaceStatementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceStatementRequest::InternalSwap(ReplaceStatementRequest* other) {
  using std::swap;
  swap(statement_, other->statement_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplaceStatementRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplaceStatementResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceStatementResponse::ReplaceStatementResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsReplaceStatementResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ReplaceStatementResponse)
}
ReplaceStatementResponse::ReplaceStatementResponse(const ReplaceStatementResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ReplaceStatementResponse)
}

void ReplaceStatementResponse::SharedCtor() {
  _cached_size_ = 0;
}

ReplaceStatementResponse::~ReplaceStatementResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ReplaceStatementResponse)
  SharedDtor();
}

void ReplaceStatementResponse::SharedDtor() {
}

void ReplaceStatementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceStatementResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplaceStatementResponse& ReplaceStatementResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsReplaceStatementResponse();
  return *internal_default_instance();
}

ReplaceStatementResponse* ReplaceStatementResponse::New(::google::protobuf::Arena* arena) const {
  ReplaceStatementResponse* n = new ReplaceStatementResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplaceStatementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ReplaceStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReplaceStatementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ReplaceStatementResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ReplaceStatementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ReplaceStatementResponse)
  return false;
#undef DO_
}

void ReplaceStatementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ReplaceStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ReplaceStatementResponse)
}

::google::protobuf::uint8* ReplaceStatementResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ReplaceStatementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ReplaceStatementResponse)
  return target;
}

size_t ReplaceStatementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ReplaceStatementResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceStatementResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ReplaceStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceStatementResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplaceStatementResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ReplaceStatementResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ReplaceStatementResponse)
    MergeFrom(*source);
  }
}

void ReplaceStatementResponse::MergeFrom(const ReplaceStatementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ReplaceStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReplaceStatementResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ReplaceStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceStatementResponse::CopyFrom(const ReplaceStatementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ReplaceStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceStatementResponse::IsInitialized() const {
  return true;
}

void ReplaceStatementResponse::Swap(ReplaceStatementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceStatementResponse::InternalSwap(ReplaceStatementResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplaceStatementResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPolicyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPolicyRequest::GetPolicyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetPolicyRequest)
}
GetPolicyRequest::GetPolicyRequest(const GetPolicyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetPolicyRequest)
}

void GetPolicyRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetPolicyRequest::~GetPolicyRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetPolicyRequest)
  SharedDtor();
}

void GetPolicyRequest::SharedDtor() {
}

void GetPolicyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPolicyRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPolicyRequest& GetPolicyRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyRequest();
  return *internal_default_instance();
}

GetPolicyRequest* GetPolicyRequest::New(::google::protobuf::Arena* arena) const {
  GetPolicyRequest* n = new GetPolicyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetPolicyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetPolicyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetPolicyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetPolicyRequest)
  return false;
#undef DO_
}

void GetPolicyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetPolicyRequest)
}

::google::protobuf::uint8* GetPolicyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetPolicyRequest)
  return target;
}

size_t GetPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetPolicyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPolicyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPolicyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPolicyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetPolicyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetPolicyRequest)
    MergeFrom(*source);
  }
}

void GetPolicyRequest::MergeFrom(const GetPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPolicyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPolicyRequest::CopyFrom(const GetPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPolicyRequest::IsInitialized() const {
  return true;
}

void GetPolicyRequest::Swap(GetPolicyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPolicyRequest::InternalSwap(GetPolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPolicyRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPolicyResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPolicyResponse::kPoliciesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPolicyResponse::GetPolicyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetPolicyResponse)
}
GetPolicyResponse::GetPolicyResponse(const GetPolicyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      policies_(from.policies_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetPolicyResponse)
}

void GetPolicyResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetPolicyResponse::~GetPolicyResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetPolicyResponse)
  SharedDtor();
}

void GetPolicyResponse::SharedDtor() {
}

void GetPolicyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPolicyResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPolicyResponse& GetPolicyResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyResponse();
  return *internal_default_instance();
}

GetPolicyResponse* GetPolicyResponse::New(::google::protobuf::Arena* arena) const {
  GetPolicyResponse* n = new GetPolicyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetPolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policies_.Clear();
  _internal_metadata_.Clear();
}

bool GetPolicyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetPolicyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gobgpapi.Policy policies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_policies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetPolicyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetPolicyResponse)
  return false;
#undef DO_
}

void GetPolicyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetPolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Policy policies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->policies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->policies(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetPolicyResponse)
}

::google::protobuf::uint8* GetPolicyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetPolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Policy policies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->policies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->policies(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetPolicyResponse)
  return target;
}

size_t GetPolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetPolicyResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Policy policies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->policies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->policies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPolicyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPolicyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPolicyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetPolicyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetPolicyResponse)
    MergeFrom(*source);
  }
}

void GetPolicyResponse::MergeFrom(const GetPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  policies_.MergeFrom(from.policies_);
}

void GetPolicyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPolicyResponse::CopyFrom(const GetPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPolicyResponse::IsInitialized() const {
  return true;
}

void GetPolicyResponse::Swap(GetPolicyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPolicyResponse::InternalSwap(GetPolicyResponse* other) {
  using std::swap;
  policies_.InternalSwap(&other->policies_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPolicyResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPolicyRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddPolicyRequest_default_instance_._instance.get_mutable()->policy_ = const_cast< ::gobgpapi::Policy*>(
      ::gobgpapi::Policy::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPolicyRequest::kPolicyFieldNumber;
const int AddPolicyRequest::kReferExistingStatementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPolicyRequest::AddPolicyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPolicyRequest)
}
AddPolicyRequest::AddPolicyRequest(const AddPolicyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_policy()) {
    policy_ = new ::gobgpapi::Policy(*from.policy_);
  } else {
    policy_ = NULL;
  }
  refer_existing_statements_ = from.refer_existing_statements_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPolicyRequest)
}

void AddPolicyRequest::SharedCtor() {
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refer_existing_statements_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(refer_existing_statements_));
  _cached_size_ = 0;
}

AddPolicyRequest::~AddPolicyRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPolicyRequest)
  SharedDtor();
}

void AddPolicyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete policy_;
}

void AddPolicyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPolicyRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPolicyRequest& AddPolicyRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyRequest();
  return *internal_default_instance();
}

AddPolicyRequest* AddPolicyRequest::New(::google::protobuf::Arena* arena) const {
  AddPolicyRequest* n = new AddPolicyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
  refer_existing_statements_ = false;
  _internal_metadata_.Clear();
}

bool AddPolicyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddPolicyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Policy policy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool refer_existing_statements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refer_existing_statements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddPolicyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddPolicyRequest)
  return false;
#undef DO_
}

void AddPolicyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->policy_, output);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->refer_existing_statements(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddPolicyRequest)
}

::google::protobuf::uint8* AddPolicyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->policy_, deterministic, target);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->refer_existing_statements(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPolicyRequest)
  return target;
}

size_t AddPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPolicyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->policy_);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPolicyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPolicyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPolicyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPolicyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPolicyRequest)
    MergeFrom(*source);
  }
}

void AddPolicyRequest::MergeFrom(const AddPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy()) {
    mutable_policy()->::gobgpapi::Policy::MergeFrom(from.policy());
  }
  if (from.refer_existing_statements() != 0) {
    set_refer_existing_statements(from.refer_existing_statements());
  }
}

void AddPolicyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPolicyRequest::CopyFrom(const AddPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPolicyRequest::IsInitialized() const {
  return true;
}

void AddPolicyRequest::Swap(AddPolicyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPolicyRequest::InternalSwap(AddPolicyRequest* other) {
  using std::swap;
  swap(policy_, other->policy_);
  swap(refer_existing_statements_, other->refer_existing_statements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPolicyRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPolicyResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPolicyResponse::AddPolicyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPolicyResponse)
}
AddPolicyResponse::AddPolicyResponse(const AddPolicyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPolicyResponse)
}

void AddPolicyResponse::SharedCtor() {
  _cached_size_ = 0;
}

AddPolicyResponse::~AddPolicyResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPolicyResponse)
  SharedDtor();
}

void AddPolicyResponse::SharedDtor() {
}

void AddPolicyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPolicyResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPolicyResponse& AddPolicyResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyResponse();
  return *internal_default_instance();
}

AddPolicyResponse* AddPolicyResponse::New(::google::protobuf::Arena* arena) const {
  AddPolicyResponse* n = new AddPolicyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AddPolicyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddPolicyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddPolicyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddPolicyResponse)
  return false;
#undef DO_
}

void AddPolicyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddPolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddPolicyResponse)
}

::google::protobuf::uint8* AddPolicyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPolicyResponse)
  return target;
}

size_t AddPolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPolicyResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPolicyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPolicyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPolicyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPolicyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPolicyResponse)
    MergeFrom(*source);
  }
}

void AddPolicyResponse::MergeFrom(const AddPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddPolicyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPolicyResponse::CopyFrom(const AddPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPolicyResponse::IsInitialized() const {
  return true;
}

void AddPolicyResponse::Swap(AddPolicyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPolicyResponse::InternalSwap(AddPolicyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPolicyResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeletePolicyRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeletePolicyRequest_default_instance_._instance.get_mutable()->policy_ = const_cast< ::gobgpapi::Policy*>(
      ::gobgpapi::Policy::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeletePolicyRequest::kPolicyFieldNumber;
const int DeletePolicyRequest::kPreserveStatementsFieldNumber;
const int DeletePolicyRequest::kAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletePolicyRequest::DeletePolicyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePolicyRequest)
}
DeletePolicyRequest::DeletePolicyRequest(const DeletePolicyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_policy()) {
    policy_ = new ::gobgpapi::Policy(*from.policy_);
  } else {
    policy_ = NULL;
  }
  ::memcpy(&preserve_statements_, &from.preserve_statements_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_) -
    reinterpret_cast<char*>(&preserve_statements_)) + sizeof(all_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePolicyRequest)
}

void DeletePolicyRequest::SharedCtor() {
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(all_));
  _cached_size_ = 0;
}

DeletePolicyRequest::~DeletePolicyRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePolicyRequest)
  SharedDtor();
}

void DeletePolicyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete policy_;
}

void DeletePolicyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePolicyRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeletePolicyRequest& DeletePolicyRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyRequest();
  return *internal_default_instance();
}

DeletePolicyRequest* DeletePolicyRequest::New(::google::protobuf::Arena* arena) const {
  DeletePolicyRequest* n = new DeletePolicyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeletePolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
  ::memset(&preserve_statements_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&preserve_statements_)) + sizeof(all_));
  _internal_metadata_.Clear();
}

bool DeletePolicyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeletePolicyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Policy policy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool preserve_statements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_statements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool all = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeletePolicyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeletePolicyRequest)
  return false;
#undef DO_
}

void DeletePolicyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeletePolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->policy_, output);
  }

  // bool preserve_statements = 2;
  if (this->preserve_statements() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->preserve_statements(), output);
  }

  // bool all = 3;
  if (this->all() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->all(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeletePolicyRequest)
}

::google::protobuf::uint8* DeletePolicyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->policy_, deterministic, target);
  }

  // bool preserve_statements = 2;
  if (this->preserve_statements() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->preserve_statements(), target);
  }

  // bool all = 3;
  if (this->all() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->all(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePolicyRequest)
  return target;
}

size_t DeletePolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePolicyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->policy_);
  }

  // bool preserve_statements = 2;
  if (this->preserve_statements() != 0) {
    total_size += 1 + 1;
  }

  // bool all = 3;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePolicyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePolicyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletePolicyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePolicyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePolicyRequest)
    MergeFrom(*source);
  }
}

void DeletePolicyRequest::MergeFrom(const DeletePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy()) {
    mutable_policy()->::gobgpapi::Policy::MergeFrom(from.policy());
  }
  if (from.preserve_statements() != 0) {
    set_preserve_statements(from.preserve_statements());
  }
  if (from.all() != 0) {
    set_all(from.all());
  }
}

void DeletePolicyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePolicyRequest::CopyFrom(const DeletePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePolicyRequest::IsInitialized() const {
  return true;
}

void DeletePolicyRequest::Swap(DeletePolicyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletePolicyRequest::InternalSwap(DeletePolicyRequest* other) {
  using std::swap;
  swap(policy_, other->policy_);
  swap(preserve_statements_, other->preserve_statements_);
  swap(all_, other->all_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeletePolicyRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeletePolicyResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletePolicyResponse::DeletePolicyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePolicyResponse)
}
DeletePolicyResponse::DeletePolicyResponse(const DeletePolicyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePolicyResponse)
}

void DeletePolicyResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeletePolicyResponse::~DeletePolicyResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePolicyResponse)
  SharedDtor();
}

void DeletePolicyResponse::SharedDtor() {
}

void DeletePolicyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePolicyResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeletePolicyResponse& DeletePolicyResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyResponse();
  return *internal_default_instance();
}

DeletePolicyResponse* DeletePolicyResponse::New(::google::protobuf::Arena* arena) const {
  DeletePolicyResponse* n = new DeletePolicyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeletePolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeletePolicyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeletePolicyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeletePolicyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeletePolicyResponse)
  return false;
#undef DO_
}

void DeletePolicyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeletePolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeletePolicyResponse)
}

::google::protobuf::uint8* DeletePolicyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePolicyResponse)
  return target;
}

size_t DeletePolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePolicyResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePolicyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePolicyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletePolicyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePolicyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePolicyResponse)
    MergeFrom(*source);
  }
}

void DeletePolicyResponse::MergeFrom(const DeletePolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeletePolicyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePolicyResponse::CopyFrom(const DeletePolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePolicyResponse::IsInitialized() const {
  return true;
}

void DeletePolicyResponse::Swap(DeletePolicyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletePolicyResponse::InternalSwap(DeletePolicyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeletePolicyResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplacePolicyRequest::InitAsDefaultInstance() {
  ::gobgpapi::_ReplacePolicyRequest_default_instance_._instance.get_mutable()->policy_ = const_cast< ::gobgpapi::Policy*>(
      ::gobgpapi::Policy::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplacePolicyRequest::kPolicyFieldNumber;
const int ReplacePolicyRequest::kReferExistingStatementsFieldNumber;
const int ReplacePolicyRequest::kPreserveStatementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplacePolicyRequest::ReplacePolicyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ReplacePolicyRequest)
}
ReplacePolicyRequest::ReplacePolicyRequest(const ReplacePolicyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_policy()) {
    policy_ = new ::gobgpapi::Policy(*from.policy_);
  } else {
    policy_ = NULL;
  }
  ::memcpy(&refer_existing_statements_, &from.refer_existing_statements_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_statements_) -
    reinterpret_cast<char*>(&refer_existing_statements_)) + sizeof(preserve_statements_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ReplacePolicyRequest)
}

void ReplacePolicyRequest::SharedCtor() {
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_statements_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(preserve_statements_));
  _cached_size_ = 0;
}

ReplacePolicyRequest::~ReplacePolicyRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ReplacePolicyRequest)
  SharedDtor();
}

void ReplacePolicyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete policy_;
}

void ReplacePolicyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplacePolicyRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplacePolicyRequest& ReplacePolicyRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyRequest();
  return *internal_default_instance();
}

ReplacePolicyRequest* ReplacePolicyRequest::New(::google::protobuf::Arena* arena) const {
  ReplacePolicyRequest* n = new ReplacePolicyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplacePolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ReplacePolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
  ::memset(&refer_existing_statements_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_statements_) -
      reinterpret_cast<char*>(&refer_existing_statements_)) + sizeof(preserve_statements_));
  _internal_metadata_.Clear();
}

bool ReplacePolicyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ReplacePolicyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Policy policy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool refer_existing_statements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refer_existing_statements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool preserve_statements = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_statements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ReplacePolicyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ReplacePolicyRequest)
  return false;
#undef DO_
}

void ReplacePolicyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ReplacePolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->policy_, output);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->refer_existing_statements(), output);
  }

  // bool preserve_statements = 3;
  if (this->preserve_statements() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->preserve_statements(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ReplacePolicyRequest)
}

::google::protobuf::uint8* ReplacePolicyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ReplacePolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->policy_, deterministic, target);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->refer_existing_statements(), target);
  }

  // bool preserve_statements = 3;
  if (this->preserve_statements() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->preserve_statements(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ReplacePolicyRequest)
  return target;
}

size_t ReplacePolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ReplacePolicyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->policy_);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    total_size += 1 + 1;
  }

  // bool preserve_statements = 3;
  if (this->preserve_statements() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplacePolicyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ReplacePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplacePolicyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplacePolicyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ReplacePolicyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ReplacePolicyRequest)
    MergeFrom(*source);
  }
}

void ReplacePolicyRequest::MergeFrom(const ReplacePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ReplacePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy()) {
    mutable_policy()->::gobgpapi::Policy::MergeFrom(from.policy());
  }
  if (from.refer_existing_statements() != 0) {
    set_refer_existing_statements(from.refer_existing_statements());
  }
  if (from.preserve_statements() != 0) {
    set_preserve_statements(from.preserve_statements());
  }
}

void ReplacePolicyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ReplacePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplacePolicyRequest::CopyFrom(const ReplacePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ReplacePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplacePolicyRequest::IsInitialized() const {
  return true;
}

void ReplacePolicyRequest::Swap(ReplacePolicyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplacePolicyRequest::InternalSwap(ReplacePolicyRequest* other) {
  using std::swap;
  swap(policy_, other->policy_);
  swap(refer_existing_statements_, other->refer_existing_statements_);
  swap(preserve_statements_, other->preserve_statements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplacePolicyRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplacePolicyResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplacePolicyResponse::ReplacePolicyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ReplacePolicyResponse)
}
ReplacePolicyResponse::ReplacePolicyResponse(const ReplacePolicyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ReplacePolicyResponse)
}

void ReplacePolicyResponse::SharedCtor() {
  _cached_size_ = 0;
}

ReplacePolicyResponse::~ReplacePolicyResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ReplacePolicyResponse)
  SharedDtor();
}

void ReplacePolicyResponse::SharedDtor() {
}

void ReplacePolicyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplacePolicyResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplacePolicyResponse& ReplacePolicyResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyResponse();
  return *internal_default_instance();
}

ReplacePolicyResponse* ReplacePolicyResponse::New(::google::protobuf::Arena* arena) const {
  ReplacePolicyResponse* n = new ReplacePolicyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplacePolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ReplacePolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReplacePolicyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ReplacePolicyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ReplacePolicyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ReplacePolicyResponse)
  return false;
#undef DO_
}

void ReplacePolicyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ReplacePolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ReplacePolicyResponse)
}

::google::protobuf::uint8* ReplacePolicyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ReplacePolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ReplacePolicyResponse)
  return target;
}

size_t ReplacePolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ReplacePolicyResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplacePolicyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ReplacePolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplacePolicyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplacePolicyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ReplacePolicyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ReplacePolicyResponse)
    MergeFrom(*source);
  }
}

void ReplacePolicyResponse::MergeFrom(const ReplacePolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ReplacePolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReplacePolicyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ReplacePolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplacePolicyResponse::CopyFrom(const ReplacePolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ReplacePolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplacePolicyResponse::IsInitialized() const {
  return true;
}

void ReplacePolicyResponse::Swap(ReplacePolicyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplacePolicyResponse::InternalSwap(ReplacePolicyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplacePolicyResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPolicyAssignmentRequest::InitAsDefaultInstance() {
  ::gobgpapi::_GetPolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPolicyAssignmentRequest::kAssignmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPolicyAssignmentRequest::GetPolicyAssignmentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyAssignmentRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetPolicyAssignmentRequest)
}
GetPolicyAssignmentRequest::GetPolicyAssignmentRequest(const GetPolicyAssignmentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_assignment()) {
    assignment_ = new ::gobgpapi::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetPolicyAssignmentRequest)
}

void GetPolicyAssignmentRequest::SharedCtor() {
  assignment_ = NULL;
  _cached_size_ = 0;
}

GetPolicyAssignmentRequest::~GetPolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetPolicyAssignmentRequest)
  SharedDtor();
}

void GetPolicyAssignmentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete assignment_;
}

void GetPolicyAssignmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPolicyAssignmentRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPolicyAssignmentRequest& GetPolicyAssignmentRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyAssignmentRequest();
  return *internal_default_instance();
}

GetPolicyAssignmentRequest* GetPolicyAssignmentRequest::New(::google::protobuf::Arena* arena) const {
  GetPolicyAssignmentRequest* n = new GetPolicyAssignmentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetPolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
  _internal_metadata_.Clear();
}

bool GetPolicyAssignmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetPolicyAssignmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.PolicyAssignment assignment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetPolicyAssignmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetPolicyAssignmentRequest)
  return false;
#undef DO_
}

void GetPolicyAssignmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetPolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->assignment_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetPolicyAssignmentRequest)
}

::google::protobuf::uint8* GetPolicyAssignmentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetPolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->assignment_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetPolicyAssignmentRequest)
  return target;
}

size_t GetPolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetPolicyAssignmentRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->assignment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPolicyAssignmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPolicyAssignmentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPolicyAssignmentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetPolicyAssignmentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetPolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void GetPolicyAssignmentRequest::MergeFrom(const GetPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from.assignment());
  }
}

void GetPolicyAssignmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPolicyAssignmentRequest::CopyFrom(const GetPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void GetPolicyAssignmentRequest::Swap(GetPolicyAssignmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPolicyAssignmentRequest::InternalSwap(GetPolicyAssignmentRequest* other) {
  using std::swap;
  swap(assignment_, other->assignment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPolicyAssignmentRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPolicyAssignmentResponse::InitAsDefaultInstance() {
  ::gobgpapi::_GetPolicyAssignmentResponse_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPolicyAssignmentResponse::kAssignmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPolicyAssignmentResponse::GetPolicyAssignmentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyAssignmentResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetPolicyAssignmentResponse)
}
GetPolicyAssignmentResponse::GetPolicyAssignmentResponse(const GetPolicyAssignmentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_assignment()) {
    assignment_ = new ::gobgpapi::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetPolicyAssignmentResponse)
}

void GetPolicyAssignmentResponse::SharedCtor() {
  assignment_ = NULL;
  _cached_size_ = 0;
}

GetPolicyAssignmentResponse::~GetPolicyAssignmentResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetPolicyAssignmentResponse)
  SharedDtor();
}

void GetPolicyAssignmentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete assignment_;
}

void GetPolicyAssignmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPolicyAssignmentResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPolicyAssignmentResponse& GetPolicyAssignmentResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetPolicyAssignmentResponse();
  return *internal_default_instance();
}

GetPolicyAssignmentResponse* GetPolicyAssignmentResponse::New(::google::protobuf::Arena* arena) const {
  GetPolicyAssignmentResponse* n = new GetPolicyAssignmentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPolicyAssignmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetPolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
  _internal_metadata_.Clear();
}

bool GetPolicyAssignmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetPolicyAssignmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.PolicyAssignment assignment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetPolicyAssignmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetPolicyAssignmentResponse)
  return false;
#undef DO_
}

void GetPolicyAssignmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetPolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->assignment_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetPolicyAssignmentResponse)
}

::google::protobuf::uint8* GetPolicyAssignmentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetPolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->assignment_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetPolicyAssignmentResponse)
  return target;
}

size_t GetPolicyAssignmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetPolicyAssignmentResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->assignment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPolicyAssignmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetPolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPolicyAssignmentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPolicyAssignmentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetPolicyAssignmentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetPolicyAssignmentResponse)
    MergeFrom(*source);
  }
}

void GetPolicyAssignmentResponse::MergeFrom(const GetPolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetPolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from.assignment());
  }
}

void GetPolicyAssignmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetPolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPolicyAssignmentResponse::CopyFrom(const GetPolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetPolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPolicyAssignmentResponse::IsInitialized() const {
  return true;
}

void GetPolicyAssignmentResponse::Swap(GetPolicyAssignmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPolicyAssignmentResponse::InternalSwap(GetPolicyAssignmentResponse* other) {
  using std::swap;
  swap(assignment_, other->assignment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPolicyAssignmentResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPolicyAssignmentRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddPolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPolicyAssignmentRequest::kAssignmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPolicyAssignmentRequest::AddPolicyAssignmentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyAssignmentRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPolicyAssignmentRequest)
}
AddPolicyAssignmentRequest::AddPolicyAssignmentRequest(const AddPolicyAssignmentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_assignment()) {
    assignment_ = new ::gobgpapi::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPolicyAssignmentRequest)
}

void AddPolicyAssignmentRequest::SharedCtor() {
  assignment_ = NULL;
  _cached_size_ = 0;
}

AddPolicyAssignmentRequest::~AddPolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPolicyAssignmentRequest)
  SharedDtor();
}

void AddPolicyAssignmentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete assignment_;
}

void AddPolicyAssignmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPolicyAssignmentRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPolicyAssignmentRequest& AddPolicyAssignmentRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyAssignmentRequest();
  return *internal_default_instance();
}

AddPolicyAssignmentRequest* AddPolicyAssignmentRequest::New(::google::protobuf::Arena* arena) const {
  AddPolicyAssignmentRequest* n = new AddPolicyAssignmentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
  _internal_metadata_.Clear();
}

bool AddPolicyAssignmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddPolicyAssignmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.PolicyAssignment assignment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddPolicyAssignmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddPolicyAssignmentRequest)
  return false;
#undef DO_
}

void AddPolicyAssignmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddPolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->assignment_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddPolicyAssignmentRequest)
}

::google::protobuf::uint8* AddPolicyAssignmentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->assignment_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPolicyAssignmentRequest)
  return target;
}

size_t AddPolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPolicyAssignmentRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->assignment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPolicyAssignmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPolicyAssignmentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPolicyAssignmentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPolicyAssignmentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void AddPolicyAssignmentRequest::MergeFrom(const AddPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from.assignment());
  }
}

void AddPolicyAssignmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPolicyAssignmentRequest::CopyFrom(const AddPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void AddPolicyAssignmentRequest::Swap(AddPolicyAssignmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPolicyAssignmentRequest::InternalSwap(AddPolicyAssignmentRequest* other) {
  using std::swap;
  swap(assignment_, other->assignment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPolicyAssignmentRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPolicyAssignmentResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPolicyAssignmentResponse::AddPolicyAssignmentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyAssignmentResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPolicyAssignmentResponse)
}
AddPolicyAssignmentResponse::AddPolicyAssignmentResponse(const AddPolicyAssignmentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPolicyAssignmentResponse)
}

void AddPolicyAssignmentResponse::SharedCtor() {
  _cached_size_ = 0;
}

AddPolicyAssignmentResponse::~AddPolicyAssignmentResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPolicyAssignmentResponse)
  SharedDtor();
}

void AddPolicyAssignmentResponse::SharedDtor() {
}

void AddPolicyAssignmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPolicyAssignmentResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPolicyAssignmentResponse& AddPolicyAssignmentResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddPolicyAssignmentResponse();
  return *internal_default_instance();
}

AddPolicyAssignmentResponse* AddPolicyAssignmentResponse::New(::google::protobuf::Arena* arena) const {
  AddPolicyAssignmentResponse* n = new AddPolicyAssignmentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPolicyAssignmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AddPolicyAssignmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddPolicyAssignmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddPolicyAssignmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddPolicyAssignmentResponse)
  return false;
#undef DO_
}

void AddPolicyAssignmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddPolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddPolicyAssignmentResponse)
}

::google::protobuf::uint8* AddPolicyAssignmentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPolicyAssignmentResponse)
  return target;
}

size_t AddPolicyAssignmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPolicyAssignmentResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPolicyAssignmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPolicyAssignmentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPolicyAssignmentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPolicyAssignmentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPolicyAssignmentResponse)
    MergeFrom(*source);
  }
}

void AddPolicyAssignmentResponse::MergeFrom(const AddPolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddPolicyAssignmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPolicyAssignmentResponse::CopyFrom(const AddPolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPolicyAssignmentResponse::IsInitialized() const {
  return true;
}

void AddPolicyAssignmentResponse::Swap(AddPolicyAssignmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPolicyAssignmentResponse::InternalSwap(AddPolicyAssignmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPolicyAssignmentResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeletePolicyAssignmentRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeletePolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeletePolicyAssignmentRequest::kAssignmentFieldNumber;
const int DeletePolicyAssignmentRequest::kAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletePolicyAssignmentRequest::DeletePolicyAssignmentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyAssignmentRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePolicyAssignmentRequest)
}
DeletePolicyAssignmentRequest::DeletePolicyAssignmentRequest(const DeletePolicyAssignmentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_assignment()) {
    assignment_ = new ::gobgpapi::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = NULL;
  }
  all_ = from.all_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePolicyAssignmentRequest)
}

void DeletePolicyAssignmentRequest::SharedCtor() {
  ::memset(&assignment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&assignment_)) + sizeof(all_));
  _cached_size_ = 0;
}

DeletePolicyAssignmentRequest::~DeletePolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePolicyAssignmentRequest)
  SharedDtor();
}

void DeletePolicyAssignmentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete assignment_;
}

void DeletePolicyAssignmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePolicyAssignmentRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeletePolicyAssignmentRequest& DeletePolicyAssignmentRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyAssignmentRequest();
  return *internal_default_instance();
}

DeletePolicyAssignmentRequest* DeletePolicyAssignmentRequest::New(::google::protobuf::Arena* arena) const {
  DeletePolicyAssignmentRequest* n = new DeletePolicyAssignmentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeletePolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
  all_ = false;
  _internal_metadata_.Clear();
}

bool DeletePolicyAssignmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeletePolicyAssignmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.PolicyAssignment assignment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool all = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeletePolicyAssignmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeletePolicyAssignmentRequest)
  return false;
#undef DO_
}

void DeletePolicyAssignmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeletePolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->assignment_, output);
  }

  // bool all = 2;
  if (this->all() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->all(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeletePolicyAssignmentRequest)
}

::google::protobuf::uint8* DeletePolicyAssignmentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->assignment_, deterministic, target);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->all(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePolicyAssignmentRequest)
  return target;
}

size_t DeletePolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePolicyAssignmentRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->assignment_);
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePolicyAssignmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePolicyAssignmentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletePolicyAssignmentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePolicyAssignmentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void DeletePolicyAssignmentRequest::MergeFrom(const DeletePolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from.assignment());
  }
  if (from.all() != 0) {
    set_all(from.all());
  }
}

void DeletePolicyAssignmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePolicyAssignmentRequest::CopyFrom(const DeletePolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void DeletePolicyAssignmentRequest::Swap(DeletePolicyAssignmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletePolicyAssignmentRequest::InternalSwap(DeletePolicyAssignmentRequest* other) {
  using std::swap;
  swap(assignment_, other->assignment_);
  swap(all_, other->all_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeletePolicyAssignmentRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeletePolicyAssignmentResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletePolicyAssignmentResponse::DeletePolicyAssignmentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyAssignmentResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePolicyAssignmentResponse)
}
DeletePolicyAssignmentResponse::DeletePolicyAssignmentResponse(const DeletePolicyAssignmentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePolicyAssignmentResponse)
}

void DeletePolicyAssignmentResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeletePolicyAssignmentResponse::~DeletePolicyAssignmentResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePolicyAssignmentResponse)
  SharedDtor();
}

void DeletePolicyAssignmentResponse::SharedDtor() {
}

void DeletePolicyAssignmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePolicyAssignmentResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeletePolicyAssignmentResponse& DeletePolicyAssignmentResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDeletePolicyAssignmentResponse();
  return *internal_default_instance();
}

DeletePolicyAssignmentResponse* DeletePolicyAssignmentResponse::New(::google::protobuf::Arena* arena) const {
  DeletePolicyAssignmentResponse* n = new DeletePolicyAssignmentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeletePolicyAssignmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeletePolicyAssignmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DeletePolicyAssignmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DeletePolicyAssignmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DeletePolicyAssignmentResponse)
  return false;
#undef DO_
}

void DeletePolicyAssignmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DeletePolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DeletePolicyAssignmentResponse)
}

::google::protobuf::uint8* DeletePolicyAssignmentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePolicyAssignmentResponse)
  return target;
}

size_t DeletePolicyAssignmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePolicyAssignmentResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePolicyAssignmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePolicyAssignmentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletePolicyAssignmentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePolicyAssignmentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePolicyAssignmentResponse)
    MergeFrom(*source);
  }
}

void DeletePolicyAssignmentResponse::MergeFrom(const DeletePolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeletePolicyAssignmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePolicyAssignmentResponse::CopyFrom(const DeletePolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePolicyAssignmentResponse::IsInitialized() const {
  return true;
}

void DeletePolicyAssignmentResponse::Swap(DeletePolicyAssignmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletePolicyAssignmentResponse::InternalSwap(DeletePolicyAssignmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeletePolicyAssignmentResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplacePolicyAssignmentRequest::InitAsDefaultInstance() {
  ::gobgpapi::_ReplacePolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplacePolicyAssignmentRequest::kAssignmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplacePolicyAssignmentRequest::ReplacePolicyAssignmentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyAssignmentRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ReplacePolicyAssignmentRequest)
}
ReplacePolicyAssignmentRequest::ReplacePolicyAssignmentRequest(const ReplacePolicyAssignmentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_assignment()) {
    assignment_ = new ::gobgpapi::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ReplacePolicyAssignmentRequest)
}

void ReplacePolicyAssignmentRequest::SharedCtor() {
  assignment_ = NULL;
  _cached_size_ = 0;
}

ReplacePolicyAssignmentRequest::~ReplacePolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ReplacePolicyAssignmentRequest)
  SharedDtor();
}

void ReplacePolicyAssignmentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete assignment_;
}

void ReplacePolicyAssignmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplacePolicyAssignmentRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplacePolicyAssignmentRequest& ReplacePolicyAssignmentRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyAssignmentRequest();
  return *internal_default_instance();
}

ReplacePolicyAssignmentRequest* ReplacePolicyAssignmentRequest::New(::google::protobuf::Arena* arena) const {
  ReplacePolicyAssignmentRequest* n = new ReplacePolicyAssignmentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplacePolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ReplacePolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) {
    delete assignment_;
  }
  assignment_ = NULL;
  _internal_metadata_.Clear();
}

bool ReplacePolicyAssignmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ReplacePolicyAssignmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.PolicyAssignment assignment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ReplacePolicyAssignmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ReplacePolicyAssignmentRequest)
  return false;
#undef DO_
}

void ReplacePolicyAssignmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ReplacePolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->assignment_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ReplacePolicyAssignmentRequest)
}

::google::protobuf::uint8* ReplacePolicyAssignmentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ReplacePolicyAssignmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->assignment_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ReplacePolicyAssignmentRequest)
  return target;
}

size_t ReplacePolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ReplacePolicyAssignmentRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->assignment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplacePolicyAssignmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ReplacePolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplacePolicyAssignmentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplacePolicyAssignmentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ReplacePolicyAssignmentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ReplacePolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void ReplacePolicyAssignmentRequest::MergeFrom(const ReplacePolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ReplacePolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from.assignment());
  }
}

void ReplacePolicyAssignmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ReplacePolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplacePolicyAssignmentRequest::CopyFrom(const ReplacePolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ReplacePolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplacePolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void ReplacePolicyAssignmentRequest::Swap(ReplacePolicyAssignmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplacePolicyAssignmentRequest::InternalSwap(ReplacePolicyAssignmentRequest* other) {
  using std::swap;
  swap(assignment_, other->assignment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplacePolicyAssignmentRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplacePolicyAssignmentResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplacePolicyAssignmentResponse::ReplacePolicyAssignmentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyAssignmentResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ReplacePolicyAssignmentResponse)
}
ReplacePolicyAssignmentResponse::ReplacePolicyAssignmentResponse(const ReplacePolicyAssignmentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ReplacePolicyAssignmentResponse)
}

void ReplacePolicyAssignmentResponse::SharedCtor() {
  _cached_size_ = 0;
}

ReplacePolicyAssignmentResponse::~ReplacePolicyAssignmentResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ReplacePolicyAssignmentResponse)
  SharedDtor();
}

void ReplacePolicyAssignmentResponse::SharedDtor() {
}

void ReplacePolicyAssignmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplacePolicyAssignmentResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplacePolicyAssignmentResponse& ReplacePolicyAssignmentResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsReplacePolicyAssignmentResponse();
  return *internal_default_instance();
}

ReplacePolicyAssignmentResponse* ReplacePolicyAssignmentResponse::New(::google::protobuf::Arena* arena) const {
  ReplacePolicyAssignmentResponse* n = new ReplacePolicyAssignmentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplacePolicyAssignmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ReplacePolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReplacePolicyAssignmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ReplacePolicyAssignmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ReplacePolicyAssignmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ReplacePolicyAssignmentResponse)
  return false;
#undef DO_
}

void ReplacePolicyAssignmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ReplacePolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ReplacePolicyAssignmentResponse)
}

::google::protobuf::uint8* ReplacePolicyAssignmentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ReplacePolicyAssignmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ReplacePolicyAssignmentResponse)
  return target;
}

size_t ReplacePolicyAssignmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ReplacePolicyAssignmentResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplacePolicyAssignmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ReplacePolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplacePolicyAssignmentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplacePolicyAssignmentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ReplacePolicyAssignmentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ReplacePolicyAssignmentResponse)
    MergeFrom(*source);
  }
}

void ReplacePolicyAssignmentResponse::MergeFrom(const ReplacePolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ReplacePolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReplacePolicyAssignmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ReplacePolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplacePolicyAssignmentResponse::CopyFrom(const ReplacePolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ReplacePolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplacePolicyAssignmentResponse::IsInitialized() const {
  return true;
}

void ReplacePolicyAssignmentResponse::Swap(ReplacePolicyAssignmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplacePolicyAssignmentResponse::InternalSwap(ReplacePolicyAssignmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplacePolicyAssignmentResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServerRequest::GetServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetServerRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetServerRequest)
}
GetServerRequest::GetServerRequest(const GetServerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetServerRequest)
}

void GetServerRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetServerRequest::~GetServerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetServerRequest)
  SharedDtor();
}

void GetServerRequest::SharedDtor() {
}

void GetServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServerRequest& GetServerRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetServerRequest();
  return *internal_default_instance();
}

GetServerRequest* GetServerRequest::New(::google::protobuf::Arena* arena) const {
  GetServerRequest* n = new GetServerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetServerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetServerRequest)
  return false;
#undef DO_
}

void GetServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetServerRequest)
}

::google::protobuf::uint8* GetServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetServerRequest)
  return target;
}

size_t GetServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetServerRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetServerRequest)
    MergeFrom(*source);
  }
}

void GetServerRequest::MergeFrom(const GetServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerRequest::CopyFrom(const GetServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerRequest::IsInitialized() const {
  return true;
}

void GetServerRequest::Swap(GetServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServerRequest::InternalSwap(GetServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServerRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServerResponse::InitAsDefaultInstance() {
  ::gobgpapi::_GetServerResponse_default_instance_._instance.get_mutable()->global_ = const_cast< ::gobgpapi::Global*>(
      ::gobgpapi::Global::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServerResponse::kGlobalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServerResponse::GetServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetServerResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetServerResponse)
}
GetServerResponse::GetServerResponse(const GetServerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_global()) {
    global_ = new ::gobgpapi::Global(*from.global_);
  } else {
    global_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetServerResponse)
}

void GetServerResponse::SharedCtor() {
  global_ = NULL;
  _cached_size_ = 0;
}

GetServerResponse::~GetServerResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetServerResponse)
  SharedDtor();
}

void GetServerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete global_;
}

void GetServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServerResponse& GetServerResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetServerResponse();
  return *internal_default_instance();
}

GetServerResponse* GetServerResponse::New(::google::protobuf::Arena* arena) const {
  GetServerResponse* n = new GetServerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && global_ != NULL) {
    delete global_;
  }
  global_ = NULL;
  _internal_metadata_.Clear();
}

bool GetServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Global global = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetServerResponse)
  return false;
#undef DO_
}

void GetServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->global_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetServerResponse)
}

::google::protobuf::uint8* GetServerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->global_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetServerResponse)
  return target;
}

size_t GetServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetServerResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->global_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetServerResponse)
    MergeFrom(*source);
  }
}

void GetServerResponse::MergeFrom(const GetServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_global()) {
    mutable_global()->::gobgpapi::Global::MergeFrom(from.global());
  }
}

void GetServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerResponse::CopyFrom(const GetServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerResponse::IsInitialized() const {
  return true;
}

void GetServerResponse::Swap(GetServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServerResponse::InternalSwap(GetServerResponse* other) {
  using std::swap;
  swap(global_, other->global_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServerResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartServerRequest::InitAsDefaultInstance() {
  ::gobgpapi::_StartServerRequest_default_instance_._instance.get_mutable()->global_ = const_cast< ::gobgpapi::Global*>(
      ::gobgpapi::Global::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartServerRequest::kGlobalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartServerRequest::StartServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsStartServerRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.StartServerRequest)
}
StartServerRequest::StartServerRequest(const StartServerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_global()) {
    global_ = new ::gobgpapi::Global(*from.global_);
  } else {
    global_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.StartServerRequest)
}

void StartServerRequest::SharedCtor() {
  global_ = NULL;
  _cached_size_ = 0;
}

StartServerRequest::~StartServerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.StartServerRequest)
  SharedDtor();
}

void StartServerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete global_;
}

void StartServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartServerRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartServerRequest& StartServerRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsStartServerRequest();
  return *internal_default_instance();
}

StartServerRequest* StartServerRequest::New(::google::protobuf::Arena* arena) const {
  StartServerRequest* n = new StartServerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.StartServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && global_ != NULL) {
    delete global_;
  }
  global_ = NULL;
  _internal_metadata_.Clear();
}

bool StartServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.StartServerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Global global = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.StartServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.StartServerRequest)
  return false;
#undef DO_
}

void StartServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.StartServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->global_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.StartServerRequest)
}

::google::protobuf::uint8* StartServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.StartServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->global_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.StartServerRequest)
  return target;
}

size_t StartServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.StartServerRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->global_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.StartServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartServerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.StartServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.StartServerRequest)
    MergeFrom(*source);
  }
}

void StartServerRequest::MergeFrom(const StartServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.StartServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_global()) {
    mutable_global()->::gobgpapi::Global::MergeFrom(from.global());
  }
}

void StartServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.StartServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartServerRequest::CopyFrom(const StartServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.StartServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartServerRequest::IsInitialized() const {
  return true;
}

void StartServerRequest::Swap(StartServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartServerRequest::InternalSwap(StartServerRequest* other) {
  using std::swap;
  swap(global_, other->global_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartServerRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartServerResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartServerResponse::StartServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsStartServerResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.StartServerResponse)
}
StartServerResponse::StartServerResponse(const StartServerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.StartServerResponse)
}

void StartServerResponse::SharedCtor() {
  _cached_size_ = 0;
}

StartServerResponse::~StartServerResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.StartServerResponse)
  SharedDtor();
}

void StartServerResponse::SharedDtor() {
}

void StartServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartServerResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartServerResponse& StartServerResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsStartServerResponse();
  return *internal_default_instance();
}

StartServerResponse* StartServerResponse::New(::google::protobuf::Arena* arena) const {
  StartServerResponse* n = new StartServerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.StartServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool StartServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.StartServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.StartServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.StartServerResponse)
  return false;
#undef DO_
}

void StartServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.StartServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.StartServerResponse)
}

::google::protobuf::uint8* StartServerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.StartServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.StartServerResponse)
  return target;
}

size_t StartServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.StartServerResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.StartServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartServerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartServerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.StartServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.StartServerResponse)
    MergeFrom(*source);
  }
}

void StartServerResponse::MergeFrom(const StartServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.StartServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.StartServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartServerResponse::CopyFrom(const StartServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.StartServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartServerResponse::IsInitialized() const {
  return true;
}

void StartServerResponse::Swap(StartServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartServerResponse::InternalSwap(StartServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartServerResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopServerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopServerRequest::StopServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsStopServerRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.StopServerRequest)
}
StopServerRequest::StopServerRequest(const StopServerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.StopServerRequest)
}

void StopServerRequest::SharedCtor() {
  _cached_size_ = 0;
}

StopServerRequest::~StopServerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.StopServerRequest)
  SharedDtor();
}

void StopServerRequest::SharedDtor() {
}

void StopServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopServerRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopServerRequest& StopServerRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsStopServerRequest();
  return *internal_default_instance();
}

StopServerRequest* StopServerRequest::New(::google::protobuf::Arena* arena) const {
  StopServerRequest* n = new StopServerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.StopServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool StopServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.StopServerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.StopServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.StopServerRequest)
  return false;
#undef DO_
}

void StopServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.StopServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.StopServerRequest)
}

::google::protobuf::uint8* StopServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.StopServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.StopServerRequest)
  return target;
}

size_t StopServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.StopServerRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.StopServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopServerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.StopServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.StopServerRequest)
    MergeFrom(*source);
  }
}

void StopServerRequest::MergeFrom(const StopServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.StopServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.StopServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServerRequest::CopyFrom(const StopServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.StopServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServerRequest::IsInitialized() const {
  return true;
}

void StopServerRequest::Swap(StopServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopServerRequest::InternalSwap(StopServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopServerRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopServerResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopServerResponse::StopServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsStopServerResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.StopServerResponse)
}
StopServerResponse::StopServerResponse(const StopServerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.StopServerResponse)
}

void StopServerResponse::SharedCtor() {
  _cached_size_ = 0;
}

StopServerResponse::~StopServerResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.StopServerResponse)
  SharedDtor();
}

void StopServerResponse::SharedDtor() {
}

void StopServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopServerResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopServerResponse& StopServerResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsStopServerResponse();
  return *internal_default_instance();
}

StopServerResponse* StopServerResponse::New(::google::protobuf::Arena* arena) const {
  StopServerResponse* n = new StopServerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.StopServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool StopServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.StopServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.StopServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.StopServerResponse)
  return false;
#undef DO_
}

void StopServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.StopServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.StopServerResponse)
}

::google::protobuf::uint8* StopServerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.StopServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.StopServerResponse)
  return target;
}

size_t StopServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.StopServerResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.StopServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopServerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopServerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.StopServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.StopServerResponse)
    MergeFrom(*source);
  }
}

void StopServerResponse::MergeFrom(const StopServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.StopServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.StopServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServerResponse::CopyFrom(const StopServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.StopServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServerResponse::IsInitialized() const {
  return true;
}

void StopServerResponse::Swap(StopServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopServerResponse::InternalSwap(StopServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopServerResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPKIValidation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPKIValidation::kStateFieldNumber;
const int RPKIValidation::kReasonFieldNumber;
const int RPKIValidation::kMatchedFieldNumber;
const int RPKIValidation::kUnmatchedAsFieldNumber;
const int RPKIValidation::kUnmatchedLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPKIValidation::RPKIValidation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRPKIValidation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RPKIValidation)
}
RPKIValidation::RPKIValidation(const RPKIValidation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      matched_(from.matched_),
      unmatched_as_(from.unmatched_as_),
      unmatched_length_(from.unmatched_length_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&state_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RPKIValidation)
}

void RPKIValidation::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&state_)) + sizeof(reason_));
  _cached_size_ = 0;
}

RPKIValidation::~RPKIValidation() {
  // @@protoc_insertion_point(destructor:gobgpapi.RPKIValidation)
  SharedDtor();
}

void RPKIValidation::SharedDtor() {
}

void RPKIValidation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPKIValidation::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPKIValidation& RPKIValidation::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRPKIValidation();
  return *internal_default_instance();
}

RPKIValidation* RPKIValidation::New(::google::protobuf::Arena* arena) const {
  RPKIValidation* n = new RPKIValidation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPKIValidation::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RPKIValidation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matched_.Clear();
  unmatched_as_.Clear();
  unmatched_length_.Clear();
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&state_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool RPKIValidation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RPKIValidation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.RPKIValidation.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::gobgpapi::RPKIValidation_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RPKIValidation.Reason reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::gobgpapi::RPKIValidation_Reason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.Roa matched = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_matched()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.Roa unmatched_as = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_unmatched_as()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.Roa unmatched_length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_unmatched_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RPKIValidation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RPKIValidation)
  return false;
#undef DO_
}

void RPKIValidation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RPKIValidation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RPKIValidation.State state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // .gobgpapi.RPKIValidation.Reason reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  // repeated .gobgpapi.Roa matched = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matched_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->matched(static_cast<int>(i)), output);
  }

  // repeated .gobgpapi.Roa unmatched_as = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unmatched_as_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unmatched_as(static_cast<int>(i)), output);
  }

  // repeated .gobgpapi.Roa unmatched_length = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unmatched_length_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->unmatched_length(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RPKIValidation)
}

::google::protobuf::uint8* RPKIValidation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RPKIValidation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RPKIValidation.State state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // .gobgpapi.RPKIValidation.Reason reason = 2;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  // repeated .gobgpapi.Roa matched = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matched_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->matched(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gobgpapi.Roa unmatched_as = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unmatched_as_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->unmatched_as(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gobgpapi.Roa unmatched_length = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unmatched_length_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->unmatched_length(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RPKIValidation)
  return target;
}

size_t RPKIValidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RPKIValidation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Roa matched = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->matched_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matched(static_cast<int>(i)));
    }
  }

  // repeated .gobgpapi.Roa unmatched_as = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->unmatched_as_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unmatched_as(static_cast<int>(i)));
    }
  }

  // repeated .gobgpapi.Roa unmatched_length = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->unmatched_length_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unmatched_length(static_cast<int>(i)));
    }
  }

  // .gobgpapi.RPKIValidation.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // .gobgpapi.RPKIValidation.Reason reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPKIValidation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RPKIValidation)
  GOOGLE_DCHECK_NE(&from, this);
  const RPKIValidation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPKIValidation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RPKIValidation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RPKIValidation)
    MergeFrom(*source);
  }
}

void RPKIValidation::MergeFrom(const RPKIValidation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RPKIValidation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matched_.MergeFrom(from.matched_);
  unmatched_as_.MergeFrom(from.unmatched_as_);
  unmatched_length_.MergeFrom(from.unmatched_length_);
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void RPKIValidation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RPKIValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKIValidation::CopyFrom(const RPKIValidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RPKIValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKIValidation::IsInitialized() const {
  return true;
}

void RPKIValidation::Swap(RPKIValidation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPKIValidation::InternalSwap(RPKIValidation* other) {
  using std::swap;
  matched_.InternalSwap(&other->matched_);
  unmatched_as_.InternalSwap(&other->unmatched_as_);
  unmatched_length_.InternalSwap(&other->unmatched_length_);
  swap(state_, other->state_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPKIValidation::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Path::InitAsDefaultInstance() {
  ::gobgpapi::_Path_default_instance_._instance.get_mutable()->validation_detail_ = const_cast< ::gobgpapi::RPKIValidation*>(
      ::gobgpapi::RPKIValidation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kNlriFieldNumber;
const int Path::kPattrsFieldNumber;
const int Path::kAgeFieldNumber;
const int Path::kBestFieldNumber;
const int Path::kIsWithdrawFieldNumber;
const int Path::kValidationFieldNumber;
const int Path::kValidationDetailFieldNumber;
const int Path::kNoImplicitWithdrawFieldNumber;
const int Path::kFamilyFieldNumber;
const int Path::kSourceAsnFieldNumber;
const int Path::kSourceIdFieldNumber;
const int Path::kFilteredFieldNumber;
const int Path::kStaleFieldNumber;
const int Path::kIsFromExternalFieldNumber;
const int Path::kNeighborIpFieldNumber;
const int Path::kUuidFieldNumber;
const int Path::kIsNexthopInvalidFieldNumber;
const int Path::kIdentifierFieldNumber;
const int Path::kLocalIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsPath();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Path)
}
Path::Path(const Path& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pattrs_(from.pattrs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nlri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nlri().size() > 0) {
    nlri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nlri_);
  }
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_id().size() > 0) {
    source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  neighbor_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neighbor_ip().size() > 0) {
    neighbor_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_ip_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_validation_detail()) {
    validation_detail_ = new ::gobgpapi::RPKIValidation(*from.validation_detail_);
  } else {
    validation_detail_ = NULL;
  }
  ::memcpy(&age_, &from.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_identifier_) -
    reinterpret_cast<char*>(&age_)) + sizeof(local_identifier_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Path)
}

void Path::SharedCtor() {
  nlri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&validation_detail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_identifier_) -
      reinterpret_cast<char*>(&validation_detail_)) + sizeof(local_identifier_));
  _cached_size_ = 0;
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:gobgpapi.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  nlri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete validation_detail_;
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Path& Path::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsPath();
  return *internal_default_instance();
}

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattrs_.Clear();
  nlri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && validation_detail_ != NULL) {
    delete validation_detail_;
  }
  validation_detail_ = NULL;
  ::memset(&age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_identifier_) -
      reinterpret_cast<char*>(&age_)) + sizeof(local_identifier_));
  _internal_metadata_.Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes nlri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nlri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes pattrs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_pattrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 age = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool best = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &best_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_withdraw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_withdraw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 validation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RPKIValidation validation_detail = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_validation_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool no_implicit_withdraw = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_implicit_withdraw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 family = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_asn = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_asn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_id().data(), static_cast<int>(this->source_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Path.source_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool filtered = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filtered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stale = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_from_external = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_external_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string neighbor_ip = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neighbor_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neighbor_ip().data(), static_cast<int>(this->neighbor_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Path.neighbor_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes uuid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_nexthop_invalid = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nexthop_invalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 identifier = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 local_identifier = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nlri = 1;
  if (this->nlri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nlri(), output);
  }

  // repeated bytes pattrs = 2;
  for (int i = 0, n = this->pattrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->pattrs(i), output);
  }

  // int64 age = 3;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->age(), output);
  }

  // bool best = 4;
  if (this->best() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->best(), output);
  }

  // bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_withdraw(), output);
  }

  // int32 validation = 6;
  if (this->validation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->validation(), output);
  }

  // .gobgpapi.RPKIValidation validation_detail = 7;
  if (this->has_validation_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->validation_detail_, output);
  }

  // bool no_implicit_withdraw = 8;
  if (this->no_implicit_withdraw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->no_implicit_withdraw(), output);
  }

  // uint32 family = 9;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->family(), output);
  }

  // uint32 source_asn = 10;
  if (this->source_asn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->source_asn(), output);
  }

  // string source_id = 11;
  if (this->source_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_id().data(), static_cast<int>(this->source_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.source_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->source_id(), output);
  }

  // bool filtered = 12;
  if (this->filtered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->filtered(), output);
  }

  // bool stale = 13;
  if (this->stale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->stale(), output);
  }

  // bool is_from_external = 14;
  if (this->is_from_external() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_from_external(), output);
  }

  // string neighbor_ip = 15;
  if (this->neighbor_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_ip().data(), static_cast<int>(this->neighbor_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.neighbor_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->neighbor_ip(), output);
  }

  // bytes uuid = 16;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->uuid(), output);
  }

  // bool is_nexthop_invalid = 17;
  if (this->is_nexthop_invalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_nexthop_invalid(), output);
  }

  // uint32 identifier = 18;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->identifier(), output);
  }

  // uint32 local_identifier = 19;
  if (this->local_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->local_identifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nlri = 1;
  if (this->nlri().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nlri(), target);
  }

  // repeated bytes pattrs = 2;
  for (int i = 0, n = this->pattrs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->pattrs(i), target);
  }

  // int64 age = 3;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->age(), target);
  }

  // bool best = 4;
  if (this->best() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->best(), target);
  }

  // bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_withdraw(), target);
  }

  // int32 validation = 6;
  if (this->validation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->validation(), target);
  }

  // .gobgpapi.RPKIValidation validation_detail = 7;
  if (this->has_validation_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->validation_detail_, deterministic, target);
  }

  // bool no_implicit_withdraw = 8;
  if (this->no_implicit_withdraw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->no_implicit_withdraw(), target);
  }

  // uint32 family = 9;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->family(), target);
  }

  // uint32 source_asn = 10;
  if (this->source_asn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->source_asn(), target);
  }

  // string source_id = 11;
  if (this->source_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_id().data(), static_cast<int>(this->source_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.source_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->source_id(), target);
  }

  // bool filtered = 12;
  if (this->filtered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->filtered(), target);
  }

  // bool stale = 13;
  if (this->stale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->stale(), target);
  }

  // bool is_from_external = 14;
  if (this->is_from_external() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_from_external(), target);
  }

  // string neighbor_ip = 15;
  if (this->neighbor_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_ip().data(), static_cast<int>(this->neighbor_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.neighbor_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->neighbor_ip(), target);
  }

  // bytes uuid = 16;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->uuid(), target);
  }

  // bool is_nexthop_invalid = 17;
  if (this->is_nexthop_invalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_nexthop_invalid(), target);
  }

  // uint32 identifier = 18;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->identifier(), target);
  }

  // uint32 local_identifier = 19;
  if (this->local_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->local_identifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Path)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes pattrs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pattrs_size());
  for (int i = 0, n = this->pattrs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->pattrs(i));
  }

  // bytes nlri = 1;
  if (this->nlri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nlri());
  }

  // string source_id = 11;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_id());
  }

  // string neighbor_ip = 15;
  if (this->neighbor_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neighbor_ip());
  }

  // bytes uuid = 16;
  if (this->uuid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // .gobgpapi.RPKIValidation validation_detail = 7;
  if (this->has_validation_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->validation_detail_);
  }

  // int64 age = 3;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->age());
  }

  // int32 validation = 6;
  if (this->validation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->validation());
  }

  // bool best = 4;
  if (this->best() != 0) {
    total_size += 1 + 1;
  }

  // bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    total_size += 1 + 1;
  }

  // bool no_implicit_withdraw = 8;
  if (this->no_implicit_withdraw() != 0) {
    total_size += 1 + 1;
  }

  // bool filtered = 12;
  if (this->filtered() != 0) {
    total_size += 1 + 1;
  }

  // uint32 family = 9;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // uint32 source_asn = 10;
  if (this->source_asn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_asn());
  }

  // bool stale = 13;
  if (this->stale() != 0) {
    total_size += 1 + 1;
  }

  // bool is_from_external = 14;
  if (this->is_from_external() != 0) {
    total_size += 1 + 1;
  }

  // bool is_nexthop_invalid = 17;
  if (this->is_nexthop_invalid() != 0) {
    total_size += 2 + 1;
  }

  // uint32 identifier = 18;
  if (this->identifier() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // uint32 local_identifier = 19;
  if (this->local_identifier() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_identifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pattrs_.MergeFrom(from.pattrs_);
  if (from.nlri().size() > 0) {

    nlri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nlri_);
  }
  if (from.source_id().size() > 0) {

    source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from.neighbor_ip().size() > 0) {

    neighbor_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_ip_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_validation_detail()) {
    mutable_validation_detail()->::gobgpapi::RPKIValidation::MergeFrom(from.validation_detail());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.validation() != 0) {
    set_validation(from.validation());
  }
  if (from.best() != 0) {
    set_best(from.best());
  }
  if (from.is_withdraw() != 0) {
    set_is_withdraw(from.is_withdraw());
  }
  if (from.no_implicit_withdraw() != 0) {
    set_no_implicit_withdraw(from.no_implicit_withdraw());
  }
  if (from.filtered() != 0) {
    set_filtered(from.filtered());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.source_asn() != 0) {
    set_source_asn(from.source_asn());
  }
  if (from.stale() != 0) {
    set_stale(from.stale());
  }
  if (from.is_from_external() != 0) {
    set_is_from_external(from.is_from_external());
  }
  if (from.is_nexthop_invalid() != 0) {
    set_is_nexthop_invalid(from.is_nexthop_invalid());
  }
  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.local_identifier() != 0) {
    set_local_identifier(from.local_identifier());
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  using std::swap;
  pattrs_.InternalSwap(&other->pattrs_);
  nlri_.Swap(&other->nlri_);
  source_id_.Swap(&other->source_id_);
  neighbor_ip_.Swap(&other->neighbor_ip_);
  uuid_.Swap(&other->uuid_);
  swap(validation_detail_, other->validation_detail_);
  swap(age_, other->age_);
  swap(validation_, other->validation_);
  swap(best_, other->best_);
  swap(is_withdraw_, other->is_withdraw_);
  swap(no_implicit_withdraw_, other->no_implicit_withdraw_);
  swap(filtered_, other->filtered_);
  swap(family_, other->family_);
  swap(source_asn_, other->source_asn_);
  swap(stale_, other->stale_);
  swap(is_from_external_, other->is_from_external_);
  swap(is_nexthop_invalid_, other->is_nexthop_invalid_);
  swap(identifier_, other->identifier_);
  swap(local_identifier_, other->local_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Destination::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Destination::kPrefixFieldNumber;
const int Destination::kPathsFieldNumber;
const int Destination::kLongerPrefixesFieldNumber;
const int Destination::kShorterPrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Destination::Destination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDestination();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Destination)
}
Destination::Destination(const Destination& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      paths_(from.paths_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  ::memcpy(&longer_prefixes_, &from.longer_prefixes_,
    static_cast<size_t>(reinterpret_cast<char*>(&shorter_prefixes_) -
    reinterpret_cast<char*>(&longer_prefixes_)) + sizeof(shorter_prefixes_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Destination)
}

void Destination::SharedCtor() {
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&longer_prefixes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shorter_prefixes_) -
      reinterpret_cast<char*>(&longer_prefixes_)) + sizeof(shorter_prefixes_));
  _cached_size_ = 0;
}

Destination::~Destination() {
  // @@protoc_insertion_point(destructor:gobgpapi.Destination)
  SharedDtor();
}

void Destination::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Destination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Destination::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Destination& Destination::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDestination();
  return *internal_default_instance();
}

Destination* Destination::New(::google::protobuf::Arena* arena) const {
  Destination* n = new Destination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Destination::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&longer_prefixes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shorter_prefixes_) -
      reinterpret_cast<char*>(&longer_prefixes_)) + sizeof(shorter_prefixes_));
  _internal_metadata_.Clear();
}

bool Destination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Destination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Destination.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.Path paths = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool longer_prefixes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &longer_prefixes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shorter_prefixes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shorter_prefixes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Destination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Destination)
  return false;
#undef DO_
}

void Destination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Destination.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // repeated .gobgpapi.Path paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paths(static_cast<int>(i)), output);
  }

  // bool longer_prefixes = 3;
  if (this->longer_prefixes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->longer_prefixes(), output);
  }

  // bool shorter_prefixes = 4;
  if (this->shorter_prefixes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->shorter_prefixes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Destination)
}

::google::protobuf::uint8* Destination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Destination.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // repeated .gobgpapi.Path paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->paths(static_cast<int>(i)), deterministic, target);
  }

  // bool longer_prefixes = 3;
  if (this->longer_prefixes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->longer_prefixes(), target);
  }

  // bool shorter_prefixes = 4;
  if (this->shorter_prefixes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->shorter_prefixes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Destination)
  return target;
}

size_t Destination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Destination)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Path paths = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->paths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->paths(static_cast<int>(i)));
    }
  }

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // bool longer_prefixes = 3;
  if (this->longer_prefixes() != 0) {
    total_size += 1 + 1;
  }

  // bool shorter_prefixes = 4;
  if (this->shorter_prefixes() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Destination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  const Destination* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Destination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Destination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Destination)
    MergeFrom(*source);
  }
}

void Destination::MergeFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.longer_prefixes() != 0) {
    set_longer_prefixes(from.longer_prefixes());
  }
  if (from.shorter_prefixes() != 0) {
    set_shorter_prefixes(from.shorter_prefixes());
  }
}

void Destination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destination::CopyFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destination::IsInitialized() const {
  return true;
}

void Destination::Swap(Destination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Destination::InternalSwap(Destination* other) {
  using std::swap;
  paths_.InternalSwap(&other->paths_);
  prefix_.Swap(&other->prefix_);
  swap(longer_prefixes_, other->longer_prefixes_);
  swap(shorter_prefixes_, other->shorter_prefixes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Destination::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Table::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kTypeFieldNumber;
const int Table::kNameFieldNumber;
const int Table::kFamilyFieldNumber;
const int Table::kDestinationsFieldNumber;
const int Table::kPostPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      destinations_(from.destinations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&post_policy_) -
    reinterpret_cast<char*>(&type_)) + sizeof(post_policy_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Table)
}

void Table::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_policy_) -
      reinterpret_cast<char*>(&type_)) + sizeof(post_policy_));
  _cached_size_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:gobgpapi.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table& Table::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsTable();
  return *internal_default_instance();
}

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destinations_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_policy_) -
      reinterpret_cast<char*>(&type_)) + sizeof(post_policy_));
  _internal_metadata_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Resource type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Table.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.Destination destinations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_destinations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool post_policy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_policy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Table.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family(), output);
  }

  // repeated .gobgpapi.Destination destinations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destinations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->destinations(static_cast<int>(i)), output);
  }

  // bool post_policy = 5;
  if (this->post_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->post_policy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Table.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family(), target);
  }

  // repeated .gobgpapi.Destination destinations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destinations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->destinations(static_cast<int>(i)), deterministic, target);
  }

  // bool post_policy = 5;
  if (this->post_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->post_policy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Table)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Destination destinations = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->destinations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->destinations(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // bool post_policy = 5;
  if (this->post_policy() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  destinations_.MergeFrom(from.destinations_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.post_policy() != 0) {
    set_post_policy(from.post_policy());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  using std::swap;
  destinations_.InternalSwap(&other->destinations_);
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  swap(family_, other->family_);
  swap(post_policy_, other->post_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRibRequest::InitAsDefaultInstance() {
  ::gobgpapi::_GetRibRequest_default_instance_._instance.get_mutable()->table_ = const_cast< ::gobgpapi::Table*>(
      ::gobgpapi::Table::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRibRequest::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRibRequest::GetRibRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetRibRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetRibRequest)
}
GetRibRequest::GetRibRequest(const GetRibRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table()) {
    table_ = new ::gobgpapi::Table(*from.table_);
  } else {
    table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetRibRequest)
}

void GetRibRequest::SharedCtor() {
  table_ = NULL;
  _cached_size_ = 0;
}

GetRibRequest::~GetRibRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetRibRequest)
  SharedDtor();
}

void GetRibRequest::SharedDtor() {
  if (this != internal_default_instance()) delete table_;
}

void GetRibRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRibRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRibRequest& GetRibRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetRibRequest();
  return *internal_default_instance();
}

GetRibRequest* GetRibRequest::New(::google::protobuf::Arena* arena) const {
  GetRibRequest* n = new GetRibRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRibRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetRibRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
  _internal_metadata_.Clear();
}

bool GetRibRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetRibRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Table table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetRibRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetRibRequest)
  return false;
#undef DO_
}

void GetRibRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetRibRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Table table = 1;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetRibRequest)
}

::google::protobuf::uint8* GetRibRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetRibRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Table table = 1;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetRibRequest)
  return target;
}

size_t GetRibRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetRibRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Table table = 1;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRibRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetRibRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRibRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRibRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetRibRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetRibRequest)
    MergeFrom(*source);
  }
}

void GetRibRequest::MergeFrom(const GetRibRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetRibRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table()) {
    mutable_table()->::gobgpapi::Table::MergeFrom(from.table());
  }
}

void GetRibRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetRibRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRibRequest::CopyFrom(const GetRibRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetRibRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRibRequest::IsInitialized() const {
  return true;
}

void GetRibRequest::Swap(GetRibRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRibRequest::InternalSwap(GetRibRequest* other) {
  using std::swap;
  swap(table_, other->table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRibRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRibResponse::InitAsDefaultInstance() {
  ::gobgpapi::_GetRibResponse_default_instance_._instance.get_mutable()->table_ = const_cast< ::gobgpapi::Table*>(
      ::gobgpapi::Table::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRibResponse::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRibResponse::GetRibResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetRibResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetRibResponse)
}
GetRibResponse::GetRibResponse(const GetRibResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table()) {
    table_ = new ::gobgpapi::Table(*from.table_);
  } else {
    table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetRibResponse)
}

void GetRibResponse::SharedCtor() {
  table_ = NULL;
  _cached_size_ = 0;
}

GetRibResponse::~GetRibResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetRibResponse)
  SharedDtor();
}

void GetRibResponse::SharedDtor() {
  if (this != internal_default_instance()) delete table_;
}

void GetRibResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRibResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRibResponse& GetRibResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetRibResponse();
  return *internal_default_instance();
}

GetRibResponse* GetRibResponse::New(::google::protobuf::Arena* arena) const {
  GetRibResponse* n = new GetRibResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRibResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetRibResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
  _internal_metadata_.Clear();
}

bool GetRibResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetRibResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Table table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetRibResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetRibResponse)
  return false;
#undef DO_
}

void GetRibResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetRibResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Table table = 1;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetRibResponse)
}

::google::protobuf::uint8* GetRibResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetRibResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Table table = 1;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetRibResponse)
  return target;
}

size_t GetRibResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetRibResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Table table = 1;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRibResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetRibResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRibResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRibResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetRibResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetRibResponse)
    MergeFrom(*source);
  }
}

void GetRibResponse::MergeFrom(const GetRibResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetRibResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table()) {
    mutable_table()->::gobgpapi::Table::MergeFrom(from.table());
  }
}

void GetRibResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetRibResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRibResponse::CopyFrom(const GetRibResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetRibResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRibResponse::IsInitialized() const {
  return true;
}

void GetRibResponse::Swap(GetRibResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRibResponse::InternalSwap(GetRibResponse* other) {
  using std::swap;
  swap(table_, other->table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRibResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableLookupPrefix::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableLookupPrefix::kPrefixFieldNumber;
const int TableLookupPrefix::kLookupOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableLookupPrefix::TableLookupPrefix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsTableLookupPrefix();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TableLookupPrefix)
}
TableLookupPrefix::TableLookupPrefix(const TableLookupPrefix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  lookup_option_ = from.lookup_option_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TableLookupPrefix)
}

void TableLookupPrefix::SharedCtor() {
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lookup_option_ = 0;
  _cached_size_ = 0;
}

TableLookupPrefix::~TableLookupPrefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.TableLookupPrefix)
  SharedDtor();
}

void TableLookupPrefix::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableLookupPrefix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableLookupPrefix::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableLookupPrefix& TableLookupPrefix::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsTableLookupPrefix();
  return *internal_default_instance();
}

TableLookupPrefix* TableLookupPrefix::New(::google::protobuf::Arena* arena) const {
  TableLookupPrefix* n = new TableLookupPrefix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableLookupPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TableLookupPrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lookup_option_ = 0;
  _internal_metadata_.Clear();
}

bool TableLookupPrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.TableLookupPrefix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.TableLookupPrefix.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.TableLookupOption lookup_option = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lookup_option(static_cast< ::gobgpapi::TableLookupOption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.TableLookupPrefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.TableLookupPrefix)
  return false;
#undef DO_
}

void TableLookupPrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.TableLookupPrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.TableLookupPrefix.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // .gobgpapi.TableLookupOption lookup_option = 2;
  if (this->lookup_option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lookup_option(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.TableLookupPrefix)
}

::google::protobuf::uint8* TableLookupPrefix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TableLookupPrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.TableLookupPrefix.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // .gobgpapi.TableLookupOption lookup_option = 2;
  if (this->lookup_option() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lookup_option(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TableLookupPrefix)
  return target;
}

size_t TableLookupPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TableLookupPrefix)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // .gobgpapi.TableLookupOption lookup_option = 2;
  if (this->lookup_option() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lookup_option());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableLookupPrefix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TableLookupPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const TableLookupPrefix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableLookupPrefix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TableLookupPrefix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TableLookupPrefix)
    MergeFrom(*source);
  }
}

void TableLookupPrefix::MergeFrom(const TableLookupPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TableLookupPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.lookup_option() != 0) {
    set_lookup_option(from.lookup_option());
  }
}

void TableLookupPrefix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TableLookupPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableLookupPrefix::CopyFrom(const TableLookupPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TableLookupPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableLookupPrefix::IsInitialized() const {
  return true;
}

void TableLookupPrefix::Swap(TableLookupPrefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableLookupPrefix::InternalSwap(TableLookupPrefix* other) {
  using std::swap;
  prefix_.Swap(&other->prefix_);
  swap(lookup_option_, other->lookup_option_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableLookupPrefix::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPathRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPathRequest::kTypeFieldNumber;
const int GetPathRequest::kNameFieldNumber;
const int GetPathRequest::kFamilyFieldNumber;
const int GetPathRequest::kPrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPathRequest::GetPathRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetPathRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetPathRequest)
}
GetPathRequest::GetPathRequest(const GetPathRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      prefixes_(from.prefixes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&family_) -
    reinterpret_cast<char*>(&type_)) + sizeof(family_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetPathRequest)
}

void GetPathRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&type_)) + sizeof(family_));
  _cached_size_ = 0;
}

GetPathRequest::~GetPathRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetPathRequest)
  SharedDtor();
}

void GetPathRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetPathRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPathRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPathRequest& GetPathRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetPathRequest();
  return *internal_default_instance();
}

GetPathRequest* GetPathRequest::New(::google::protobuf::Arena* arena) const {
  GetPathRequest* n = new GetPathRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefixes_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&type_)) + sizeof(family_));
  _internal_metadata_.Clear();
}

bool GetPathRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetPathRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Resource type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.GetPathRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.TableLookupPrefix prefixes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_prefixes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetPathRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetPathRequest)
  return false;
#undef DO_
}

void GetPathRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.GetPathRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family(), output);
  }

  // repeated .gobgpapi.TableLookupPrefix prefixes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prefixes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prefixes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetPathRequest)
}

::google::protobuf::uint8* GetPathRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.GetPathRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family(), target);
  }

  // repeated .gobgpapi.TableLookupPrefix prefixes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prefixes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->prefixes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetPathRequest)
  return target;
}

size_t GetPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetPathRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.TableLookupPrefix prefixes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->prefixes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prefixes(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPathRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPathRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPathRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetPathRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetPathRequest)
    MergeFrom(*source);
  }
}

void GetPathRequest::MergeFrom(const GetPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prefixes_.MergeFrom(from.prefixes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
}

void GetPathRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPathRequest::CopyFrom(const GetPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPathRequest::IsInitialized() const {
  return true;
}

void GetPathRequest::Swap(GetPathRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPathRequest::InternalSwap(GetPathRequest* other) {
  using std::swap;
  prefixes_.InternalSwap(&other->prefixes_);
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  swap(family_, other->family_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPathRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ValidateRibRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidateRibRequest::kTypeFieldNumber;
const int ValidateRibRequest::kFamilyFieldNumber;
const int ValidateRibRequest::kPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidateRibRequest::ValidateRibRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsValidateRibRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ValidateRibRequest)
}
ValidateRibRequest::ValidateRibRequest(const ValidateRibRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&family_) -
    reinterpret_cast<char*>(&type_)) + sizeof(family_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ValidateRibRequest)
}

void ValidateRibRequest::SharedCtor() {
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&type_)) + sizeof(family_));
  _cached_size_ = 0;
}

ValidateRibRequest::~ValidateRibRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ValidateRibRequest)
  SharedDtor();
}

void ValidateRibRequest::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ValidateRibRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateRibRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ValidateRibRequest& ValidateRibRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsValidateRibRequest();
  return *internal_default_instance();
}

ValidateRibRequest* ValidateRibRequest::New(::google::protobuf::Arena* arena) const {
  ValidateRibRequest* n = new ValidateRibRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidateRibRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ValidateRibRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&type_)) + sizeof(family_));
  _internal_metadata_.Clear();
}

bool ValidateRibRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ValidateRibRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Resource type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 family = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ValidateRibRequest.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ValidateRibRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ValidateRibRequest)
  return false;
#undef DO_
}

void ValidateRibRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ValidateRibRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 family = 2;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family(), output);
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ValidateRibRequest.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->prefix(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ValidateRibRequest)
}

::google::protobuf::uint8* ValidateRibRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ValidateRibRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 family = 2;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family(), target);
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ValidateRibRequest.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prefix(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ValidateRibRequest)
  return target;
}

size_t ValidateRibRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ValidateRibRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string prefix = 3;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 family = 2;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateRibRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ValidateRibRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateRibRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidateRibRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ValidateRibRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ValidateRibRequest)
    MergeFrom(*source);
  }
}

void ValidateRibRequest::MergeFrom(const ValidateRibRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ValidateRibRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
}

void ValidateRibRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ValidateRibRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateRibRequest::CopyFrom(const ValidateRibRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ValidateRibRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateRibRequest::IsInitialized() const {
  return true;
}

void ValidateRibRequest::Swap(ValidateRibRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidateRibRequest::InternalSwap(ValidateRibRequest* other) {
  using std::swap;
  prefix_.Swap(&other->prefix_);
  swap(type_, other->type_);
  swap(family_, other->family_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidateRibRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ValidateRibResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidateRibResponse::ValidateRibResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsValidateRibResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ValidateRibResponse)
}
ValidateRibResponse::ValidateRibResponse(const ValidateRibResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ValidateRibResponse)
}

void ValidateRibResponse::SharedCtor() {
  _cached_size_ = 0;
}

ValidateRibResponse::~ValidateRibResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ValidateRibResponse)
  SharedDtor();
}

void ValidateRibResponse::SharedDtor() {
}

void ValidateRibResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateRibResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ValidateRibResponse& ValidateRibResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsValidateRibResponse();
  return *internal_default_instance();
}

ValidateRibResponse* ValidateRibResponse::New(::google::protobuf::Arena* arena) const {
  ValidateRibResponse* n = new ValidateRibResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidateRibResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ValidateRibResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ValidateRibResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ValidateRibResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ValidateRibResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ValidateRibResponse)
  return false;
#undef DO_
}

void ValidateRibResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ValidateRibResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ValidateRibResponse)
}

::google::protobuf::uint8* ValidateRibResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ValidateRibResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ValidateRibResponse)
  return target;
}

size_t ValidateRibResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ValidateRibResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateRibResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ValidateRibResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateRibResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidateRibResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ValidateRibResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ValidateRibResponse)
    MergeFrom(*source);
  }
}

void ValidateRibResponse::MergeFrom(const ValidateRibResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ValidateRibResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ValidateRibResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ValidateRibResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateRibResponse::CopyFrom(const ValidateRibResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ValidateRibResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateRibResponse::IsInitialized() const {
  return true;
}

void ValidateRibResponse::Swap(ValidateRibResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidateRibResponse::InternalSwap(ValidateRibResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidateRibResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Peer::InitAsDefaultInstance() {
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::gobgpapi::ApplyPolicy*>(
      ::gobgpapi::ApplyPolicy::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->conf_ = const_cast< ::gobgpapi::PeerConf*>(
      ::gobgpapi::PeerConf::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->ebgp_multihop_ = const_cast< ::gobgpapi::EbgpMultihop*>(
      ::gobgpapi::EbgpMultihop::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->route_reflector_ = const_cast< ::gobgpapi::RouteReflector*>(
      ::gobgpapi::RouteReflector::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->info_ = const_cast< ::gobgpapi::PeerState*>(
      ::gobgpapi::PeerState::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->timers_ = const_cast< ::gobgpapi::Timers*>(
      ::gobgpapi::Timers::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->transport_ = const_cast< ::gobgpapi::Transport*>(
      ::gobgpapi::Transport::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->route_server_ = const_cast< ::gobgpapi::RouteServer*>(
      ::gobgpapi::RouteServer::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->graceful_restart_ = const_cast< ::gobgpapi::GracefulRestart*>(
      ::gobgpapi::GracefulRestart::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->add_paths_ = const_cast< ::gobgpapi::AddPaths*>(
      ::gobgpapi::AddPaths::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kFamiliesFieldNumber;
const int Peer::kApplyPolicyFieldNumber;
const int Peer::kConfFieldNumber;
const int Peer::kEbgpMultihopFieldNumber;
const int Peer::kRouteReflectorFieldNumber;
const int Peer::kInfoFieldNumber;
const int Peer::kTimersFieldNumber;
const int Peer::kTransportFieldNumber;
const int Peer::kRouteServerFieldNumber;
const int Peer::kGracefulRestartFieldNumber;
const int Peer::kAfiSafisFieldNumber;
const int Peer::kAddPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsPeer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Peer)
}
Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      families_(from.families_),
      afi_safis_(from.afi_safis_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_apply_policy()) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = NULL;
  }
  if (from.has_conf()) {
    conf_ = new ::gobgpapi::PeerConf(*from.conf_);
  } else {
    conf_ = NULL;
  }
  if (from.has_ebgp_multihop()) {
    ebgp_multihop_ = new ::gobgpapi::EbgpMultihop(*from.ebgp_multihop_);
  } else {
    ebgp_multihop_ = NULL;
  }
  if (from.has_route_reflector()) {
    route_reflector_ = new ::gobgpapi::RouteReflector(*from.route_reflector_);
  } else {
    route_reflector_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::gobgpapi::PeerState(*from.info_);
  } else {
    info_ = NULL;
  }
  if (from.has_timers()) {
    timers_ = new ::gobgpapi::Timers(*from.timers_);
  } else {
    timers_ = NULL;
  }
  if (from.has_transport()) {
    transport_ = new ::gobgpapi::Transport(*from.transport_);
  } else {
    transport_ = NULL;
  }
  if (from.has_route_server()) {
    route_server_ = new ::gobgpapi::RouteServer(*from.route_server_);
  } else {
    route_server_ = NULL;
  }
  if (from.has_graceful_restart()) {
    graceful_restart_ = new ::gobgpapi::GracefulRestart(*from.graceful_restart_);
  } else {
    graceful_restart_ = NULL;
  }
  if (from.has_add_paths()) {
    add_paths_ = new ::gobgpapi::AddPaths(*from.add_paths_);
  } else {
    add_paths_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Peer)
}

void Peer::SharedCtor() {
  ::memset(&apply_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_paths_) -
      reinterpret_cast<char*>(&apply_policy_)) + sizeof(add_paths_));
  _cached_size_ = 0;
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:gobgpapi.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  if (this != internal_default_instance()) delete apply_policy_;
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete ebgp_multihop_;
  if (this != internal_default_instance()) delete route_reflector_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete timers_;
  if (this != internal_default_instance()) delete transport_;
  if (this != internal_default_instance()) delete route_server_;
  if (this != internal_default_instance()) delete graceful_restart_;
  if (this != internal_default_instance()) delete add_paths_;
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Peer& Peer::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsPeer();
  return *internal_default_instance();
}

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  families_.Clear();
  afi_safis_.Clear();
  if (GetArenaNoVirtual() == NULL && apply_policy_ != NULL) {
    delete apply_policy_;
  }
  apply_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) {
    delete conf_;
  }
  conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && ebgp_multihop_ != NULL) {
    delete ebgp_multihop_;
  }
  ebgp_multihop_ = NULL;
  if (GetArenaNoVirtual() == NULL && route_reflector_ != NULL) {
    delete route_reflector_;
  }
  route_reflector_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  if (GetArenaNoVirtual() == NULL && timers_ != NULL) {
    delete timers_;
  }
  timers_ = NULL;
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) {
    delete transport_;
  }
  transport_ = NULL;
  if (GetArenaNoVirtual() == NULL && route_server_ != NULL) {
    delete route_server_;
  }
  route_server_ = NULL;
  if (GetArenaNoVirtual() == NULL && graceful_restart_ != NULL) {
    delete graceful_restart_;
  }
  graceful_restart_ = NULL;
  if (GetArenaNoVirtual() == NULL && add_paths_ != NULL) {
    delete add_paths_;
  }
  add_paths_ = NULL;
  _internal_metadata_.Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 families = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_families())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_families())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.ApplyPolicy apply_policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apply_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.PeerConf conf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.EbgpMultihop ebgp_multihop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ebgp_multihop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RouteReflector route_reflector = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_route_reflector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.PeerState info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Timers timers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Transport transport = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RouteServer route_server = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_route_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.GracefulRestart graceful_restart = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graceful_restart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.AfiSafi afi_safis = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_afi_safis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.AddPaths add_paths = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 families = 1;
  if (this->families_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _families_cached_byte_size_));
  }
  for (int i = 0, n = this->families_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->families(i), output);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 2;
  if (this->has_apply_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->apply_policy_, output);
  }

  // .gobgpapi.PeerConf conf = 3;
  if (this->has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->conf_, output);
  }

  // .gobgpapi.EbgpMultihop ebgp_multihop = 4;
  if (this->has_ebgp_multihop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ebgp_multihop_, output);
  }

  // .gobgpapi.RouteReflector route_reflector = 5;
  if (this->has_route_reflector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->route_reflector_, output);
  }

  // .gobgpapi.PeerState info = 6;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->info_, output);
  }

  // .gobgpapi.Timers timers = 7;
  if (this->has_timers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->timers_, output);
  }

  // .gobgpapi.Transport transport = 8;
  if (this->has_transport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->transport_, output);
  }

  // .gobgpapi.RouteServer route_server = 9;
  if (this->has_route_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->route_server_, output);
  }

  // .gobgpapi.GracefulRestart graceful_restart = 10;
  if (this->has_graceful_restart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->graceful_restart_, output);
  }

  // repeated .gobgpapi.AfiSafi afi_safis = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->afi_safis_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->afi_safis(static_cast<int>(i)), output);
  }

  // .gobgpapi.AddPaths add_paths = 12;
  if (this->has_add_paths()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->add_paths_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 families = 1;
  if (this->families_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _families_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->families_, target);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 2;
  if (this->has_apply_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->apply_policy_, deterministic, target);
  }

  // .gobgpapi.PeerConf conf = 3;
  if (this->has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->conf_, deterministic, target);
  }

  // .gobgpapi.EbgpMultihop ebgp_multihop = 4;
  if (this->has_ebgp_multihop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->ebgp_multihop_, deterministic, target);
  }

  // .gobgpapi.RouteReflector route_reflector = 5;
  if (this->has_route_reflector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->route_reflector_, deterministic, target);
  }

  // .gobgpapi.PeerState info = 6;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->info_, deterministic, target);
  }

  // .gobgpapi.Timers timers = 7;
  if (this->has_timers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->timers_, deterministic, target);
  }

  // .gobgpapi.Transport transport = 8;
  if (this->has_transport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->transport_, deterministic, target);
  }

  // .gobgpapi.RouteServer route_server = 9;
  if (this->has_route_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->route_server_, deterministic, target);
  }

  // .gobgpapi.GracefulRestart graceful_restart = 10;
  if (this->has_graceful_restart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->graceful_restart_, deterministic, target);
  }

  // repeated .gobgpapi.AfiSafi afi_safis = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->afi_safis_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->afi_safis(static_cast<int>(i)), deterministic, target);
  }

  // .gobgpapi.AddPaths add_paths = 12;
  if (this->has_add_paths()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->add_paths_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Peer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 families = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->families_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _families_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .gobgpapi.AfiSafi afi_safis = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->afi_safis_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->afi_safis(static_cast<int>(i)));
    }
  }

  // .gobgpapi.ApplyPolicy apply_policy = 2;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->apply_policy_);
  }

  // .gobgpapi.PeerConf conf = 3;
  if (this->has_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conf_);
  }

  // .gobgpapi.EbgpMultihop ebgp_multihop = 4;
  if (this->has_ebgp_multihop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ebgp_multihop_);
  }

  // .gobgpapi.RouteReflector route_reflector = 5;
  if (this->has_route_reflector()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->route_reflector_);
  }

  // .gobgpapi.PeerState info = 6;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_);
  }

  // .gobgpapi.Timers timers = 7;
  if (this->has_timers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->timers_);
  }

  // .gobgpapi.Transport transport = 8;
  if (this->has_transport()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transport_);
  }

  // .gobgpapi.RouteServer route_server = 9;
  if (this->has_route_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->route_server_);
  }

  // .gobgpapi.GracefulRestart graceful_restart = 10;
  if (this->has_graceful_restart()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->graceful_restart_);
  }

  // .gobgpapi.AddPaths add_paths = 12;
  if (this->has_add_paths()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->add_paths_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  families_.MergeFrom(from.families_);
  afi_safis_.MergeFrom(from.afi_safis_);
  if (from.has_apply_policy()) {
    mutable_apply_policy()->::gobgpapi::ApplyPolicy::MergeFrom(from.apply_policy());
  }
  if (from.has_conf()) {
    mutable_conf()->::gobgpapi::PeerConf::MergeFrom(from.conf());
  }
  if (from.has_ebgp_multihop()) {
    mutable_ebgp_multihop()->::gobgpapi::EbgpMultihop::MergeFrom(from.ebgp_multihop());
  }
  if (from.has_route_reflector()) {
    mutable_route_reflector()->::gobgpapi::RouteReflector::MergeFrom(from.route_reflector());
  }
  if (from.has_info()) {
    mutable_info()->::gobgpapi::PeerState::MergeFrom(from.info());
  }
  if (from.has_timers()) {
    mutable_timers()->::gobgpapi::Timers::MergeFrom(from.timers());
  }
  if (from.has_transport()) {
    mutable_transport()->::gobgpapi::Transport::MergeFrom(from.transport());
  }
  if (from.has_route_server()) {
    mutable_route_server()->::gobgpapi::RouteServer::MergeFrom(from.route_server());
  }
  if (from.has_graceful_restart()) {
    mutable_graceful_restart()->::gobgpapi::GracefulRestart::MergeFrom(from.graceful_restart());
  }
  if (from.has_add_paths()) {
    mutable_add_paths()->::gobgpapi::AddPaths::MergeFrom(from.add_paths());
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  using std::swap;
  families_.InternalSwap(&other->families_);
  afi_safis_.InternalSwap(&other->afi_safis_);
  swap(apply_policy_, other->apply_policy_);
  swap(conf_, other->conf_);
  swap(ebgp_multihop_, other->ebgp_multihop_);
  swap(route_reflector_, other->route_reflector_);
  swap(info_, other->info_);
  swap(timers_, other->timers_);
  swap(transport_, other->transport_);
  swap(route_server_, other->route_server_);
  swap(graceful_restart_, other->graceful_restart_);
  swap(add_paths_, other->add_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ApplyPolicy::InitAsDefaultInstance() {
  ::gobgpapi::_ApplyPolicy_default_instance_._instance.get_mutable()->in_policy_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
  ::gobgpapi::_ApplyPolicy_default_instance_._instance.get_mutable()->export_policy_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
  ::gobgpapi::_ApplyPolicy_default_instance_._instance.get_mutable()->import_policy_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyPolicy::kInPolicyFieldNumber;
const int ApplyPolicy::kExportPolicyFieldNumber;
const int ApplyPolicy::kImportPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyPolicy::ApplyPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsApplyPolicy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ApplyPolicy)
}
ApplyPolicy::ApplyPolicy(const ApplyPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_in_policy()) {
    in_policy_ = new ::gobgpapi::PolicyAssignment(*from.in_policy_);
  } else {
    in_policy_ = NULL;
  }
  if (from.has_export_policy()) {
    export_policy_ = new ::gobgpapi::PolicyAssignment(*from.export_policy_);
  } else {
    export_policy_ = NULL;
  }
  if (from.has_import_policy()) {
    import_policy_ = new ::gobgpapi::PolicyAssignment(*from.import_policy_);
  } else {
    import_policy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ApplyPolicy)
}

void ApplyPolicy::SharedCtor() {
  ::memset(&in_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&import_policy_) -
      reinterpret_cast<char*>(&in_policy_)) + sizeof(import_policy_));
  _cached_size_ = 0;
}

ApplyPolicy::~ApplyPolicy() {
  // @@protoc_insertion_point(destructor:gobgpapi.ApplyPolicy)
  SharedDtor();
}

void ApplyPolicy::SharedDtor() {
  if (this != internal_default_instance()) delete in_policy_;
  if (this != internal_default_instance()) delete export_policy_;
  if (this != internal_default_instance()) delete import_policy_;
}

void ApplyPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyPolicy::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApplyPolicy& ApplyPolicy::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsApplyPolicy();
  return *internal_default_instance();
}

ApplyPolicy* ApplyPolicy::New(::google::protobuf::Arena* arena) const {
  ApplyPolicy* n = new ApplyPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ApplyPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ApplyPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && in_policy_ != NULL) {
    delete in_policy_;
  }
  in_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && export_policy_ != NULL) {
    delete export_policy_;
  }
  export_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && import_policy_ != NULL) {
    delete import_policy_;
  }
  import_policy_ = NULL;
  _internal_metadata_.Clear();
}

bool ApplyPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ApplyPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.PolicyAssignment in_policy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_in_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.PolicyAssignment export_policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_export_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.PolicyAssignment import_policy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_import_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ApplyPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ApplyPolicy)
  return false;
#undef DO_
}

void ApplyPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ApplyPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->in_policy_, output);
  }

  // .gobgpapi.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->export_policy_, output);
  }

  // .gobgpapi.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->import_policy_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.ApplyPolicy)
}

::google::protobuf::uint8* ApplyPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ApplyPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->in_policy_, deterministic, target);
  }

  // .gobgpapi.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->export_policy_, deterministic, target);
  }

  // .gobgpapi.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->import_policy_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ApplyPolicy)
  return target;
}

size_t ApplyPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ApplyPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->in_policy_);
  }

  // .gobgpapi.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->export_policy_);
  }

  // .gobgpapi.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->import_policy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ApplyPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplyPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ApplyPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ApplyPolicy)
    MergeFrom(*source);
  }
}

void ApplyPolicy::MergeFrom(const ApplyPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ApplyPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_in_policy()) {
    mutable_in_policy()->::gobgpapi::PolicyAssignment::MergeFrom(from.in_policy());
  }
  if (from.has_export_policy()) {
    mutable_export_policy()->::gobgpapi::PolicyAssignment::MergeFrom(from.export_policy());
  }
  if (from.has_import_policy()) {
    mutable_import_policy()->::gobgpapi::PolicyAssignment::MergeFrom(from.import_policy());
  }
}

void ApplyPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ApplyPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPolicy::CopyFrom(const ApplyPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ApplyPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPolicy::IsInitialized() const {
  return true;
}

void ApplyPolicy::Swap(ApplyPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPolicy::InternalSwap(ApplyPolicy* other) {
  using std::swap;
  swap(in_policy_, other->in_policy_);
  swap(export_policy_, other->export_policy_);
  swap(import_policy_, other->import_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ApplyPolicy::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrefixLimit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrefixLimit::kFamilyFieldNumber;
const int PrefixLimit::kMaxPrefixesFieldNumber;
const int PrefixLimit::kShutdownThresholdPctFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrefixLimit::PrefixLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsPrefixLimit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PrefixLimit)
}
PrefixLimit::PrefixLimit(const PrefixLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&family_, &from.family_,
    static_cast<size_t>(reinterpret_cast<char*>(&shutdown_threshold_pct_) -
    reinterpret_cast<char*>(&family_)) + sizeof(shutdown_threshold_pct_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PrefixLimit)
}

void PrefixLimit::SharedCtor() {
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutdown_threshold_pct_) -
      reinterpret_cast<char*>(&family_)) + sizeof(shutdown_threshold_pct_));
  _cached_size_ = 0;
}

PrefixLimit::~PrefixLimit() {
  // @@protoc_insertion_point(destructor:gobgpapi.PrefixLimit)
  SharedDtor();
}

void PrefixLimit::SharedDtor() {
}

void PrefixLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrefixLimit::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrefixLimit& PrefixLimit::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsPrefixLimit();
  return *internal_default_instance();
}

PrefixLimit* PrefixLimit::New(::google::protobuf::Arena* arena) const {
  PrefixLimit* n = new PrefixLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrefixLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PrefixLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutdown_threshold_pct_) -
      reinterpret_cast<char*>(&family_)) + sizeof(shutdown_threshold_pct_));
  _internal_metadata_.Clear();
}

bool PrefixLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.PrefixLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 family = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_prefixes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_prefixes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shutdown_threshold_pct = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shutdown_threshold_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.PrefixLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.PrefixLimit)
  return false;
#undef DO_
}

void PrefixLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.PrefixLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family(), output);
  }

  // uint32 max_prefixes = 2;
  if (this->max_prefixes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_prefixes(), output);
  }

  // uint32 shutdown_threshold_pct = 3;
  if (this->shutdown_threshold_pct() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shutdown_threshold_pct(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.PrefixLimit)
}

::google::protobuf::uint8* PrefixLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PrefixLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family(), target);
  }

  // uint32 max_prefixes = 2;
  if (this->max_prefixes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_prefixes(), target);
  }

  // uint32 shutdown_threshold_pct = 3;
  if (this->shutdown_threshold_pct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shutdown_threshold_pct(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PrefixLimit)
  return target;
}

size_t PrefixLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PrefixLimit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 family = 1;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // uint32 max_prefixes = 2;
  if (this->max_prefixes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_prefixes());
  }

  // uint32 shutdown_threshold_pct = 3;
  if (this->shutdown_threshold_pct() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shutdown_threshold_pct());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrefixLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PrefixLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const PrefixLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrefixLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PrefixLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PrefixLimit)
    MergeFrom(*source);
  }
}

void PrefixLimit::MergeFrom(const PrefixLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PrefixLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.max_prefixes() != 0) {
    set_max_prefixes(from.max_prefixes());
  }
  if (from.shutdown_threshold_pct() != 0) {
    set_shutdown_threshold_pct(from.shutdown_threshold_pct());
  }
}

void PrefixLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PrefixLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrefixLimit::CopyFrom(const PrefixLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PrefixLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefixLimit::IsInitialized() const {
  return true;
}

void PrefixLimit::Swap(PrefixLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrefixLimit::InternalSwap(PrefixLimit* other) {
  using std::swap;
  swap(family_, other->family_);
  swap(max_prefixes_, other->max_prefixes_);
  swap(shutdown_threshold_pct_, other->shutdown_threshold_pct_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrefixLimit::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerConf::kAuthPasswordFieldNumber;
const int PeerConf::kDescriptionFieldNumber;
const int PeerConf::kLocalAsFieldNumber;
const int PeerConf::kNeighborAddressFieldNumber;
const int PeerConf::kPeerAsFieldNumber;
const int PeerConf::kPeerGroupFieldNumber;
const int PeerConf::kPeerTypeFieldNumber;
const int PeerConf::kRemovePrivateAsFieldNumber;
const int PeerConf::kRouteFlapDampingFieldNumber;
const int PeerConf::kSendCommunityFieldNumber;
const int PeerConf::kRemoteCapFieldNumber;
const int PeerConf::kLocalCapFieldNumber;
const int PeerConf::kIdFieldNumber;
const int PeerConf::kPrefixLimitsFieldNumber;
const int PeerConf::kLocalAddressFieldNumber;
const int PeerConf::kNeighborInterfaceFieldNumber;
const int PeerConf::kVrfFieldNumber;
const int PeerConf::kAllowOwnAsFieldNumber;
const int PeerConf::kReplacePeerAsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerConf::PeerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsPeerConf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PeerConf)
}
PeerConf::PeerConf(const PeerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      remote_cap_(from.remote_cap_),
      local_cap_(from.local_cap_),
      prefix_limits_(from.prefix_limits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.auth_password().size() > 0) {
    auth_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  neighbor_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neighbor_address().size() > 0) {
    neighbor_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  peer_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.peer_group().size() > 0) {
    peer_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.local_address().size() > 0) {
    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  neighbor_interface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neighbor_interface().size() > 0) {
    neighbor_interface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_interface_);
  }
  vrf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vrf().size() > 0) {
    vrf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_);
  }
  ::memcpy(&local_as_, &from.local_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_own_as_) -
    reinterpret_cast<char*>(&local_as_)) + sizeof(allow_own_as_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PeerConf)
}

void PeerConf::SharedCtor() {
  auth_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_interface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vrf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_own_as_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(allow_own_as_));
  _cached_size_ = 0;
}

PeerConf::~PeerConf() {
  // @@protoc_insertion_point(destructor:gobgpapi.PeerConf)
  SharedDtor();
}

void PeerConf::SharedDtor() {
  auth_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_interface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vrf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerConf::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerConf& PeerConf::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsPeerConf();
  return *internal_default_instance();
}

PeerConf* PeerConf::New(::google::protobuf::Arena* arena) const {
  PeerConf* n = new PeerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PeerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_cap_.Clear();
  local_cap_.Clear();
  prefix_limits_.Clear();
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vrf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_own_as_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(allow_own_as_));
  _internal_metadata_.Clear();
}

bool PeerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.PeerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string auth_password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth_password().data(), static_cast<int>(this->auth_password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.auth_password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 local_as = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string neighbor_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neighbor_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neighbor_address().data(), static_cast<int>(this->neighbor_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.neighbor_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peer_as = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string peer_group = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer_group().data(), static_cast<int>(this->peer_group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.peer_group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peer_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_remove_private_as(static_cast< ::gobgpapi::PeerConf_RemovePrivateAs >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool route_flap_damping = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &route_flap_damping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_community = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_community_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes remote_cap = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_remote_cap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes local_cap = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_local_cap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.PrefixLimit prefix_limits = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_prefix_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_address = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_address().data(), static_cast<int>(this->local_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.local_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string neighbor_interface = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neighbor_interface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neighbor_interface().data(), static_cast<int>(this->neighbor_interface().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.neighbor_interface"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vrf = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vrf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vrf().data(), static_cast<int>(this->vrf().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.vrf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 allow_own_as = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allow_own_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool replace_peer_as = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replace_peer_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.PeerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.PeerConf)
  return false;
#undef DO_
}

void PeerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.PeerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_password().data(), static_cast<int>(this->auth_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.auth_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_password(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->local_as(), output);
  }

  // string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), static_cast<int>(this->neighbor_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.neighbor_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->neighbor_address(), output);
  }

  // uint32 peer_as = 5;
  if (this->peer_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peer_as(), output);
  }

  // string peer_group = 6;
  if (this->peer_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_group().data(), static_cast<int>(this->peer_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.peer_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->peer_group(), output);
  }

  // uint32 peer_type = 7;
  if (this->peer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->peer_type(), output);
  }

  // .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
  if (this->remove_private_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->remove_private_as(), output);
  }

  // bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->route_flap_damping(), output);
  }

  // uint32 send_community = 10;
  if (this->send_community() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->send_community(), output);
  }

  // repeated bytes remote_cap = 11;
  for (int i = 0, n = this->remote_cap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->remote_cap(i), output);
  }

  // repeated bytes local_cap = 12;
  for (int i = 0, n = this->local_cap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->local_cap(i), output);
  }

  // string id = 13;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->id(), output);
  }

  // repeated .gobgpapi.PrefixLimit prefix_limits = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prefix_limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->prefix_limits(static_cast<int>(i)), output);
  }

  // string local_address = 15;
  if (this->local_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_address().data(), static_cast<int>(this->local_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.local_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->local_address(), output);
  }

  // string neighbor_interface = 16;
  if (this->neighbor_interface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_interface().data(), static_cast<int>(this->neighbor_interface().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.neighbor_interface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->neighbor_interface(), output);
  }

  // string vrf = 17;
  if (this->vrf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrf().data(), static_cast<int>(this->vrf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.vrf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->vrf(), output);
  }

  // uint32 allow_own_as = 18;
  if (this->allow_own_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->allow_own_as(), output);
  }

  // bool replace_peer_as = 19;
  if (this->replace_peer_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->replace_peer_as(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.PeerConf)
}

::google::protobuf::uint8* PeerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PeerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_password().data(), static_cast<int>(this->auth_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.auth_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->local_as(), target);
  }

  // string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), static_cast<int>(this->neighbor_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.neighbor_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->neighbor_address(), target);
  }

  // uint32 peer_as = 5;
  if (this->peer_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peer_as(), target);
  }

  // string peer_group = 6;
  if (this->peer_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_group().data(), static_cast<int>(this->peer_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.peer_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->peer_group(), target);
  }

  // uint32 peer_type = 7;
  if (this->peer_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->peer_type(), target);
  }

  // .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
  if (this->remove_private_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->remove_private_as(), target);
  }

  // bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->route_flap_damping(), target);
  }

  // uint32 send_community = 10;
  if (this->send_community() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->send_community(), target);
  }

  // repeated bytes remote_cap = 11;
  for (int i = 0, n = this->remote_cap_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(11, this->remote_cap(i), target);
  }

  // repeated bytes local_cap = 12;
  for (int i = 0, n = this->local_cap_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(12, this->local_cap(i), target);
  }

  // string id = 13;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->id(), target);
  }

  // repeated .gobgpapi.PrefixLimit prefix_limits = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prefix_limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->prefix_limits(static_cast<int>(i)), deterministic, target);
  }

  // string local_address = 15;
  if (this->local_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_address().data(), static_cast<int>(this->local_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.local_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->local_address(), target);
  }

  // string neighbor_interface = 16;
  if (this->neighbor_interface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_interface().data(), static_cast<int>(this->neighbor_interface().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.neighbor_interface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->neighbor_interface(), target);
  }

  // string vrf = 17;
  if (this->vrf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vrf().data(), static_cast<int>(this->vrf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.vrf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->vrf(), target);
  }

  // uint32 allow_own_as = 18;
  if (this->allow_own_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->allow_own_as(), target);
  }

  // bool replace_peer_as = 19;
  if (this->replace_peer_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->replace_peer_as(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PeerConf)
  return target;
}

size_t PeerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PeerConf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes remote_cap = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remote_cap_size());
  for (int i = 0, n = this->remote_cap_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->remote_cap(i));
  }

  // repeated bytes local_cap = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->local_cap_size());
  for (int i = 0, n = this->local_cap_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->local_cap(i));
  }

  // repeated .gobgpapi.PrefixLimit prefix_limits = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->prefix_limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prefix_limits(static_cast<int>(i)));
    }
  }

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neighbor_address());
  }

  // string peer_group = 6;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_group());
  }

  // string id = 13;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string local_address = 15;
  if (this->local_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_address());
  }

  // string neighbor_interface = 16;
  if (this->neighbor_interface().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neighbor_interface());
  }

  // string vrf = 17;
  if (this->vrf().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vrf());
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_as());
  }

  // uint32 peer_as = 5;
  if (this->peer_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_as());
  }

  // uint32 peer_type = 7;
  if (this->peer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_type());
  }

  // .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
  if (this->remove_private_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->remove_private_as());
  }

  // uint32 send_community = 10;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_community());
  }

  // bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // bool replace_peer_as = 19;
  if (this->replace_peer_as() != 0) {
    total_size += 2 + 1;
  }

  // uint32 allow_own_as = 18;
  if (this->allow_own_as() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allow_own_as());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PeerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PeerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PeerConf)
    MergeFrom(*source);
  }
}

void PeerConf::MergeFrom(const PeerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PeerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remote_cap_.MergeFrom(from.remote_cap_);
  local_cap_.MergeFrom(from.local_cap_);
  prefix_limits_.MergeFrom(from.prefix_limits_);
  if (from.auth_password().size() > 0) {

    auth_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.neighbor_address().size() > 0) {

    neighbor_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  if (from.peer_group().size() > 0) {

    peer_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.local_address().size() > 0) {

    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  if (from.neighbor_interface().size() > 0) {

    neighbor_interface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_interface_);
  }
  if (from.vrf().size() > 0) {

    vrf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_);
  }
  if (from.local_as() != 0) {
    set_local_as(from.local_as());
  }
  if (from.peer_as() != 0) {
    set_peer_as(from.peer_as());
  }
  if (from.peer_type() != 0) {
    set_peer_type(from.peer_type());
  }
  if (from.remove_private_as() != 0) {
    set_remove_private_as(from.remove_private_as());
  }
  if (from.send_community() != 0) {
    set_send_community(from.send_community());
  }
  if (from.route_flap_damping() != 0) {
    set_route_flap_damping(from.route_flap_damping());
  }
  if (from.replace_peer_as() != 0) {
    set_replace_peer_as(from.replace_peer_as());
  }
  if (from.allow_own_as() != 0) {
    set_allow_own_as(from.allow_own_as());
  }
}

void PeerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PeerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerConf::CopyFrom(const PeerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PeerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConf::IsInitialized() const {
  return true;
}

void PeerConf::Swap(PeerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerConf::InternalSwap(PeerConf* other) {
  using std::swap;
  remote_cap_.InternalSwap(&other->remote_cap_);
  local_cap_.InternalSwap(&other->local_cap_);
  prefix_limits_.InternalSwap(&other->prefix_limits_);
  auth_password_.Swap(&other->auth_password_);
  description_.Swap(&other->description_);
  neighbor_address_.Swap(&other->neighbor_address_);
  peer_group_.Swap(&other->peer_group_);
  id_.Swap(&other->id_);
  local_address_.Swap(&other->local_address_);
  neighbor_interface_.Swap(&other->neighbor_interface_);
  vrf_.Swap(&other->vrf_);
  swap(local_as_, other->local_as_);
  swap(peer_as_, other->peer_as_);
  swap(peer_type_, other->peer_type_);
  swap(remove_private_as_, other->remove_private_as_);
  swap(send_community_, other->send_community_);
  swap(route_flap_damping_, other->route_flap_damping_);
  swap(replace_peer_as_, other->replace_peer_as_);
  swap(allow_own_as_, other->allow_own_as_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerConf::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EbgpMultihop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EbgpMultihop::kEnabledFieldNumber;
const int EbgpMultihop::kMultihopTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EbgpMultihop::EbgpMultihop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEbgpMultihop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EbgpMultihop)
}
EbgpMultihop::EbgpMultihop(const EbgpMultihop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&multihop_ttl_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(multihop_ttl_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EbgpMultihop)
}

void EbgpMultihop::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multihop_ttl_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(multihop_ttl_));
  _cached_size_ = 0;
}

EbgpMultihop::~EbgpMultihop() {
  // @@protoc_insertion_point(destructor:gobgpapi.EbgpMultihop)
  SharedDtor();
}

void EbgpMultihop::SharedDtor() {
}

void EbgpMultihop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EbgpMultihop::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EbgpMultihop& EbgpMultihop::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEbgpMultihop();
  return *internal_default_instance();
}

EbgpMultihop* EbgpMultihop::New(::google::protobuf::Arena* arena) const {
  EbgpMultihop* n = new EbgpMultihop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EbgpMultihop::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EbgpMultihop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multihop_ttl_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(multihop_ttl_));
  _internal_metadata_.Clear();
}

bool EbgpMultihop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EbgpMultihop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 multihop_ttl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multihop_ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EbgpMultihop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EbgpMultihop)
  return false;
#undef DO_
}

void EbgpMultihop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EbgpMultihop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->multihop_ttl(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EbgpMultihop)
}

::google::protobuf::uint8* EbgpMultihop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EbgpMultihop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->multihop_ttl(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EbgpMultihop)
  return target;
}

size_t EbgpMultihop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EbgpMultihop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multihop_ttl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EbgpMultihop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EbgpMultihop)
  GOOGLE_DCHECK_NE(&from, this);
  const EbgpMultihop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EbgpMultihop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EbgpMultihop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EbgpMultihop)
    MergeFrom(*source);
  }
}

void EbgpMultihop::MergeFrom(const EbgpMultihop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EbgpMultihop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.multihop_ttl() != 0) {
    set_multihop_ttl(from.multihop_ttl());
  }
}

void EbgpMultihop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EbgpMultihop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpMultihop::CopyFrom(const EbgpMultihop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EbgpMultihop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpMultihop::IsInitialized() const {
  return true;
}

void EbgpMultihop::Swap(EbgpMultihop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EbgpMultihop::InternalSwap(EbgpMultihop* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(multihop_ttl_, other->multihop_ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EbgpMultihop::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteReflector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteReflector::kRouteReflectorClientFieldNumber;
const int RouteReflector::kRouteReflectorClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteReflector::RouteReflector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRouteReflector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteReflector)
}
RouteReflector::RouteReflector(const RouteReflector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_reflector_cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_reflector_cluster_id().size() > 0) {
    route_reflector_cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_reflector_cluster_id_);
  }
  route_reflector_client_ = from.route_reflector_client_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteReflector)
}

void RouteReflector::SharedCtor() {
  route_reflector_cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_reflector_client_ = false;
  _cached_size_ = 0;
}

RouteReflector::~RouteReflector() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteReflector)
  SharedDtor();
}

void RouteReflector::SharedDtor() {
  route_reflector_cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RouteReflector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteReflector::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteReflector& RouteReflector::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRouteReflector();
  return *internal_default_instance();
}

RouteReflector* RouteReflector::New(::google::protobuf::Arena* arena) const {
  RouteReflector* n = new RouteReflector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteReflector::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteReflector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_reflector_cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_reflector_client_ = false;
  _internal_metadata_.Clear();
}

bool RouteReflector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteReflector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool route_reflector_client = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &route_reflector_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_reflector_cluster_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_reflector_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_reflector_cluster_id().data(), static_cast<int>(this->route_reflector_cluster_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.RouteReflector.route_reflector_cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteReflector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteReflector)
  return false;
#undef DO_
}

void RouteReflector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteReflector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->route_reflector_client(), output);
  }

  // string route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_reflector_cluster_id().data(), static_cast<int>(this->route_reflector_cluster_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RouteReflector.route_reflector_cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->route_reflector_cluster_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteReflector)
}

::google::protobuf::uint8* RouteReflector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteReflector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->route_reflector_client(), target);
  }

  // string route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_reflector_cluster_id().data(), static_cast<int>(this->route_reflector_cluster_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RouteReflector.route_reflector_cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->route_reflector_cluster_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteReflector)
  return target;
}

size_t RouteReflector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteReflector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_reflector_cluster_id());
  }

  // bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteReflector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteReflector)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteReflector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteReflector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteReflector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteReflector)
    MergeFrom(*source);
  }
}

void RouteReflector::MergeFrom(const RouteReflector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteReflector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_reflector_cluster_id().size() > 0) {

    route_reflector_cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_reflector_cluster_id_);
  }
  if (from.route_reflector_client() != 0) {
    set_route_reflector_client(from.route_reflector_client());
  }
}

void RouteReflector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteReflector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteReflector::CopyFrom(const RouteReflector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteReflector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteReflector::IsInitialized() const {
  return true;
}

void RouteReflector::Swap(RouteReflector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteReflector::InternalSwap(RouteReflector* other) {
  using std::swap;
  route_reflector_cluster_id_.Swap(&other->route_reflector_cluster_id_);
  swap(route_reflector_client_, other->route_reflector_client_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteReflector::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerState::InitAsDefaultInstance() {
  ::gobgpapi::_PeerState_default_instance_._instance.get_mutable()->messages_ = const_cast< ::gobgpapi::Messages*>(
      ::gobgpapi::Messages::internal_default_instance());
  ::gobgpapi::_PeerState_default_instance_._instance.get_mutable()->queues_ = const_cast< ::gobgpapi::Queues*>(
      ::gobgpapi::Queues::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerState::kAuthPasswordFieldNumber;
const int PeerState::kDescriptionFieldNumber;
const int PeerState::kLocalAsFieldNumber;
const int PeerState::kMessagesFieldNumber;
const int PeerState::kNeighborAddressFieldNumber;
const int PeerState::kPeerAsFieldNumber;
const int PeerState::kPeerGroupFieldNumber;
const int PeerState::kPeerTypeFieldNumber;
const int PeerState::kQueuesFieldNumber;
const int PeerState::kRemovePrivateAsFieldNumber;
const int PeerState::kRouteFlapDampingFieldNumber;
const int PeerState::kSendCommunityFieldNumber;
const int PeerState::kSessionStateFieldNumber;
const int PeerState::kSupportedCapabilitiesFieldNumber;
const int PeerState::kBgpStateFieldNumber;
const int PeerState::kAdminStateFieldNumber;
const int PeerState::kReceivedFieldNumber;
const int PeerState::kAcceptedFieldNumber;
const int PeerState::kAdvertisedFieldNumber;
const int PeerState::kOutQFieldNumber;
const int PeerState::kFlopsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerState::PeerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsPeerState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PeerState)
}
PeerState::PeerState(const PeerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      supported_capabilities_(from.supported_capabilities_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.auth_password().size() > 0) {
    auth_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  neighbor_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neighbor_address().size() > 0) {
    neighbor_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  peer_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.peer_group().size() > 0) {
    peer_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  bgp_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bgp_state().size() > 0) {
    bgp_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bgp_state_);
  }
  if (from.has_messages()) {
    messages_ = new ::gobgpapi::Messages(*from.messages_);
  } else {
    messages_ = NULL;
  }
  if (from.has_queues()) {
    queues_ = new ::gobgpapi::Queues(*from.queues_);
  } else {
    queues_ = NULL;
  }
  ::memcpy(&local_as_, &from.local_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&flops_) -
    reinterpret_cast<char*>(&local_as_)) + sizeof(flops_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PeerState)
}

void PeerState::SharedCtor() {
  auth_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bgp_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&messages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flops_) -
      reinterpret_cast<char*>(&messages_)) + sizeof(flops_));
  _cached_size_ = 0;
}

PeerState::~PeerState() {
  // @@protoc_insertion_point(destructor:gobgpapi.PeerState)
  SharedDtor();
}

void PeerState::SharedDtor() {
  auth_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bgp_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete messages_;
  if (this != internal_default_instance()) delete queues_;
}

void PeerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerState& PeerState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsPeerState();
  return *internal_default_instance();
}

PeerState* PeerState::New(::google::protobuf::Arena* arena) const {
  PeerState* n = new PeerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PeerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_capabilities_.Clear();
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bgp_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && messages_ != NULL) {
    delete messages_;
  }
  messages_ = NULL;
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flops_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(flops_));
  _internal_metadata_.Clear();
}

bool PeerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.PeerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string auth_password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth_password().data(), static_cast<int>(this->auth_password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.auth_password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 local_as = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Messages messages = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string neighbor_address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neighbor_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neighbor_address().data(), static_cast<int>(this->neighbor_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.neighbor_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peer_as = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string peer_group = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer_group().data(), static_cast<int>(this->peer_group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.peer_group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peer_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Queues queues = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remove_private_as = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remove_private_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool route_flap_damping = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &route_flap_damping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_community = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_community_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_state = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string supported_capabilities = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_supported_capabilities()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->supported_capabilities(this->supported_capabilities_size() - 1).data(),
            static_cast<int>(this->supported_capabilities(this->supported_capabilities_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.supported_capabilities"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bgp_state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgp_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bgp_state().data(), static_cast<int>(this->bgp_state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.bgp_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.PeerState.AdminState admin_state = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_admin_state(static_cast< ::gobgpapi::PeerState_AdminState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 received = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accepted = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 advertised = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advertised_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 out_q = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_q_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flops = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.PeerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.PeerState)
  return false;
#undef DO_
}

void PeerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.PeerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_password().data(), static_cast<int>(this->auth_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.auth_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_password(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->local_as(), output);
  }

  // .gobgpapi.Messages messages = 4;
  if (this->has_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->messages_, output);
  }

  // string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), static_cast<int>(this->neighbor_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.neighbor_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->neighbor_address(), output);
  }

  // uint32 peer_as = 6;
  if (this->peer_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peer_as(), output);
  }

  // string peer_group = 7;
  if (this->peer_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_group().data(), static_cast<int>(this->peer_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.peer_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->peer_group(), output);
  }

  // uint32 peer_type = 8;
  if (this->peer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->peer_type(), output);
  }

  // .gobgpapi.Queues queues = 9;
  if (this->has_queues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->queues_, output);
  }

  // uint32 remove_private_as = 10;
  if (this->remove_private_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->remove_private_as(), output);
  }

  // bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->route_flap_damping(), output);
  }

  // uint32 send_community = 12;
  if (this->send_community() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->send_community(), output);
  }

  // uint32 session_state = 13;
  if (this->session_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->session_state(), output);
  }

  // repeated string supported_capabilities = 14;
  for (int i = 0, n = this->supported_capabilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_capabilities(i).data(), static_cast<int>(this->supported_capabilities(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.supported_capabilities");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->supported_capabilities(i), output);
  }

  // string bgp_state = 15;
  if (this->bgp_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgp_state().data(), static_cast<int>(this->bgp_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.bgp_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->bgp_state(), output);
  }

  // .gobgpapi.PeerState.AdminState admin_state = 16;
  if (this->admin_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->admin_state(), output);
  }

  // uint32 received = 17;
  if (this->received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->received(), output);
  }

  // uint32 accepted = 18;
  if (this->accepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->accepted(), output);
  }

  // uint32 advertised = 19;
  if (this->advertised() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->advertised(), output);
  }

  // uint32 out_q = 20;
  if (this->out_q() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->out_q(), output);
  }

  // uint32 flops = 21;
  if (this->flops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->flops(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.PeerState)
}

::google::protobuf::uint8* PeerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PeerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_password().data(), static_cast<int>(this->auth_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.auth_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->local_as(), target);
  }

  // .gobgpapi.Messages messages = 4;
  if (this->has_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->messages_, deterministic, target);
  }

  // string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), static_cast<int>(this->neighbor_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.neighbor_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->neighbor_address(), target);
  }

  // uint32 peer_as = 6;
  if (this->peer_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peer_as(), target);
  }

  // string peer_group = 7;
  if (this->peer_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_group().data(), static_cast<int>(this->peer_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.peer_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->peer_group(), target);
  }

  // uint32 peer_type = 8;
  if (this->peer_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->peer_type(), target);
  }

  // .gobgpapi.Queues queues = 9;
  if (this->has_queues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->queues_, deterministic, target);
  }

  // uint32 remove_private_as = 10;
  if (this->remove_private_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->remove_private_as(), target);
  }

  // bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->route_flap_damping(), target);
  }

  // uint32 send_community = 12;
  if (this->send_community() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->send_community(), target);
  }

  // uint32 session_state = 13;
  if (this->session_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->session_state(), target);
  }

  // repeated string supported_capabilities = 14;
  for (int i = 0, n = this->supported_capabilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_capabilities(i).data(), static_cast<int>(this->supported_capabilities(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.supported_capabilities");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->supported_capabilities(i), target);
  }

  // string bgp_state = 15;
  if (this->bgp_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgp_state().data(), static_cast<int>(this->bgp_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.bgp_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->bgp_state(), target);
  }

  // .gobgpapi.PeerState.AdminState admin_state = 16;
  if (this->admin_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->admin_state(), target);
  }

  // uint32 received = 17;
  if (this->received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->received(), target);
  }

  // uint32 accepted = 18;
  if (this->accepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->accepted(), target);
  }

  // uint32 advertised = 19;
  if (this->advertised() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->advertised(), target);
  }

  // uint32 out_q = 20;
  if (this->out_q() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->out_q(), target);
  }

  // uint32 flops = 21;
  if (this->flops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->flops(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PeerState)
  return target;
}

size_t PeerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PeerState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string supported_capabilities = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->supported_capabilities_size());
  for (int i = 0, n = this->supported_capabilities_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->supported_capabilities(i));
  }

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neighbor_address());
  }

  // string peer_group = 7;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_group());
  }

  // string bgp_state = 15;
  if (this->bgp_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bgp_state());
  }

  // .gobgpapi.Messages messages = 4;
  if (this->has_messages()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->messages_);
  }

  // .gobgpapi.Queues queues = 9;
  if (this->has_queues()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queues_);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_as());
  }

  // uint32 peer_as = 6;
  if (this->peer_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_as());
  }

  // uint32 peer_type = 8;
  if (this->peer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_type());
  }

  // uint32 remove_private_as = 10;
  if (this->remove_private_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remove_private_as());
  }

  // bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_community = 12;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_community());
  }

  // uint32 session_state = 13;
  if (this->session_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_state());
  }

  // .gobgpapi.PeerState.AdminState admin_state = 16;
  if (this->admin_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->admin_state());
  }

  // uint32 received = 17;
  if (this->received() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->received());
  }

  // uint32 accepted = 18;
  if (this->accepted() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accepted());
  }

  // uint32 advertised = 19;
  if (this->advertised() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->advertised());
  }

  // uint32 out_q = 20;
  if (this->out_q() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_q());
  }

  // uint32 flops = 21;
  if (this->flops() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flops());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PeerState)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PeerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PeerState)
    MergeFrom(*source);
  }
}

void PeerState::MergeFrom(const PeerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PeerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_capabilities_.MergeFrom(from.supported_capabilities_);
  if (from.auth_password().size() > 0) {

    auth_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.neighbor_address().size() > 0) {

    neighbor_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  if (from.peer_group().size() > 0) {

    peer_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  if (from.bgp_state().size() > 0) {

    bgp_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bgp_state_);
  }
  if (from.has_messages()) {
    mutable_messages()->::gobgpapi::Messages::MergeFrom(from.messages());
  }
  if (from.has_queues()) {
    mutable_queues()->::gobgpapi::Queues::MergeFrom(from.queues());
  }
  if (from.local_as() != 0) {
    set_local_as(from.local_as());
  }
  if (from.peer_as() != 0) {
    set_peer_as(from.peer_as());
  }
  if (from.peer_type() != 0) {
    set_peer_type(from.peer_type());
  }
  if (from.remove_private_as() != 0) {
    set_remove_private_as(from.remove_private_as());
  }
  if (from.route_flap_damping() != 0) {
    set_route_flap_damping(from.route_flap_damping());
  }
  if (from.send_community() != 0) {
    set_send_community(from.send_community());
  }
  if (from.session_state() != 0) {
    set_session_state(from.session_state());
  }
  if (from.admin_state() != 0) {
    set_admin_state(from.admin_state());
  }
  if (from.received() != 0) {
    set_received(from.received());
  }
  if (from.accepted() != 0) {
    set_accepted(from.accepted());
  }
  if (from.advertised() != 0) {
    set_advertised(from.advertised());
  }
  if (from.out_q() != 0) {
    set_out_q(from.out_q());
  }
  if (from.flops() != 0) {
    set_flops(from.flops());
  }
}

void PeerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PeerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerState::CopyFrom(const PeerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PeerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerState::IsInitialized() const {
  return true;
}

void PeerState::Swap(PeerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerState::InternalSwap(PeerState* other) {
  using std::swap;
  supported_capabilities_.InternalSwap(&other->supported_capabilities_);
  auth_password_.Swap(&other->auth_password_);
  description_.Swap(&other->description_);
  neighbor_address_.Swap(&other->neighbor_address_);
  peer_group_.Swap(&other->peer_group_);
  bgp_state_.Swap(&other->bgp_state_);
  swap(messages_, other->messages_);
  swap(queues_, other->queues_);
  swap(local_as_, other->local_as_);
  swap(peer_as_, other->peer_as_);
  swap(peer_type_, other->peer_type_);
  swap(remove_private_as_, other->remove_private_as_);
  swap(route_flap_damping_, other->route_flap_damping_);
  swap(send_community_, other->send_community_);
  swap(session_state_, other->session_state_);
  swap(admin_state_, other->admin_state_);
  swap(received_, other->received_);
  swap(accepted_, other->accepted_);
  swap(advertised_, other->advertised_);
  swap(out_q_, other->out_q_);
  swap(flops_, other->flops_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Messages::InitAsDefaultInstance() {
  ::gobgpapi::_Messages_default_instance_._instance.get_mutable()->received_ = const_cast< ::gobgpapi::Message*>(
      ::gobgpapi::Message::internal_default_instance());
  ::gobgpapi::_Messages_default_instance_._instance.get_mutable()->sent_ = const_cast< ::gobgpapi::Message*>(
      ::gobgpapi::Message::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Messages::kReceivedFieldNumber;
const int Messages::kSentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Messages::Messages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsMessages();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Messages)
}
Messages::Messages(const Messages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_received()) {
    received_ = new ::gobgpapi::Message(*from.received_);
  } else {
    received_ = NULL;
  }
  if (from.has_sent()) {
    sent_ = new ::gobgpapi::Message(*from.sent_);
  } else {
    sent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Messages)
}

void Messages::SharedCtor() {
  ::memset(&received_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sent_) -
      reinterpret_cast<char*>(&received_)) + sizeof(sent_));
  _cached_size_ = 0;
}

Messages::~Messages() {
  // @@protoc_insertion_point(destructor:gobgpapi.Messages)
  SharedDtor();
}

void Messages::SharedDtor() {
  if (this != internal_default_instance()) delete received_;
  if (this != internal_default_instance()) delete sent_;
}

void Messages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Messages::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Messages& Messages::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsMessages();
  return *internal_default_instance();
}

Messages* Messages::New(::google::protobuf::Arena* arena) const {
  Messages* n = new Messages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Messages::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Messages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && received_ != NULL) {
    delete received_;
  }
  received_ = NULL;
  if (GetArenaNoVirtual() == NULL && sent_ != NULL) {
    delete sent_;
  }
  sent_ = NULL;
  _internal_metadata_.Clear();
}

bool Messages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Messages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Message received = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_received()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Message sent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Messages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Messages)
  return false;
#undef DO_
}

void Messages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Messages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Message received = 1;
  if (this->has_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->received_, output);
  }

  // .gobgpapi.Message sent = 2;
  if (this->has_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sent_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Messages)
}

::google::protobuf::uint8* Messages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Messages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Message received = 1;
  if (this->has_received()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->received_, deterministic, target);
  }

  // .gobgpapi.Message sent = 2;
  if (this->has_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sent_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Messages)
  return target;
}

size_t Messages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Messages)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.Message received = 1;
  if (this->has_received()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->received_);
  }

  // .gobgpapi.Message sent = 2;
  if (this->has_sent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Messages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  const Messages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Messages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Messages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Messages)
    MergeFrom(*source);
  }
}

void Messages::MergeFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_received()) {
    mutable_received()->::gobgpapi::Message::MergeFrom(from.received());
  }
  if (from.has_sent()) {
    mutable_sent()->::gobgpapi::Message::MergeFrom(from.sent());
  }
}

void Messages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Messages::CopyFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messages::IsInitialized() const {
  return true;
}

void Messages::Swap(Messages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Messages::InternalSwap(Messages* other) {
  using std::swap;
  swap(received_, other->received_);
  swap(sent_, other->sent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Messages::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kNOTIFICATIONFieldNumber;
const int Message::kUPDATEFieldNumber;
const int Message::kOPENFieldNumber;
const int Message::kKEEPALIVEFieldNumber;
const int Message::kREFRESHFieldNumber;
const int Message::kDISCARDEDFieldNumber;
const int Message::kTOTALFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&notification_, &from.notification_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&notification_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Message)
}

void Message::SharedCtor() {
  ::memset(&notification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&notification_)) + sizeof(total_));
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:gobgpapi.Message)
  SharedDtor();
}

void Message::SharedDtor() {
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsMessage();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&notification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&notification_)) + sizeof(total_));
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 NOTIFICATION = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &notification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 UPDATE = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 OPEN = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 KEEPALIVE = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keepalive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 REFRESH = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 DISCARDED = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &discarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 TOTAL = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 NOTIFICATION = 1;
  if (this->notification() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->notification(), output);
  }

  // uint64 UPDATE = 2;
  if (this->update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->update(), output);
  }

  // uint64 OPEN = 3;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->open(), output);
  }

  // uint64 KEEPALIVE = 4;
  if (this->keepalive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->keepalive(), output);
  }

  // uint64 REFRESH = 5;
  if (this->refresh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->refresh(), output);
  }

  // uint64 DISCARDED = 6;
  if (this->discarded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->discarded(), output);
  }

  // uint64 TOTAL = 7;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->total(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 NOTIFICATION = 1;
  if (this->notification() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->notification(), target);
  }

  // uint64 UPDATE = 2;
  if (this->update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->update(), target);
  }

  // uint64 OPEN = 3;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->open(), target);
  }

  // uint64 KEEPALIVE = 4;
  if (this->keepalive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->keepalive(), target);
  }

  // uint64 REFRESH = 5;
  if (this->refresh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->refresh(), target);
  }

  // uint64 DISCARDED = 6;
  if (this->discarded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->discarded(), target);
  }

  // uint64 TOTAL = 7;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->total(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 NOTIFICATION = 1;
  if (this->notification() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->notification());
  }

  // uint64 UPDATE = 2;
  if (this->update() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->update());
  }

  // uint64 OPEN = 3;
  if (this->open() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->open());
  }

  // uint64 KEEPALIVE = 4;
  if (this->keepalive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keepalive());
  }

  // uint64 REFRESH = 5;
  if (this->refresh() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->refresh());
  }

  // uint64 DISCARDED = 6;
  if (this->discarded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->discarded());
  }

  // uint64 TOTAL = 7;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notification() != 0) {
    set_notification(from.notification());
  }
  if (from.update() != 0) {
    set_update(from.update());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.keepalive() != 0) {
    set_keepalive(from.keepalive());
  }
  if (from.refresh() != 0) {
    set_refresh(from.refresh());
  }
  if (from.discarded() != 0) {
    set_discarded(from.discarded());
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  swap(notification_, other->notification_);
  swap(update_, other->update_);
  swap(open_, other->open_);
  swap(keepalive_, other->keepalive_);
  swap(refresh_, other->refresh_);
  swap(discarded_, other->discarded_);
  swap(total_, other->total_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Queues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Queues::kInputFieldNumber;
const int Queues::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Queues::Queues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsQueues();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Queues)
}
Queues::Queues(const Queues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_, &from.input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&input_)) + sizeof(output_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Queues)
}

void Queues::SharedCtor() {
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
  _cached_size_ = 0;
}

Queues::~Queues() {
  // @@protoc_insertion_point(destructor:gobgpapi.Queues)
  SharedDtor();
}

void Queues::SharedDtor() {
}

void Queues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Queues::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Queues& Queues::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsQueues();
  return *internal_default_instance();
}

Queues* Queues::New(::google::protobuf::Arena* arena) const {
  Queues* n = new Queues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Queues::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
  _internal_metadata_.Clear();
}

bool Queues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Queues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Queues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Queues)
  return false;
#undef DO_
}

void Queues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 input = 1;
  if (this->input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input(), output);
  }

  // uint32 output = 2;
  if (this->output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->output(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Queues)
}

::google::protobuf::uint8* Queues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 input = 1;
  if (this->input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input(), target);
  }

  // uint32 output = 2;
  if (this->output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->output(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Queues)
  return target;
}

size_t Queues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Queues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 input = 1;
  if (this->input() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input());
  }

  // uint32 output = 2;
  if (this->output() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Queues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  const Queues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Queues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Queues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Queues)
    MergeFrom(*source);
  }
}

void Queues::MergeFrom(const Queues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input() != 0) {
    set_input(from.input());
  }
  if (from.output() != 0) {
    set_output(from.output());
  }
}

void Queues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Queues::CopyFrom(const Queues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Queues::IsInitialized() const {
  return true;
}

void Queues::Swap(Queues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Queues::InternalSwap(Queues* other) {
  using std::swap;
  swap(input_, other->input_);
  swap(output_, other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Queues::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Timers::InitAsDefaultInstance() {
  ::gobgpapi::_Timers_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::TimersConfig*>(
      ::gobgpapi::TimersConfig::internal_default_instance());
  ::gobgpapi::_Timers_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::TimersState*>(
      ::gobgpapi::TimersState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timers::kConfigFieldNumber;
const int Timers::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timers::Timers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsTimers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Timers)
}
Timers::Timers(const Timers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::gobgpapi::TimersConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::TimersState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Timers)
}

void Timers::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Timers::~Timers() {
  // @@protoc_insertion_point(destructor:gobgpapi.Timers)
  SharedDtor();
}

void Timers::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Timers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timers::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Timers& Timers::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsTimers();
  return *internal_default_instance();
}

Timers* Timers::New(::google::protobuf::Arena* arena) const {
  Timers* n = new Timers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timers::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Timers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Timers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Timers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.TimersConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.TimersState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Timers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Timers)
  return false;
#undef DO_
}

void Timers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Timers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TimersConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .gobgpapi.TimersState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Timers)
}

::google::protobuf::uint8* Timers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Timers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TimersConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .gobgpapi.TimersState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Timers)
  return target;
}

size_t Timers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Timers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.TimersConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.TimersState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Timers)
  GOOGLE_DCHECK_NE(&from, this);
  const Timers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Timers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Timers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Timers)
    MergeFrom(*source);
  }
}

void Timers::MergeFrom(const Timers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Timers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::gobgpapi::TimersConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::TimersState::MergeFrom(from.state());
  }
}

void Timers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Timers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timers::CopyFrom(const Timers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Timers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timers::IsInitialized() const {
  return true;
}

void Timers::Swap(Timers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timers::InternalSwap(Timers* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Timers::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimersConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimersConfig::kConnectRetryFieldNumber;
const int TimersConfig::kHoldTimeFieldNumber;
const int TimersConfig::kKeepaliveIntervalFieldNumber;
const int TimersConfig::kMinimumAdvertisementIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimersConfig::TimersConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsTimersConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TimersConfig)
}
TimersConfig::TimersConfig(const TimersConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connect_retry_, &from.connect_retry_,
    static_cast<size_t>(reinterpret_cast<char*>(&minimum_advertisement_interval_) -
    reinterpret_cast<char*>(&connect_retry_)) + sizeof(minimum_advertisement_interval_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TimersConfig)
}

void TimersConfig::SharedCtor() {
  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minimum_advertisement_interval_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(minimum_advertisement_interval_));
  _cached_size_ = 0;
}

TimersConfig::~TimersConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.TimersConfig)
  SharedDtor();
}

void TimersConfig::SharedDtor() {
}

void TimersConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimersConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimersConfig& TimersConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsTimersConfig();
  return *internal_default_instance();
}

TimersConfig* TimersConfig::New(::google::protobuf::Arena* arena) const {
  TimersConfig* n = new TimersConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimersConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TimersConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minimum_advertisement_interval_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(minimum_advertisement_interval_));
  _internal_metadata_.Clear();
}

bool TimersConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.TimersConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 connect_retry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connect_retry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 hold_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keepalive_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keepalive_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 minimum_advertisement_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minimum_advertisement_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.TimersConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.TimersConfig)
  return false;
#undef DO_
}

void TimersConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.TimersConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->connect_retry(), output);
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hold_time(), output);
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->keepalive_interval(), output);
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->minimum_advertisement_interval(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.TimersConfig)
}

::google::protobuf::uint8* TimersConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TimersConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->connect_retry(), target);
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hold_time(), target);
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->keepalive_interval(), target);
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->minimum_advertisement_interval(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TimersConfig)
  return target;
}

size_t TimersConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TimersConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connect_retry());
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hold_time());
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keepalive_interval());
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minimum_advertisement_interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimersConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TimersConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TimersConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimersConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TimersConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TimersConfig)
    MergeFrom(*source);
  }
}

void TimersConfig::MergeFrom(const TimersConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TimersConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connect_retry() != 0) {
    set_connect_retry(from.connect_retry());
  }
  if (from.hold_time() != 0) {
    set_hold_time(from.hold_time());
  }
  if (from.keepalive_interval() != 0) {
    set_keepalive_interval(from.keepalive_interval());
  }
  if (from.minimum_advertisement_interval() != 0) {
    set_minimum_advertisement_interval(from.minimum_advertisement_interval());
  }
}

void TimersConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TimersConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimersConfig::CopyFrom(const TimersConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TimersConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimersConfig::IsInitialized() const {
  return true;
}

void TimersConfig::Swap(TimersConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimersConfig::InternalSwap(TimersConfig* other) {
  using std::swap;
  swap(connect_retry_, other->connect_retry_);
  swap(hold_time_, other->hold_time_);
  swap(keepalive_interval_, other->keepalive_interval_);
  swap(minimum_advertisement_interval_, other->minimum_advertisement_interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimersConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimersState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimersState::kConnectRetryFieldNumber;
const int TimersState::kHoldTimeFieldNumber;
const int TimersState::kKeepaliveIntervalFieldNumber;
const int TimersState::kMinimumAdvertisementIntervalFieldNumber;
const int TimersState::kNegotiatedHoldTimeFieldNumber;
const int TimersState::kUptimeFieldNumber;
const int TimersState::kDowntimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimersState::TimersState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsTimersState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TimersState)
}
TimersState::TimersState(const TimersState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connect_retry_, &from.connect_retry_,
    static_cast<size_t>(reinterpret_cast<char*>(&downtime_) -
    reinterpret_cast<char*>(&connect_retry_)) + sizeof(downtime_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TimersState)
}

void TimersState::SharedCtor() {
  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downtime_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(downtime_));
  _cached_size_ = 0;
}

TimersState::~TimersState() {
  // @@protoc_insertion_point(destructor:gobgpapi.TimersState)
  SharedDtor();
}

void TimersState::SharedDtor() {
}

void TimersState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimersState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimersState& TimersState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsTimersState();
  return *internal_default_instance();
}

TimersState* TimersState::New(::google::protobuf::Arena* arena) const {
  TimersState* n = new TimersState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimersState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TimersState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downtime_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(downtime_));
  _internal_metadata_.Clear();
}

bool TimersState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.TimersState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 connect_retry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connect_retry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 hold_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keepalive_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keepalive_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 minimum_advertisement_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minimum_advertisement_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 negotiated_hold_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &negotiated_hold_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uptime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 downtime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &downtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.TimersState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.TimersState)
  return false;
#undef DO_
}

void TimersState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.TimersState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->connect_retry(), output);
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hold_time(), output);
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->keepalive_interval(), output);
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->minimum_advertisement_interval(), output);
  }

  // uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->negotiated_hold_time(), output);
  }

  // uint64 uptime = 6;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uptime(), output);
  }

  // uint64 downtime = 7;
  if (this->downtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->downtime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.TimersState)
}

::google::protobuf::uint8* TimersState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TimersState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->connect_retry(), target);
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hold_time(), target);
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->keepalive_interval(), target);
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->minimum_advertisement_interval(), target);
  }

  // uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->negotiated_hold_time(), target);
  }

  // uint64 uptime = 6;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uptime(), target);
  }

  // uint64 downtime = 7;
  if (this->downtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->downtime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TimersState)
  return target;
}

size_t TimersState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TimersState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connect_retry());
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hold_time());
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keepalive_interval());
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minimum_advertisement_interval());
  }

  // uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->negotiated_hold_time());
  }

  // uint64 uptime = 6;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uptime());
  }

  // uint64 downtime = 7;
  if (this->downtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->downtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimersState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TimersState)
  GOOGLE_DCHECK_NE(&from, this);
  const TimersState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimersState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TimersState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TimersState)
    MergeFrom(*source);
  }
}

void TimersState::MergeFrom(const TimersState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TimersState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connect_retry() != 0) {
    set_connect_retry(from.connect_retry());
  }
  if (from.hold_time() != 0) {
    set_hold_time(from.hold_time());
  }
  if (from.keepalive_interval() != 0) {
    set_keepalive_interval(from.keepalive_interval());
  }
  if (from.minimum_advertisement_interval() != 0) {
    set_minimum_advertisement_interval(from.minimum_advertisement_interval());
  }
  if (from.negotiated_hold_time() != 0) {
    set_negotiated_hold_time(from.negotiated_hold_time());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.downtime() != 0) {
    set_downtime(from.downtime());
  }
}

void TimersState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TimersState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimersState::CopyFrom(const TimersState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TimersState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimersState::IsInitialized() const {
  return true;
}

void TimersState::Swap(TimersState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimersState::InternalSwap(TimersState* other) {
  using std::swap;
  swap(connect_retry_, other->connect_retry_);
  swap(hold_time_, other->hold_time_);
  swap(keepalive_interval_, other->keepalive_interval_);
  swap(minimum_advertisement_interval_, other->minimum_advertisement_interval_);
  swap(negotiated_hold_time_, other->negotiated_hold_time_);
  swap(uptime_, other->uptime_);
  swap(downtime_, other->downtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimersState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Transport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport::kLocalAddressFieldNumber;
const int Transport::kLocalPortFieldNumber;
const int Transport::kMtuDiscoveryFieldNumber;
const int Transport::kPassiveModeFieldNumber;
const int Transport::kRemoteAddressFieldNumber;
const int Transport::kRemotePortFieldNumber;
const int Transport::kTcpMssFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport::Transport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsTransport();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Transport)
}
Transport::Transport(const Transport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.local_address().size() > 0) {
    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  remote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_address().size() > 0) {
    remote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  ::memcpy(&local_port_, &from.local_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_mss_) -
    reinterpret_cast<char*>(&local_port_)) + sizeof(tcp_mss_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Transport)
}

void Transport::SharedCtor() {
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_mss_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(tcp_mss_));
  _cached_size_ = 0;
}

Transport::~Transport() {
  // @@protoc_insertion_point(destructor:gobgpapi.Transport)
  SharedDtor();
}

void Transport::SharedDtor() {
  local_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport& Transport::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsTransport();
  return *internal_default_instance();
}

Transport* Transport::New(::google::protobuf::Arena* arena) const {
  Transport* n = new Transport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Transport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_mss_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(tcp_mss_));
  _internal_metadata_.Clear();
}

bool Transport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Transport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string local_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_address().data(), static_cast<int>(this->local_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Transport.local_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 local_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mtu_discovery = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mtu_discovery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool passive_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passive_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_address().data(), static_cast<int>(this->remote_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Transport.remote_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remote_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcp_mss = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_mss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Transport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Transport)
  return false;
#undef DO_
}

void Transport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Transport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string local_address = 1;
  if (this->local_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_address().data(), static_cast<int>(this->local_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.local_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->local_address(), output);
  }

  // uint32 local_port = 2;
  if (this->local_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_port(), output);
  }

  // bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mtu_discovery(), output);
  }

  // bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->passive_mode(), output);
  }

  // string remote_address = 5;
  if (this->remote_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_address().data(), static_cast<int>(this->remote_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.remote_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->remote_address(), output);
  }

  // uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remote_port(), output);
  }

  // uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcp_mss(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Transport)
}

::google::protobuf::uint8* Transport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Transport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string local_address = 1;
  if (this->local_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_address().data(), static_cast<int>(this->local_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.local_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->local_address(), target);
  }

  // uint32 local_port = 2;
  if (this->local_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->local_port(), target);
  }

  // bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mtu_discovery(), target);
  }

  // bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->passive_mode(), target);
  }

  // string remote_address = 5;
  if (this->remote_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_address().data(), static_cast<int>(this->remote_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.remote_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->remote_address(), target);
  }

  // uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remote_port(), target);
  }

  // uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcp_mss(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Transport)
  return target;
}

size_t Transport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Transport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string local_address = 1;
  if (this->local_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_address());
  }

  // string remote_address = 5;
  if (this->remote_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_address());
  }

  // uint32 local_port = 2;
  if (this->local_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_port());
  }

  // bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    total_size += 1 + 1;
  }

  // bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    total_size += 1 + 1;
  }

  // uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remote_port());
  }

  // uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcp_mss());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Transport)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Transport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Transport)
    MergeFrom(*source);
  }
}

void Transport::MergeFrom(const Transport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Transport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_address().size() > 0) {

    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  if (from.remote_address().size() > 0) {

    remote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  if (from.local_port() != 0) {
    set_local_port(from.local_port());
  }
  if (from.mtu_discovery() != 0) {
    set_mtu_discovery(from.mtu_discovery());
  }
  if (from.passive_mode() != 0) {
    set_passive_mode(from.passive_mode());
  }
  if (from.remote_port() != 0) {
    set_remote_port(from.remote_port());
  }
  if (from.tcp_mss() != 0) {
    set_tcp_mss(from.tcp_mss());
  }
}

void Transport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport::CopyFrom(const Transport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport::IsInitialized() const {
  return true;
}

void Transport::Swap(Transport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport::InternalSwap(Transport* other) {
  using std::swap;
  local_address_.Swap(&other->local_address_);
  remote_address_.Swap(&other->remote_address_);
  swap(local_port_, other->local_port_);
  swap(mtu_discovery_, other->mtu_discovery_);
  swap(passive_mode_, other->passive_mode_);
  swap(remote_port_, other->remote_port_);
  swap(tcp_mss_, other->tcp_mss_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteServer::kRouteServerClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteServer::RouteServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRouteServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteServer)
}
RouteServer::RouteServer(const RouteServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_server_client_ = from.route_server_client_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteServer)
}

void RouteServer::SharedCtor() {
  route_server_client_ = false;
  _cached_size_ = 0;
}

RouteServer::~RouteServer() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteServer)
  SharedDtor();
}

void RouteServer::SharedDtor() {
}

void RouteServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteServer::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteServer& RouteServer::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRouteServer();
  return *internal_default_instance();
}

RouteServer* RouteServer::New(::google::protobuf::Arena* arena) const {
  RouteServer* n = new RouteServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteServer::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_server_client_ = false;
  _internal_metadata_.Clear();
}

bool RouteServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool route_server_client = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &route_server_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteServer)
  return false;
#undef DO_
}

void RouteServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->route_server_client(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteServer)
}

::google::protobuf::uint8* RouteServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->route_server_client(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteServer)
  return target;
}

size_t RouteServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteServer)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteServer)
    MergeFrom(*source);
  }
}

void RouteServer::MergeFrom(const RouteServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_server_client() != 0) {
    set_route_server_client(from.route_server_client());
  }
}

void RouteServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteServer::CopyFrom(const RouteServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteServer::IsInitialized() const {
  return true;
}

void RouteServer::Swap(RouteServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteServer::InternalSwap(RouteServer* other) {
  using std::swap;
  swap(route_server_client_, other->route_server_client_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteServer::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GracefulRestart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GracefulRestart::kEnabledFieldNumber;
const int GracefulRestart::kRestartTimeFieldNumber;
const int GracefulRestart::kHelperOnlyFieldNumber;
const int GracefulRestart::kDeferralTimeFieldNumber;
const int GracefulRestart::kNotificationEnabledFieldNumber;
const int GracefulRestart::kLonglivedEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GracefulRestart::GracefulRestart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGracefulRestart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GracefulRestart)
}
GracefulRestart::GracefulRestart(const GracefulRestart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&restart_time_, &from.restart_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&deferral_time_) -
    reinterpret_cast<char*>(&restart_time_)) + sizeof(deferral_time_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GracefulRestart)
}

void GracefulRestart::SharedCtor() {
  ::memset(&restart_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deferral_time_) -
      reinterpret_cast<char*>(&restart_time_)) + sizeof(deferral_time_));
  _cached_size_ = 0;
}

GracefulRestart::~GracefulRestart() {
  // @@protoc_insertion_point(destructor:gobgpapi.GracefulRestart)
  SharedDtor();
}

void GracefulRestart::SharedDtor() {
}

void GracefulRestart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GracefulRestart::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GracefulRestart& GracefulRestart::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGracefulRestart();
  return *internal_default_instance();
}

GracefulRestart* GracefulRestart::New(::google::protobuf::Arena* arena) const {
  GracefulRestart* n = new GracefulRestart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GracefulRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GracefulRestart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&restart_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deferral_time_) -
      reinterpret_cast<char*>(&restart_time_)) + sizeof(deferral_time_));
  _internal_metadata_.Clear();
}

bool GracefulRestart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GracefulRestart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 restart_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restart_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool helper_only = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helper_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deferral_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deferral_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool notification_enabled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notification_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool longlived_enabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &longlived_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GracefulRestart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GracefulRestart)
  return false;
#undef DO_
}

void GracefulRestart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GracefulRestart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->restart_time(), output);
  }

  // bool helper_only = 3;
  if (this->helper_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->helper_only(), output);
  }

  // uint32 deferral_time = 4;
  if (this->deferral_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deferral_time(), output);
  }

  // bool notification_enabled = 5;
  if (this->notification_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->notification_enabled(), output);
  }

  // bool longlived_enabled = 6;
  if (this->longlived_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->longlived_enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GracefulRestart)
}

::google::protobuf::uint8* GracefulRestart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GracefulRestart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->restart_time(), target);
  }

  // bool helper_only = 3;
  if (this->helper_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->helper_only(), target);
  }

  // uint32 deferral_time = 4;
  if (this->deferral_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deferral_time(), target);
  }

  // bool notification_enabled = 5;
  if (this->notification_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->notification_enabled(), target);
  }

  // bool longlived_enabled = 6;
  if (this->longlived_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->longlived_enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GracefulRestart)
  return target;
}

size_t GracefulRestart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GracefulRestart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->restart_time());
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool helper_only = 3;
  if (this->helper_only() != 0) {
    total_size += 1 + 1;
  }

  // bool notification_enabled = 5;
  if (this->notification_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool longlived_enabled = 6;
  if (this->longlived_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 deferral_time = 4;
  if (this->deferral_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deferral_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GracefulRestart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  const GracefulRestart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GracefulRestart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GracefulRestart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GracefulRestart)
    MergeFrom(*source);
  }
}

void GracefulRestart::MergeFrom(const GracefulRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.restart_time() != 0) {
    set_restart_time(from.restart_time());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.helper_only() != 0) {
    set_helper_only(from.helper_only());
  }
  if (from.notification_enabled() != 0) {
    set_notification_enabled(from.notification_enabled());
  }
  if (from.longlived_enabled() != 0) {
    set_longlived_enabled(from.longlived_enabled());
  }
  if (from.deferral_time() != 0) {
    set_deferral_time(from.deferral_time());
  }
}

void GracefulRestart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GracefulRestart::CopyFrom(const GracefulRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GracefulRestart::IsInitialized() const {
  return true;
}

void GracefulRestart::Swap(GracefulRestart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GracefulRestart::InternalSwap(GracefulRestart* other) {
  using std::swap;
  swap(restart_time_, other->restart_time_);
  swap(enabled_, other->enabled_);
  swap(helper_only_, other->helper_only_);
  swap(notification_enabled_, other->notification_enabled_);
  swap(longlived_enabled_, other->longlived_enabled_);
  swap(deferral_time_, other->deferral_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GracefulRestart::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MpGracefulRestartConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpGracefulRestartConfig::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpGracefulRestartConfig::MpGracefulRestartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestartConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MpGracefulRestartConfig)
}
MpGracefulRestartConfig::MpGracefulRestartConfig(const MpGracefulRestartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MpGracefulRestartConfig)
}

void MpGracefulRestartConfig::SharedCtor() {
  enabled_ = false;
  _cached_size_ = 0;
}

MpGracefulRestartConfig::~MpGracefulRestartConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.MpGracefulRestartConfig)
  SharedDtor();
}

void MpGracefulRestartConfig::SharedDtor() {
}

void MpGracefulRestartConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpGracefulRestartConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpGracefulRestartConfig& MpGracefulRestartConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestartConfig();
  return *internal_default_instance();
}

MpGracefulRestartConfig* MpGracefulRestartConfig::New(::google::protobuf::Arena* arena) const {
  MpGracefulRestartConfig* n = new MpGracefulRestartConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MpGracefulRestartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MpGracefulRestartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

bool MpGracefulRestartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MpGracefulRestartConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MpGracefulRestartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MpGracefulRestartConfig)
  return false;
#undef DO_
}

void MpGracefulRestartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MpGracefulRestartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.MpGracefulRestartConfig)
}

::google::protobuf::uint8* MpGracefulRestartConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MpGracefulRestartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MpGracefulRestartConfig)
  return target;
}

size_t MpGracefulRestartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MpGracefulRestartConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpGracefulRestartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MpGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MpGracefulRestartConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpGracefulRestartConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MpGracefulRestartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MpGracefulRestartConfig)
    MergeFrom(*source);
  }
}

void MpGracefulRestartConfig::MergeFrom(const MpGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MpGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void MpGracefulRestartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MpGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpGracefulRestartConfig::CopyFrom(const MpGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MpGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpGracefulRestartConfig::IsInitialized() const {
  return true;
}

void MpGracefulRestartConfig::Swap(MpGracefulRestartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MpGracefulRestartConfig::InternalSwap(MpGracefulRestartConfig* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpGracefulRestartConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MpGracefulRestartState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpGracefulRestartState::kEnabledFieldNumber;
const int MpGracefulRestartState::kReceivedFieldNumber;
const int MpGracefulRestartState::kAdvertisedFieldNumber;
const int MpGracefulRestartState::kEndOfRibReceivedFieldNumber;
const int MpGracefulRestartState::kEndOfRibSentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpGracefulRestartState::MpGracefulRestartState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestartState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MpGracefulRestartState)
}
MpGracefulRestartState::MpGracefulRestartState(const MpGracefulRestartState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_of_rib_sent_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(end_of_rib_sent_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MpGracefulRestartState)
}

void MpGracefulRestartState::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_rib_sent_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(end_of_rib_sent_));
  _cached_size_ = 0;
}

MpGracefulRestartState::~MpGracefulRestartState() {
  // @@protoc_insertion_point(destructor:gobgpapi.MpGracefulRestartState)
  SharedDtor();
}

void MpGracefulRestartState::SharedDtor() {
}

void MpGracefulRestartState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpGracefulRestartState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpGracefulRestartState& MpGracefulRestartState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestartState();
  return *internal_default_instance();
}

MpGracefulRestartState* MpGracefulRestartState::New(::google::protobuf::Arena* arena) const {
  MpGracefulRestartState* n = new MpGracefulRestartState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MpGracefulRestartState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MpGracefulRestartState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_rib_sent_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(end_of_rib_sent_));
  _internal_metadata_.Clear();
}

bool MpGracefulRestartState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MpGracefulRestartState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool received = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool advertised = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advertised_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool end_of_rib_received = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_of_rib_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool end_of_rib_sent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_of_rib_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MpGracefulRestartState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MpGracefulRestartState)
  return false;
#undef DO_
}

void MpGracefulRestartState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MpGracefulRestartState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // bool received = 2;
  if (this->received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->received(), output);
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->advertised(), output);
  }

  // bool end_of_rib_received = 4;
  if (this->end_of_rib_received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->end_of_rib_received(), output);
  }

  // bool end_of_rib_sent = 5;
  if (this->end_of_rib_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->end_of_rib_sent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.MpGracefulRestartState)
}

::google::protobuf::uint8* MpGracefulRestartState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MpGracefulRestartState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // bool received = 2;
  if (this->received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->received(), target);
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->advertised(), target);
  }

  // bool end_of_rib_received = 4;
  if (this->end_of_rib_received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->end_of_rib_received(), target);
  }

  // bool end_of_rib_sent = 5;
  if (this->end_of_rib_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->end_of_rib_sent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MpGracefulRestartState)
  return target;
}

size_t MpGracefulRestartState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MpGracefulRestartState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool received = 2;
  if (this->received() != 0) {
    total_size += 1 + 1;
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    total_size += 1 + 1;
  }

  // bool end_of_rib_received = 4;
  if (this->end_of_rib_received() != 0) {
    total_size += 1 + 1;
  }

  // bool end_of_rib_sent = 5;
  if (this->end_of_rib_sent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpGracefulRestartState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MpGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  const MpGracefulRestartState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpGracefulRestartState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MpGracefulRestartState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MpGracefulRestartState)
    MergeFrom(*source);
  }
}

void MpGracefulRestartState::MergeFrom(const MpGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MpGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.received() != 0) {
    set_received(from.received());
  }
  if (from.advertised() != 0) {
    set_advertised(from.advertised());
  }
  if (from.end_of_rib_received() != 0) {
    set_end_of_rib_received(from.end_of_rib_received());
  }
  if (from.end_of_rib_sent() != 0) {
    set_end_of_rib_sent(from.end_of_rib_sent());
  }
}

void MpGracefulRestartState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MpGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpGracefulRestartState::CopyFrom(const MpGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MpGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpGracefulRestartState::IsInitialized() const {
  return true;
}

void MpGracefulRestartState::Swap(MpGracefulRestartState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MpGracefulRestartState::InternalSwap(MpGracefulRestartState* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(received_, other->received_);
  swap(advertised_, other->advertised_);
  swap(end_of_rib_received_, other->end_of_rib_received_);
  swap(end_of_rib_sent_, other->end_of_rib_sent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpGracefulRestartState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MpGracefulRestart::InitAsDefaultInstance() {
  ::gobgpapi::_MpGracefulRestart_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::MpGracefulRestartConfig*>(
      ::gobgpapi::MpGracefulRestartConfig::internal_default_instance());
  ::gobgpapi::_MpGracefulRestart_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::MpGracefulRestartState*>(
      ::gobgpapi::MpGracefulRestartState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpGracefulRestart::kConfigFieldNumber;
const int MpGracefulRestart::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpGracefulRestart::MpGracefulRestart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MpGracefulRestart)
}
MpGracefulRestart::MpGracefulRestart(const MpGracefulRestart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::gobgpapi::MpGracefulRestartConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::MpGracefulRestartState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MpGracefulRestart)
}

void MpGracefulRestart::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

MpGracefulRestart::~MpGracefulRestart() {
  // @@protoc_insertion_point(destructor:gobgpapi.MpGracefulRestart)
  SharedDtor();
}

void MpGracefulRestart::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void MpGracefulRestart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpGracefulRestart::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpGracefulRestart& MpGracefulRestart::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsMpGracefulRestart();
  return *internal_default_instance();
}

MpGracefulRestart* MpGracefulRestart::New(::google::protobuf::Arena* arena) const {
  MpGracefulRestart* n = new MpGracefulRestart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MpGracefulRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MpGracefulRestart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool MpGracefulRestart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MpGracefulRestart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.MpGracefulRestartConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.MpGracefulRestartState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MpGracefulRestart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MpGracefulRestart)
  return false;
#undef DO_
}

void MpGracefulRestart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MpGracefulRestart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MpGracefulRestartConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .gobgpapi.MpGracefulRestartState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.MpGracefulRestart)
}

::google::protobuf::uint8* MpGracefulRestart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MpGracefulRestart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MpGracefulRestartConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .gobgpapi.MpGracefulRestartState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MpGracefulRestart)
  return target;
}

size_t MpGracefulRestart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MpGracefulRestart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.MpGracefulRestartConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.MpGracefulRestartState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpGracefulRestart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MpGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  const MpGracefulRestart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpGracefulRestart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MpGracefulRestart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MpGracefulRestart)
    MergeFrom(*source);
  }
}

void MpGracefulRestart::MergeFrom(const MpGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MpGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::gobgpapi::MpGracefulRestartConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::MpGracefulRestartState::MergeFrom(from.state());
  }
}

void MpGracefulRestart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MpGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpGracefulRestart::CopyFrom(const MpGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MpGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpGracefulRestart::IsInitialized() const {
  return true;
}

void MpGracefulRestart::Swap(MpGracefulRestart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MpGracefulRestart::InternalSwap(MpGracefulRestart* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpGracefulRestart::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AfiSafiConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AfiSafiConfig::kFamilyFieldNumber;
const int AfiSafiConfig::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AfiSafiConfig::AfiSafiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAfiSafiConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AfiSafiConfig)
}
AfiSafiConfig::AfiSafiConfig(const AfiSafiConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&family_, &from.family_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&family_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AfiSafiConfig)
}

void AfiSafiConfig::SharedCtor() {
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&family_)) + sizeof(enabled_));
  _cached_size_ = 0;
}

AfiSafiConfig::~AfiSafiConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.AfiSafiConfig)
  SharedDtor();
}

void AfiSafiConfig::SharedDtor() {
}

void AfiSafiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfiSafiConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AfiSafiConfig& AfiSafiConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAfiSafiConfig();
  return *internal_default_instance();
}

AfiSafiConfig* AfiSafiConfig::New(::google::protobuf::Arena* arena) const {
  AfiSafiConfig* n = new AfiSafiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AfiSafiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AfiSafiConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&family_)) + sizeof(enabled_));
  _internal_metadata_.Clear();
}

bool AfiSafiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AfiSafiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 family = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AfiSafiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AfiSafiConfig)
  return false;
#undef DO_
}

void AfiSafiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AfiSafiConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family(), output);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AfiSafiConfig)
}

::google::protobuf::uint8* AfiSafiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AfiSafiConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family(), target);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AfiSafiConfig)
  return target;
}

size_t AfiSafiConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AfiSafiConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 family = 1;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfiSafiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AfiSafiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AfiSafiConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AfiSafiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AfiSafiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AfiSafiConfig)
    MergeFrom(*source);
  }
}

void AfiSafiConfig::MergeFrom(const AfiSafiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AfiSafiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void AfiSafiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AfiSafiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfiSafiConfig::CopyFrom(const AfiSafiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AfiSafiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfiSafiConfig::IsInitialized() const {
  return true;
}

void AfiSafiConfig::Swap(AfiSafiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AfiSafiConfig::InternalSwap(AfiSafiConfig* other) {
  using std::swap;
  swap(family_, other->family_);
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AfiSafiConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AfiSafiState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AfiSafiState::kFamilyFieldNumber;
const int AfiSafiState::kEnabledFieldNumber;
const int AfiSafiState::kTotalPathsFieldNumber;
const int AfiSafiState::kTotalPrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AfiSafiState::AfiSafiState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAfiSafiState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AfiSafiState)
}
AfiSafiState::AfiSafiState(const AfiSafiState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&family_, &from.family_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_prefixes_) -
    reinterpret_cast<char*>(&family_)) + sizeof(total_prefixes_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AfiSafiState)
}

void AfiSafiState::SharedCtor() {
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_prefixes_) -
      reinterpret_cast<char*>(&family_)) + sizeof(total_prefixes_));
  _cached_size_ = 0;
}

AfiSafiState::~AfiSafiState() {
  // @@protoc_insertion_point(destructor:gobgpapi.AfiSafiState)
  SharedDtor();
}

void AfiSafiState::SharedDtor() {
}

void AfiSafiState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfiSafiState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AfiSafiState& AfiSafiState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAfiSafiState();
  return *internal_default_instance();
}

AfiSafiState* AfiSafiState::New(::google::protobuf::Arena* arena) const {
  AfiSafiState* n = new AfiSafiState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AfiSafiState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AfiSafiState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_prefixes_) -
      reinterpret_cast<char*>(&family_)) + sizeof(total_prefixes_));
  _internal_metadata_.Clear();
}

bool AfiSafiState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AfiSafiState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 family = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_paths = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_paths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_prefixes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_prefixes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AfiSafiState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AfiSafiState)
  return false;
#undef DO_
}

void AfiSafiState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AfiSafiState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family(), output);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // uint32 total_paths = 3;
  if (this->total_paths() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_paths(), output);
  }

  // uint32 total_prefixes = 4;
  if (this->total_prefixes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_prefixes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AfiSafiState)
}

::google::protobuf::uint8* AfiSafiState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AfiSafiState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family(), target);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // uint32 total_paths = 3;
  if (this->total_paths() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_paths(), target);
  }

  // uint32 total_prefixes = 4;
  if (this->total_prefixes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_prefixes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AfiSafiState)
  return target;
}

size_t AfiSafiState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AfiSafiState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 family = 1;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 total_paths = 3;
  if (this->total_paths() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_paths());
  }

  // uint32 total_prefixes = 4;
  if (this->total_prefixes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_prefixes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfiSafiState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AfiSafiState)
  GOOGLE_DCHECK_NE(&from, this);
  const AfiSafiState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AfiSafiState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AfiSafiState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AfiSafiState)
    MergeFrom(*source);
  }
}

void AfiSafiState::MergeFrom(const AfiSafiState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AfiSafiState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.total_paths() != 0) {
    set_total_paths(from.total_paths());
  }
  if (from.total_prefixes() != 0) {
    set_total_prefixes(from.total_prefixes());
  }
}

void AfiSafiState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AfiSafiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfiSafiState::CopyFrom(const AfiSafiState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AfiSafiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfiSafiState::IsInitialized() const {
  return true;
}

void AfiSafiState::Swap(AfiSafiState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AfiSafiState::InternalSwap(AfiSafiState* other) {
  using std::swap;
  swap(family_, other->family_);
  swap(enabled_, other->enabled_);
  swap(total_paths_, other->total_paths_);
  swap(total_prefixes_, other->total_prefixes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AfiSafiState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteSelectionOptionsConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteSelectionOptionsConfig::kAlwaysCompareMedFieldNumber;
const int RouteSelectionOptionsConfig::kIgnoreAsPathLengthFieldNumber;
const int RouteSelectionOptionsConfig::kExternalCompareRouterIdFieldNumber;
const int RouteSelectionOptionsConfig::kAdvertiseInactiveRoutesFieldNumber;
const int RouteSelectionOptionsConfig::kEnableAigpFieldNumber;
const int RouteSelectionOptionsConfig::kIgnoreNextHopIgpMetricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteSelectionOptionsConfig::RouteSelectionOptionsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptionsConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteSelectionOptionsConfig)
}
RouteSelectionOptionsConfig::RouteSelectionOptionsConfig(const RouteSelectionOptionsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&always_compare_med_, &from.always_compare_med_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_next_hop_igp_metric_) -
    reinterpret_cast<char*>(&always_compare_med_)) + sizeof(ignore_next_hop_igp_metric_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteSelectionOptionsConfig)
}

void RouteSelectionOptionsConfig::SharedCtor() {
  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_next_hop_igp_metric_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(ignore_next_hop_igp_metric_));
  _cached_size_ = 0;
}

RouteSelectionOptionsConfig::~RouteSelectionOptionsConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteSelectionOptionsConfig)
  SharedDtor();
}

void RouteSelectionOptionsConfig::SharedDtor() {
}

void RouteSelectionOptionsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteSelectionOptionsConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteSelectionOptionsConfig& RouteSelectionOptionsConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptionsConfig();
  return *internal_default_instance();
}

RouteSelectionOptionsConfig* RouteSelectionOptionsConfig::New(::google::protobuf::Arena* arena) const {
  RouteSelectionOptionsConfig* n = new RouteSelectionOptionsConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteSelectionOptionsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteSelectionOptionsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_next_hop_igp_metric_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(ignore_next_hop_igp_metric_));
  _internal_metadata_.Clear();
}

bool RouteSelectionOptionsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteSelectionOptionsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool always_compare_med = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &always_compare_med_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ignore_as_path_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_as_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool external_compare_router_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &external_compare_router_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool advertise_inactive_routes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advertise_inactive_routes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_aigp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_aigp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ignore_next_hop_igp_metric = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_next_hop_igp_metric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteSelectionOptionsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteSelectionOptionsConfig)
  return false;
#undef DO_
}

void RouteSelectionOptionsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteSelectionOptionsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->always_compare_med(), output);
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ignore_as_path_length(), output);
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->external_compare_router_id(), output);
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->advertise_inactive_routes(), output);
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_aigp(), output);
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ignore_next_hop_igp_metric(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteSelectionOptionsConfig)
}

::google::protobuf::uint8* RouteSelectionOptionsConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteSelectionOptionsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->always_compare_med(), target);
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ignore_as_path_length(), target);
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->external_compare_router_id(), target);
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->advertise_inactive_routes(), target);
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_aigp(), target);
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ignore_next_hop_igp_metric(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteSelectionOptionsConfig)
  return target;
}

size_t RouteSelectionOptionsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteSelectionOptionsConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    total_size += 1 + 1;
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    total_size += 1 + 1;
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteSelectionOptionsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteSelectionOptionsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSelectionOptionsConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteSelectionOptionsConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteSelectionOptionsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteSelectionOptionsConfig)
    MergeFrom(*source);
  }
}

void RouteSelectionOptionsConfig::MergeFrom(const RouteSelectionOptionsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteSelectionOptionsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.always_compare_med() != 0) {
    set_always_compare_med(from.always_compare_med());
  }
  if (from.ignore_as_path_length() != 0) {
    set_ignore_as_path_length(from.ignore_as_path_length());
  }
  if (from.external_compare_router_id() != 0) {
    set_external_compare_router_id(from.external_compare_router_id());
  }
  if (from.advertise_inactive_routes() != 0) {
    set_advertise_inactive_routes(from.advertise_inactive_routes());
  }
  if (from.enable_aigp() != 0) {
    set_enable_aigp(from.enable_aigp());
  }
  if (from.ignore_next_hop_igp_metric() != 0) {
    set_ignore_next_hop_igp_metric(from.ignore_next_hop_igp_metric());
  }
}

void RouteSelectionOptionsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteSelectionOptionsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSelectionOptionsConfig::CopyFrom(const RouteSelectionOptionsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteSelectionOptionsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSelectionOptionsConfig::IsInitialized() const {
  return true;
}

void RouteSelectionOptionsConfig::Swap(RouteSelectionOptionsConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteSelectionOptionsConfig::InternalSwap(RouteSelectionOptionsConfig* other) {
  using std::swap;
  swap(always_compare_med_, other->always_compare_med_);
  swap(ignore_as_path_length_, other->ignore_as_path_length_);
  swap(external_compare_router_id_, other->external_compare_router_id_);
  swap(advertise_inactive_routes_, other->advertise_inactive_routes_);
  swap(enable_aigp_, other->enable_aigp_);
  swap(ignore_next_hop_igp_metric_, other->ignore_next_hop_igp_metric_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteSelectionOptionsConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteSelectionOptionsState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteSelectionOptionsState::kAlwaysCompareMedFieldNumber;
const int RouteSelectionOptionsState::kIgnoreAsPathLengthFieldNumber;
const int RouteSelectionOptionsState::kExternalCompareRouterIdFieldNumber;
const int RouteSelectionOptionsState::kAdvertiseInactiveRoutesFieldNumber;
const int RouteSelectionOptionsState::kEnableAigpFieldNumber;
const int RouteSelectionOptionsState::kIgnoreNextHopIgpMetricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteSelectionOptionsState::RouteSelectionOptionsState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptionsState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteSelectionOptionsState)
}
RouteSelectionOptionsState::RouteSelectionOptionsState(const RouteSelectionOptionsState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&always_compare_med_, &from.always_compare_med_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_next_hop_igp_metric_) -
    reinterpret_cast<char*>(&always_compare_med_)) + sizeof(ignore_next_hop_igp_metric_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteSelectionOptionsState)
}

void RouteSelectionOptionsState::SharedCtor() {
  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_next_hop_igp_metric_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(ignore_next_hop_igp_metric_));
  _cached_size_ = 0;
}

RouteSelectionOptionsState::~RouteSelectionOptionsState() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteSelectionOptionsState)
  SharedDtor();
}

void RouteSelectionOptionsState::SharedDtor() {
}

void RouteSelectionOptionsState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteSelectionOptionsState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteSelectionOptionsState& RouteSelectionOptionsState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptionsState();
  return *internal_default_instance();
}

RouteSelectionOptionsState* RouteSelectionOptionsState::New(::google::protobuf::Arena* arena) const {
  RouteSelectionOptionsState* n = new RouteSelectionOptionsState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteSelectionOptionsState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteSelectionOptionsState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_next_hop_igp_metric_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(ignore_next_hop_igp_metric_));
  _internal_metadata_.Clear();
}

bool RouteSelectionOptionsState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteSelectionOptionsState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool always_compare_med = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &always_compare_med_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ignore_as_path_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_as_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool external_compare_router_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &external_compare_router_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool advertise_inactive_routes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advertise_inactive_routes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_aigp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_aigp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ignore_next_hop_igp_metric = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_next_hop_igp_metric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteSelectionOptionsState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteSelectionOptionsState)
  return false;
#undef DO_
}

void RouteSelectionOptionsState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteSelectionOptionsState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->always_compare_med(), output);
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ignore_as_path_length(), output);
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->external_compare_router_id(), output);
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->advertise_inactive_routes(), output);
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_aigp(), output);
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ignore_next_hop_igp_metric(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteSelectionOptionsState)
}

::google::protobuf::uint8* RouteSelectionOptionsState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteSelectionOptionsState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->always_compare_med(), target);
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ignore_as_path_length(), target);
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->external_compare_router_id(), target);
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->advertise_inactive_routes(), target);
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_aigp(), target);
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ignore_next_hop_igp_metric(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteSelectionOptionsState)
  return target;
}

size_t RouteSelectionOptionsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteSelectionOptionsState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    total_size += 1 + 1;
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    total_size += 1 + 1;
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteSelectionOptionsState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteSelectionOptionsState)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSelectionOptionsState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteSelectionOptionsState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteSelectionOptionsState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteSelectionOptionsState)
    MergeFrom(*source);
  }
}

void RouteSelectionOptionsState::MergeFrom(const RouteSelectionOptionsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteSelectionOptionsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.always_compare_med() != 0) {
    set_always_compare_med(from.always_compare_med());
  }
  if (from.ignore_as_path_length() != 0) {
    set_ignore_as_path_length(from.ignore_as_path_length());
  }
  if (from.external_compare_router_id() != 0) {
    set_external_compare_router_id(from.external_compare_router_id());
  }
  if (from.advertise_inactive_routes() != 0) {
    set_advertise_inactive_routes(from.advertise_inactive_routes());
  }
  if (from.enable_aigp() != 0) {
    set_enable_aigp(from.enable_aigp());
  }
  if (from.ignore_next_hop_igp_metric() != 0) {
    set_ignore_next_hop_igp_metric(from.ignore_next_hop_igp_metric());
  }
}

void RouteSelectionOptionsState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteSelectionOptionsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSelectionOptionsState::CopyFrom(const RouteSelectionOptionsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteSelectionOptionsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSelectionOptionsState::IsInitialized() const {
  return true;
}

void RouteSelectionOptionsState::Swap(RouteSelectionOptionsState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteSelectionOptionsState::InternalSwap(RouteSelectionOptionsState* other) {
  using std::swap;
  swap(always_compare_med_, other->always_compare_med_);
  swap(ignore_as_path_length_, other->ignore_as_path_length_);
  swap(external_compare_router_id_, other->external_compare_router_id_);
  swap(advertise_inactive_routes_, other->advertise_inactive_routes_);
  swap(enable_aigp_, other->enable_aigp_);
  swap(ignore_next_hop_igp_metric_, other->ignore_next_hop_igp_metric_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteSelectionOptionsState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteSelectionOptions::InitAsDefaultInstance() {
  ::gobgpapi::_RouteSelectionOptions_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::RouteSelectionOptionsConfig*>(
      ::gobgpapi::RouteSelectionOptionsConfig::internal_default_instance());
  ::gobgpapi::_RouteSelectionOptions_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::RouteSelectionOptionsState*>(
      ::gobgpapi::RouteSelectionOptionsState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteSelectionOptions::kConfigFieldNumber;
const int RouteSelectionOptions::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteSelectionOptions::RouteSelectionOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteSelectionOptions)
}
RouteSelectionOptions::RouteSelectionOptions(const RouteSelectionOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::gobgpapi::RouteSelectionOptionsConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::RouteSelectionOptionsState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteSelectionOptions)
}

void RouteSelectionOptions::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

RouteSelectionOptions::~RouteSelectionOptions() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteSelectionOptions)
  SharedDtor();
}

void RouteSelectionOptions::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void RouteSelectionOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteSelectionOptions::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteSelectionOptions& RouteSelectionOptions::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRouteSelectionOptions();
  return *internal_default_instance();
}

RouteSelectionOptions* RouteSelectionOptions::New(::google::protobuf::Arena* arena) const {
  RouteSelectionOptions* n = new RouteSelectionOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteSelectionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteSelectionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool RouteSelectionOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteSelectionOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.RouteSelectionOptionsConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RouteSelectionOptionsState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteSelectionOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteSelectionOptions)
  return false;
#undef DO_
}

void RouteSelectionOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteSelectionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RouteSelectionOptionsConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .gobgpapi.RouteSelectionOptionsState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteSelectionOptions)
}

::google::protobuf::uint8* RouteSelectionOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteSelectionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RouteSelectionOptionsConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .gobgpapi.RouteSelectionOptionsState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteSelectionOptions)
  return target;
}

size_t RouteSelectionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteSelectionOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.RouteSelectionOptionsConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.RouteSelectionOptionsState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteSelectionOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteSelectionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSelectionOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteSelectionOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteSelectionOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteSelectionOptions)
    MergeFrom(*source);
  }
}

void RouteSelectionOptions::MergeFrom(const RouteSelectionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteSelectionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::gobgpapi::RouteSelectionOptionsConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::RouteSelectionOptionsState::MergeFrom(from.state());
  }
}

void RouteSelectionOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteSelectionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSelectionOptions::CopyFrom(const RouteSelectionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteSelectionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSelectionOptions::IsInitialized() const {
  return true;
}

void RouteSelectionOptions::Swap(RouteSelectionOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteSelectionOptions::InternalSwap(RouteSelectionOptions* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteSelectionOptions::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UseMultiplePathsConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UseMultiplePathsConfig::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UseMultiplePathsConfig::UseMultiplePathsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsUseMultiplePathsConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UseMultiplePathsConfig)
}
UseMultiplePathsConfig::UseMultiplePathsConfig(const UseMultiplePathsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UseMultiplePathsConfig)
}

void UseMultiplePathsConfig::SharedCtor() {
  enabled_ = false;
  _cached_size_ = 0;
}

UseMultiplePathsConfig::~UseMultiplePathsConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.UseMultiplePathsConfig)
  SharedDtor();
}

void UseMultiplePathsConfig::SharedDtor() {
}

void UseMultiplePathsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseMultiplePathsConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UseMultiplePathsConfig& UseMultiplePathsConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsUseMultiplePathsConfig();
  return *internal_default_instance();
}

UseMultiplePathsConfig* UseMultiplePathsConfig::New(::google::protobuf::Arena* arena) const {
  UseMultiplePathsConfig* n = new UseMultiplePathsConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UseMultiplePathsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UseMultiplePathsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

bool UseMultiplePathsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.UseMultiplePathsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.UseMultiplePathsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.UseMultiplePathsConfig)
  return false;
#undef DO_
}

void UseMultiplePathsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.UseMultiplePathsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.UseMultiplePathsConfig)
}

::google::protobuf::uint8* UseMultiplePathsConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UseMultiplePathsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UseMultiplePathsConfig)
  return target;
}

size_t UseMultiplePathsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UseMultiplePathsConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseMultiplePathsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UseMultiplePathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMultiplePathsConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UseMultiplePathsConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UseMultiplePathsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UseMultiplePathsConfig)
    MergeFrom(*source);
  }
}

void UseMultiplePathsConfig::MergeFrom(const UseMultiplePathsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UseMultiplePathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void UseMultiplePathsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UseMultiplePathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMultiplePathsConfig::CopyFrom(const UseMultiplePathsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UseMultiplePathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMultiplePathsConfig::IsInitialized() const {
  return true;
}

void UseMultiplePathsConfig::Swap(UseMultiplePathsConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UseMultiplePathsConfig::InternalSwap(UseMultiplePathsConfig* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UseMultiplePathsConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UseMultiplePathsState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UseMultiplePathsState::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UseMultiplePathsState::UseMultiplePathsState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsUseMultiplePathsState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UseMultiplePathsState)
}
UseMultiplePathsState::UseMultiplePathsState(const UseMultiplePathsState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UseMultiplePathsState)
}

void UseMultiplePathsState::SharedCtor() {
  enabled_ = false;
  _cached_size_ = 0;
}

UseMultiplePathsState::~UseMultiplePathsState() {
  // @@protoc_insertion_point(destructor:gobgpapi.UseMultiplePathsState)
  SharedDtor();
}

void UseMultiplePathsState::SharedDtor() {
}

void UseMultiplePathsState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseMultiplePathsState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UseMultiplePathsState& UseMultiplePathsState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsUseMultiplePathsState();
  return *internal_default_instance();
}

UseMultiplePathsState* UseMultiplePathsState::New(::google::protobuf::Arena* arena) const {
  UseMultiplePathsState* n = new UseMultiplePathsState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UseMultiplePathsState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UseMultiplePathsState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

bool UseMultiplePathsState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.UseMultiplePathsState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.UseMultiplePathsState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.UseMultiplePathsState)
  return false;
#undef DO_
}

void UseMultiplePathsState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.UseMultiplePathsState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.UseMultiplePathsState)
}

::google::protobuf::uint8* UseMultiplePathsState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UseMultiplePathsState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UseMultiplePathsState)
  return target;
}

size_t UseMultiplePathsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UseMultiplePathsState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseMultiplePathsState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UseMultiplePathsState)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMultiplePathsState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UseMultiplePathsState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UseMultiplePathsState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UseMultiplePathsState)
    MergeFrom(*source);
  }
}

void UseMultiplePathsState::MergeFrom(const UseMultiplePathsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UseMultiplePathsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void UseMultiplePathsState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UseMultiplePathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMultiplePathsState::CopyFrom(const UseMultiplePathsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UseMultiplePathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMultiplePathsState::IsInitialized() const {
  return true;
}

void UseMultiplePathsState::Swap(UseMultiplePathsState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UseMultiplePathsState::InternalSwap(UseMultiplePathsState* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UseMultiplePathsState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EbgpConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EbgpConfig::kAllowMultipleAsFieldNumber;
const int EbgpConfig::kMaximumPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EbgpConfig::EbgpConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEbgpConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EbgpConfig)
}
EbgpConfig::EbgpConfig(const EbgpConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allow_multiple_as_, &from.allow_multiple_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_paths_) -
    reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EbgpConfig)
}

void EbgpConfig::SharedCtor() {
  ::memset(&allow_multiple_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  _cached_size_ = 0;
}

EbgpConfig::~EbgpConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.EbgpConfig)
  SharedDtor();
}

void EbgpConfig::SharedDtor() {
}

void EbgpConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EbgpConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EbgpConfig& EbgpConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEbgpConfig();
  return *internal_default_instance();
}

EbgpConfig* EbgpConfig::New(::google::protobuf::Arena* arena) const {
  EbgpConfig* n = new EbgpConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EbgpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EbgpConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allow_multiple_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  _internal_metadata_.Clear();
}

bool EbgpConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EbgpConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool allow_multiple_as = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_multiple_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maximum_paths = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_paths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EbgpConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EbgpConfig)
  return false;
#undef DO_
}

void EbgpConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EbgpConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow_multiple_as(), output);
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maximum_paths(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EbgpConfig)
}

::google::protobuf::uint8* EbgpConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EbgpConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow_multiple_as(), target);
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maximum_paths(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EbgpConfig)
  return target;
}

size_t EbgpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EbgpConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    total_size += 1 + 1;
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_paths());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EbgpConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EbgpConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EbgpConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EbgpConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EbgpConfig)
    MergeFrom(*source);
  }
}

void EbgpConfig::MergeFrom(const EbgpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allow_multiple_as() != 0) {
    set_allow_multiple_as(from.allow_multiple_as());
  }
  if (from.maximum_paths() != 0) {
    set_maximum_paths(from.maximum_paths());
  }
}

void EbgpConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpConfig::CopyFrom(const EbgpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpConfig::IsInitialized() const {
  return true;
}

void EbgpConfig::Swap(EbgpConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EbgpConfig::InternalSwap(EbgpConfig* other) {
  using std::swap;
  swap(allow_multiple_as_, other->allow_multiple_as_);
  swap(maximum_paths_, other->maximum_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EbgpConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EbgpState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EbgpState::kAllowMultipleAsFieldNumber;
const int EbgpState::kMaximumPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EbgpState::EbgpState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEbgpState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EbgpState)
}
EbgpState::EbgpState(const EbgpState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allow_multiple_as_, &from.allow_multiple_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_paths_) -
    reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EbgpState)
}

void EbgpState::SharedCtor() {
  ::memset(&allow_multiple_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  _cached_size_ = 0;
}

EbgpState::~EbgpState() {
  // @@protoc_insertion_point(destructor:gobgpapi.EbgpState)
  SharedDtor();
}

void EbgpState::SharedDtor() {
}

void EbgpState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EbgpState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EbgpState& EbgpState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEbgpState();
  return *internal_default_instance();
}

EbgpState* EbgpState::New(::google::protobuf::Arena* arena) const {
  EbgpState* n = new EbgpState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EbgpState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EbgpState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allow_multiple_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  _internal_metadata_.Clear();
}

bool EbgpState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EbgpState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool allow_multiple_as = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_multiple_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maximum_paths = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_paths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EbgpState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EbgpState)
  return false;
#undef DO_
}

void EbgpState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EbgpState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow_multiple_as(), output);
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maximum_paths(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.EbgpState)
}

::google::protobuf::uint8* EbgpState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EbgpState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow_multiple_as(), target);
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maximum_paths(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EbgpState)
  return target;
}

size_t EbgpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EbgpState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    total_size += 1 + 1;
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_paths());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EbgpState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  const EbgpState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EbgpState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EbgpState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EbgpState)
    MergeFrom(*source);
  }
}

void EbgpState::MergeFrom(const EbgpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allow_multiple_as() != 0) {
    set_allow_multiple_as(from.allow_multiple_as());
  }
  if (from.maximum_paths() != 0) {
    set_maximum_paths(from.maximum_paths());
  }
}

void EbgpState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpState::CopyFrom(const EbgpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpState::IsInitialized() const {
  return true;
}

void EbgpState::Swap(EbgpState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EbgpState::InternalSwap(EbgpState* other) {
  using std::swap;
  swap(allow_multiple_as_, other->allow_multiple_as_);
  swap(maximum_paths_, other->maximum_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EbgpState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ebgp::InitAsDefaultInstance() {
  ::gobgpapi::_Ebgp_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::EbgpConfig*>(
      ::gobgpapi::EbgpConfig::internal_default_instance());
  ::gobgpapi::_Ebgp_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::EbgpState*>(
      ::gobgpapi::EbgpState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ebgp::kConfigFieldNumber;
const int Ebgp::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ebgp::Ebgp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsEbgp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Ebgp)
}
Ebgp::Ebgp(const Ebgp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::gobgpapi::EbgpConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::EbgpState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Ebgp)
}

void Ebgp::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Ebgp::~Ebgp() {
  // @@protoc_insertion_point(destructor:gobgpapi.Ebgp)
  SharedDtor();
}

void Ebgp::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Ebgp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ebgp::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ebgp& Ebgp::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsEbgp();
  return *internal_default_instance();
}

Ebgp* Ebgp::New(::google::protobuf::Arena* arena) const {
  Ebgp* n = new Ebgp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ebgp::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Ebgp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Ebgp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Ebgp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.EbgpConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.EbgpState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Ebgp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Ebgp)
  return false;
#undef DO_
}

void Ebgp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Ebgp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.EbgpConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .gobgpapi.EbgpState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Ebgp)
}

::google::protobuf::uint8* Ebgp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Ebgp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.EbgpConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .gobgpapi.EbgpState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Ebgp)
  return target;
}

size_t Ebgp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Ebgp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.EbgpConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.EbgpState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ebgp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Ebgp)
  GOOGLE_DCHECK_NE(&from, this);
  const Ebgp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ebgp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Ebgp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Ebgp)
    MergeFrom(*source);
  }
}

void Ebgp::MergeFrom(const Ebgp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Ebgp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::gobgpapi::EbgpConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::EbgpState::MergeFrom(from.state());
  }
}

void Ebgp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Ebgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ebgp::CopyFrom(const Ebgp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Ebgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ebgp::IsInitialized() const {
  return true;
}

void Ebgp::Swap(Ebgp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ebgp::InternalSwap(Ebgp* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ebgp::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IbgpConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IbgpConfig::kMaximumPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IbgpConfig::IbgpConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsIbgpConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.IbgpConfig)
}
IbgpConfig::IbgpConfig(const IbgpConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maximum_paths_ = from.maximum_paths_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.IbgpConfig)
}

void IbgpConfig::SharedCtor() {
  maximum_paths_ = 0u;
  _cached_size_ = 0;
}

IbgpConfig::~IbgpConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.IbgpConfig)
  SharedDtor();
}

void IbgpConfig::SharedDtor() {
}

void IbgpConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IbgpConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IbgpConfig& IbgpConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsIbgpConfig();
  return *internal_default_instance();
}

IbgpConfig* IbgpConfig::New(::google::protobuf::Arena* arena) const {
  IbgpConfig* n = new IbgpConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IbgpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.IbgpConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maximum_paths_ = 0u;
  _internal_metadata_.Clear();
}

bool IbgpConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.IbgpConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 maximum_paths = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_paths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.IbgpConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.IbgpConfig)
  return false;
#undef DO_
}

void IbgpConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.IbgpConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maximum_paths(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.IbgpConfig)
}

::google::protobuf::uint8* IbgpConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.IbgpConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maximum_paths(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.IbgpConfig)
  return target;
}

size_t IbgpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.IbgpConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_paths());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IbgpConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.IbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IbgpConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IbgpConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.IbgpConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.IbgpConfig)
    MergeFrom(*source);
  }
}

void IbgpConfig::MergeFrom(const IbgpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.IbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maximum_paths() != 0) {
    set_maximum_paths(from.maximum_paths());
  }
}

void IbgpConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.IbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IbgpConfig::CopyFrom(const IbgpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.IbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IbgpConfig::IsInitialized() const {
  return true;
}

void IbgpConfig::Swap(IbgpConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IbgpConfig::InternalSwap(IbgpConfig* other) {
  using std::swap;
  swap(maximum_paths_, other->maximum_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IbgpConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IbgpState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IbgpState::kMaximumPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IbgpState::IbgpState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsIbgpState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.IbgpState)
}
IbgpState::IbgpState(const IbgpState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maximum_paths_ = from.maximum_paths_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.IbgpState)
}

void IbgpState::SharedCtor() {
  maximum_paths_ = 0u;
  _cached_size_ = 0;
}

IbgpState::~IbgpState() {
  // @@protoc_insertion_point(destructor:gobgpapi.IbgpState)
  SharedDtor();
}

void IbgpState::SharedDtor() {
}

void IbgpState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IbgpState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IbgpState& IbgpState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsIbgpState();
  return *internal_default_instance();
}

IbgpState* IbgpState::New(::google::protobuf::Arena* arena) const {
  IbgpState* n = new IbgpState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IbgpState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.IbgpState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maximum_paths_ = 0u;
  _internal_metadata_.Clear();
}

bool IbgpState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.IbgpState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 maximum_paths = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_paths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.IbgpState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.IbgpState)
  return false;
#undef DO_
}

void IbgpState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.IbgpState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maximum_paths(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.IbgpState)
}

::google::protobuf::uint8* IbgpState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.IbgpState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maximum_paths(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.IbgpState)
  return target;
}

size_t IbgpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.IbgpState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_paths());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IbgpState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.IbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  const IbgpState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IbgpState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.IbgpState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.IbgpState)
    MergeFrom(*source);
  }
}

void IbgpState::MergeFrom(const IbgpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.IbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maximum_paths() != 0) {
    set_maximum_paths(from.maximum_paths());
  }
}

void IbgpState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.IbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IbgpState::CopyFrom(const IbgpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.IbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IbgpState::IsInitialized() const {
  return true;
}

void IbgpState::Swap(IbgpState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IbgpState::InternalSwap(IbgpState* other) {
  using std::swap;
  swap(maximum_paths_, other->maximum_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IbgpState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ibgp::InitAsDefaultInstance() {
  ::gobgpapi::_Ibgp_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::IbgpConfig*>(
      ::gobgpapi::IbgpConfig::internal_default_instance());
  ::gobgpapi::_Ibgp_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::IbgpState*>(
      ::gobgpapi::IbgpState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ibgp::kConfigFieldNumber;
const int Ibgp::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ibgp::Ibgp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsIbgp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Ibgp)
}
Ibgp::Ibgp(const Ibgp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::gobgpapi::IbgpConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::IbgpState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Ibgp)
}

void Ibgp::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Ibgp::~Ibgp() {
  // @@protoc_insertion_point(destructor:gobgpapi.Ibgp)
  SharedDtor();
}

void Ibgp::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Ibgp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ibgp::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ibgp& Ibgp::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsIbgp();
  return *internal_default_instance();
}

Ibgp* Ibgp::New(::google::protobuf::Arena* arena) const {
  Ibgp* n = new Ibgp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ibgp::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Ibgp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Ibgp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Ibgp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.IbgpConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.IbgpState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Ibgp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Ibgp)
  return false;
#undef DO_
}

void Ibgp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Ibgp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.IbgpConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .gobgpapi.IbgpState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Ibgp)
}

::google::protobuf::uint8* Ibgp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Ibgp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.IbgpConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .gobgpapi.IbgpState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Ibgp)
  return target;
}

size_t Ibgp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Ibgp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.IbgpConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.IbgpState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ibgp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Ibgp)
  GOOGLE_DCHECK_NE(&from, this);
  const Ibgp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ibgp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Ibgp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Ibgp)
    MergeFrom(*source);
  }
}

void Ibgp::MergeFrom(const Ibgp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Ibgp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::gobgpapi::IbgpConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::IbgpState::MergeFrom(from.state());
  }
}

void Ibgp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Ibgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ibgp::CopyFrom(const Ibgp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Ibgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ibgp::IsInitialized() const {
  return true;
}

void Ibgp::Swap(Ibgp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ibgp::InternalSwap(Ibgp* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ibgp::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UseMultiplePaths::InitAsDefaultInstance() {
  ::gobgpapi::_UseMultiplePaths_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::UseMultiplePathsConfig*>(
      ::gobgpapi::UseMultiplePathsConfig::internal_default_instance());
  ::gobgpapi::_UseMultiplePaths_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::UseMultiplePathsState*>(
      ::gobgpapi::UseMultiplePathsState::internal_default_instance());
  ::gobgpapi::_UseMultiplePaths_default_instance_._instance.get_mutable()->ebgp_ = const_cast< ::gobgpapi::Ebgp*>(
      ::gobgpapi::Ebgp::internal_default_instance());
  ::gobgpapi::_UseMultiplePaths_default_instance_._instance.get_mutable()->ibgp_ = const_cast< ::gobgpapi::Ibgp*>(
      ::gobgpapi::Ibgp::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UseMultiplePaths::kConfigFieldNumber;
const int UseMultiplePaths::kStateFieldNumber;
const int UseMultiplePaths::kEbgpFieldNumber;
const int UseMultiplePaths::kIbgpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UseMultiplePaths::UseMultiplePaths()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsUseMultiplePaths();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UseMultiplePaths)
}
UseMultiplePaths::UseMultiplePaths(const UseMultiplePaths& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::gobgpapi::UseMultiplePathsConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::UseMultiplePathsState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_ebgp()) {
    ebgp_ = new ::gobgpapi::Ebgp(*from.ebgp_);
  } else {
    ebgp_ = NULL;
  }
  if (from.has_ibgp()) {
    ibgp_ = new ::gobgpapi::Ibgp(*from.ibgp_);
  } else {
    ibgp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UseMultiplePaths)
}

void UseMultiplePaths::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ibgp_) -
      reinterpret_cast<char*>(&config_)) + sizeof(ibgp_));
  _cached_size_ = 0;
}

UseMultiplePaths::~UseMultiplePaths() {
  // @@protoc_insertion_point(destructor:gobgpapi.UseMultiplePaths)
  SharedDtor();
}

void UseMultiplePaths::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete ebgp_;
  if (this != internal_default_instance()) delete ibgp_;
}

void UseMultiplePaths::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseMultiplePaths::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UseMultiplePaths& UseMultiplePaths::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsUseMultiplePaths();
  return *internal_default_instance();
}

UseMultiplePaths* UseMultiplePaths::New(::google::protobuf::Arena* arena) const {
  UseMultiplePaths* n = new UseMultiplePaths;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UseMultiplePaths::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UseMultiplePaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && ebgp_ != NULL) {
    delete ebgp_;
  }
  ebgp_ = NULL;
  if (GetArenaNoVirtual() == NULL && ibgp_ != NULL) {
    delete ibgp_;
  }
  ibgp_ = NULL;
  _internal_metadata_.Clear();
}

bool UseMultiplePaths::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.UseMultiplePaths)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.UseMultiplePathsConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.UseMultiplePathsState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Ebgp ebgp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ebgp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Ibgp ibgp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ibgp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.UseMultiplePaths)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.UseMultiplePaths)
  return false;
#undef DO_
}

void UseMultiplePaths::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.UseMultiplePaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.UseMultiplePathsConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .gobgpapi.UseMultiplePathsState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  // .gobgpapi.Ebgp ebgp = 3;
  if (this->has_ebgp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ebgp_, output);
  }

  // .gobgpapi.Ibgp ibgp = 4;
  if (this->has_ibgp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ibgp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.UseMultiplePaths)
}

::google::protobuf::uint8* UseMultiplePaths::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UseMultiplePaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.UseMultiplePathsConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .gobgpapi.UseMultiplePathsState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  // .gobgpapi.Ebgp ebgp = 3;
  if (this->has_ebgp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->ebgp_, deterministic, target);
  }

  // .gobgpapi.Ibgp ibgp = 4;
  if (this->has_ibgp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->ibgp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UseMultiplePaths)
  return target;
}

size_t UseMultiplePaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UseMultiplePaths)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.UseMultiplePathsConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.UseMultiplePathsState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .gobgpapi.Ebgp ebgp = 3;
  if (this->has_ebgp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ebgp_);
  }

  // .gobgpapi.Ibgp ibgp = 4;
  if (this->has_ibgp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ibgp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseMultiplePaths::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UseMultiplePaths)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMultiplePaths* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UseMultiplePaths>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UseMultiplePaths)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UseMultiplePaths)
    MergeFrom(*source);
  }
}

void UseMultiplePaths::MergeFrom(const UseMultiplePaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UseMultiplePaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::gobgpapi::UseMultiplePathsConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::UseMultiplePathsState::MergeFrom(from.state());
  }
  if (from.has_ebgp()) {
    mutable_ebgp()->::gobgpapi::Ebgp::MergeFrom(from.ebgp());
  }
  if (from.has_ibgp()) {
    mutable_ibgp()->::gobgpapi::Ibgp::MergeFrom(from.ibgp());
  }
}

void UseMultiplePaths::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UseMultiplePaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMultiplePaths::CopyFrom(const UseMultiplePaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UseMultiplePaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMultiplePaths::IsInitialized() const {
  return true;
}

void UseMultiplePaths::Swap(UseMultiplePaths* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UseMultiplePaths::InternalSwap(UseMultiplePaths* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  swap(ebgp_, other->ebgp_);
  swap(ibgp_, other->ibgp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UseMultiplePaths::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteTargetMembershipConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteTargetMembershipConfig::kDeferralTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteTargetMembershipConfig::RouteTargetMembershipConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembershipConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteTargetMembershipConfig)
}
RouteTargetMembershipConfig::RouteTargetMembershipConfig(const RouteTargetMembershipConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deferral_time_ = from.deferral_time_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteTargetMembershipConfig)
}

void RouteTargetMembershipConfig::SharedCtor() {
  deferral_time_ = 0u;
  _cached_size_ = 0;
}

RouteTargetMembershipConfig::~RouteTargetMembershipConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteTargetMembershipConfig)
  SharedDtor();
}

void RouteTargetMembershipConfig::SharedDtor() {
}

void RouteTargetMembershipConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteTargetMembershipConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteTargetMembershipConfig& RouteTargetMembershipConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembershipConfig();
  return *internal_default_instance();
}

RouteTargetMembershipConfig* RouteTargetMembershipConfig::New(::google::protobuf::Arena* arena) const {
  RouteTargetMembershipConfig* n = new RouteTargetMembershipConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteTargetMembershipConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteTargetMembershipConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deferral_time_ = 0u;
  _internal_metadata_.Clear();
}

bool RouteTargetMembershipConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteTargetMembershipConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deferral_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deferral_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteTargetMembershipConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteTargetMembershipConfig)
  return false;
#undef DO_
}

void RouteTargetMembershipConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteTargetMembershipConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deferral_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteTargetMembershipConfig)
}

::google::protobuf::uint8* RouteTargetMembershipConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteTargetMembershipConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deferral_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteTargetMembershipConfig)
  return target;
}

size_t RouteTargetMembershipConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteTargetMembershipConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deferral_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteTargetMembershipConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteTargetMembershipConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembershipConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteTargetMembershipConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteTargetMembershipConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteTargetMembershipConfig)
    MergeFrom(*source);
  }
}

void RouteTargetMembershipConfig::MergeFrom(const RouteTargetMembershipConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteTargetMembershipConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deferral_time() != 0) {
    set_deferral_time(from.deferral_time());
  }
}

void RouteTargetMembershipConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteTargetMembershipConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembershipConfig::CopyFrom(const RouteTargetMembershipConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteTargetMembershipConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembershipConfig::IsInitialized() const {
  return true;
}

void RouteTargetMembershipConfig::Swap(RouteTargetMembershipConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteTargetMembershipConfig::InternalSwap(RouteTargetMembershipConfig* other) {
  using std::swap;
  swap(deferral_time_, other->deferral_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteTargetMembershipConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteTargetMembershipState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteTargetMembershipState::kDeferralTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteTargetMembershipState::RouteTargetMembershipState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembershipState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteTargetMembershipState)
}
RouteTargetMembershipState::RouteTargetMembershipState(const RouteTargetMembershipState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deferral_time_ = from.deferral_time_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteTargetMembershipState)
}

void RouteTargetMembershipState::SharedCtor() {
  deferral_time_ = 0u;
  _cached_size_ = 0;
}

RouteTargetMembershipState::~RouteTargetMembershipState() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteTargetMembershipState)
  SharedDtor();
}

void RouteTargetMembershipState::SharedDtor() {
}

void RouteTargetMembershipState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteTargetMembershipState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteTargetMembershipState& RouteTargetMembershipState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembershipState();
  return *internal_default_instance();
}

RouteTargetMembershipState* RouteTargetMembershipState::New(::google::protobuf::Arena* arena) const {
  RouteTargetMembershipState* n = new RouteTargetMembershipState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteTargetMembershipState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteTargetMembershipState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deferral_time_ = 0u;
  _internal_metadata_.Clear();
}

bool RouteTargetMembershipState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteTargetMembershipState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deferral_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deferral_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteTargetMembershipState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteTargetMembershipState)
  return false;
#undef DO_
}

void RouteTargetMembershipState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteTargetMembershipState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deferral_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteTargetMembershipState)
}

::google::protobuf::uint8* RouteTargetMembershipState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteTargetMembershipState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deferral_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteTargetMembershipState)
  return target;
}

size_t RouteTargetMembershipState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteTargetMembershipState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deferral_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteTargetMembershipState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteTargetMembershipState)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembershipState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteTargetMembershipState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteTargetMembershipState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteTargetMembershipState)
    MergeFrom(*source);
  }
}

void RouteTargetMembershipState::MergeFrom(const RouteTargetMembershipState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteTargetMembershipState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deferral_time() != 0) {
    set_deferral_time(from.deferral_time());
  }
}

void RouteTargetMembershipState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteTargetMembershipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembershipState::CopyFrom(const RouteTargetMembershipState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteTargetMembershipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembershipState::IsInitialized() const {
  return true;
}

void RouteTargetMembershipState::Swap(RouteTargetMembershipState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteTargetMembershipState::InternalSwap(RouteTargetMembershipState* other) {
  using std::swap;
  swap(deferral_time_, other->deferral_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteTargetMembershipState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteTargetMembership::InitAsDefaultInstance() {
  ::gobgpapi::_RouteTargetMembership_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::RouteTargetMembershipConfig*>(
      ::gobgpapi::RouteTargetMembershipConfig::internal_default_instance());
  ::gobgpapi::_RouteTargetMembership_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::RouteTargetMembershipState*>(
      ::gobgpapi::RouteTargetMembershipState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteTargetMembership::kConfigFieldNumber;
const int RouteTargetMembership::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteTargetMembership::RouteTargetMembership()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembership();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteTargetMembership)
}
RouteTargetMembership::RouteTargetMembership(const RouteTargetMembership& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::gobgpapi::RouteTargetMembershipConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::RouteTargetMembershipState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteTargetMembership)
}

void RouteTargetMembership::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

RouteTargetMembership::~RouteTargetMembership() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteTargetMembership)
  SharedDtor();
}

void RouteTargetMembership::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void RouteTargetMembership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteTargetMembership::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteTargetMembership& RouteTargetMembership::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRouteTargetMembership();
  return *internal_default_instance();
}

RouteTargetMembership* RouteTargetMembership::New(::google::protobuf::Arena* arena) const {
  RouteTargetMembership* n = new RouteTargetMembership;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteTargetMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteTargetMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool RouteTargetMembership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteTargetMembership)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.RouteTargetMembershipConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RouteTargetMembershipState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteTargetMembership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteTargetMembership)
  return false;
#undef DO_
}

void RouteTargetMembership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteTargetMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RouteTargetMembershipConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .gobgpapi.RouteTargetMembershipState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteTargetMembership)
}

::google::protobuf::uint8* RouteTargetMembership::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteTargetMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RouteTargetMembershipConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .gobgpapi.RouteTargetMembershipState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteTargetMembership)
  return target;
}

size_t RouteTargetMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteTargetMembership)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.RouteTargetMembershipConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.RouteTargetMembershipState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteTargetMembership::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteTargetMembership)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembership* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteTargetMembership>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteTargetMembership)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteTargetMembership)
    MergeFrom(*source);
  }
}

void RouteTargetMembership::MergeFrom(const RouteTargetMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteTargetMembership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::gobgpapi::RouteTargetMembershipConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::RouteTargetMembershipState::MergeFrom(from.state());
  }
}

void RouteTargetMembership::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteTargetMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembership::CopyFrom(const RouteTargetMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteTargetMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembership::IsInitialized() const {
  return true;
}

void RouteTargetMembership::Swap(RouteTargetMembership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteTargetMembership::InternalSwap(RouteTargetMembership* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteTargetMembership::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LongLivedGracefulRestartConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongLivedGracefulRestartConfig::kEnabledFieldNumber;
const int LongLivedGracefulRestartConfig::kRestartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongLivedGracefulRestartConfig::LongLivedGracefulRestartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestartConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LongLivedGracefulRestartConfig)
}
LongLivedGracefulRestartConfig::LongLivedGracefulRestartConfig(const LongLivedGracefulRestartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&restart_time_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(restart_time_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LongLivedGracefulRestartConfig)
}

void LongLivedGracefulRestartConfig::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(restart_time_));
  _cached_size_ = 0;
}

LongLivedGracefulRestartConfig::~LongLivedGracefulRestartConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.LongLivedGracefulRestartConfig)
  SharedDtor();
}

void LongLivedGracefulRestartConfig::SharedDtor() {
}

void LongLivedGracefulRestartConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongLivedGracefulRestartConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LongLivedGracefulRestartConfig& LongLivedGracefulRestartConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestartConfig();
  return *internal_default_instance();
}

LongLivedGracefulRestartConfig* LongLivedGracefulRestartConfig::New(::google::protobuf::Arena* arena) const {
  LongLivedGracefulRestartConfig* n = new LongLivedGracefulRestartConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LongLivedGracefulRestartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LongLivedGracefulRestartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(restart_time_));
  _internal_metadata_.Clear();
}

bool LongLivedGracefulRestartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.LongLivedGracefulRestartConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 restart_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restart_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.LongLivedGracefulRestartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.LongLivedGracefulRestartConfig)
  return false;
#undef DO_
}

void LongLivedGracefulRestartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.LongLivedGracefulRestartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->restart_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.LongLivedGracefulRestartConfig)
}

::google::protobuf::uint8* LongLivedGracefulRestartConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LongLivedGracefulRestartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->restart_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LongLivedGracefulRestartConfig)
  return target;
}

size_t LongLivedGracefulRestartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LongLivedGracefulRestartConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->restart_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongLivedGracefulRestartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LongLivedGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LongLivedGracefulRestartConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LongLivedGracefulRestartConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LongLivedGracefulRestartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LongLivedGracefulRestartConfig)
    MergeFrom(*source);
  }
}

void LongLivedGracefulRestartConfig::MergeFrom(const LongLivedGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LongLivedGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.restart_time() != 0) {
    set_restart_time(from.restart_time());
  }
}

void LongLivedGracefulRestartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LongLivedGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongLivedGracefulRestartConfig::CopyFrom(const LongLivedGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LongLivedGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLivedGracefulRestartConfig::IsInitialized() const {
  return true;
}

void LongLivedGracefulRestartConfig::Swap(LongLivedGracefulRestartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LongLivedGracefulRestartConfig::InternalSwap(LongLivedGracefulRestartConfig* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(restart_time_, other->restart_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LongLivedGracefulRestartConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LongLivedGracefulRestartState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongLivedGracefulRestartState::kEnabledFieldNumber;
const int LongLivedGracefulRestartState::kReceivedFieldNumber;
const int LongLivedGracefulRestartState::kAdvertisedFieldNumber;
const int LongLivedGracefulRestartState::kPeerRestartTimeFieldNumber;
const int LongLivedGracefulRestartState::kPeerRestartTimerExpiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongLivedGracefulRestartState::LongLivedGracefulRestartState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestartState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LongLivedGracefulRestartState)
}
LongLivedGracefulRestartState::LongLivedGracefulRestartState(const LongLivedGracefulRestartState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_restart_time_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(peer_restart_time_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LongLivedGracefulRestartState)
}

void LongLivedGracefulRestartState::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(peer_restart_time_));
  _cached_size_ = 0;
}

LongLivedGracefulRestartState::~LongLivedGracefulRestartState() {
  // @@protoc_insertion_point(destructor:gobgpapi.LongLivedGracefulRestartState)
  SharedDtor();
}

void LongLivedGracefulRestartState::SharedDtor() {
}

void LongLivedGracefulRestartState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongLivedGracefulRestartState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LongLivedGracefulRestartState& LongLivedGracefulRestartState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestartState();
  return *internal_default_instance();
}

LongLivedGracefulRestartState* LongLivedGracefulRestartState::New(::google::protobuf::Arena* arena) const {
  LongLivedGracefulRestartState* n = new LongLivedGracefulRestartState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LongLivedGracefulRestartState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LongLivedGracefulRestartState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(peer_restart_time_));
  _internal_metadata_.Clear();
}

bool LongLivedGracefulRestartState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.LongLivedGracefulRestartState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool received = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool advertised = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advertised_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peer_restart_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_restart_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool peer_restart_timer_expired = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &peer_restart_timer_expired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.LongLivedGracefulRestartState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.LongLivedGracefulRestartState)
  return false;
#undef DO_
}

void LongLivedGracefulRestartState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.LongLivedGracefulRestartState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // bool received = 2;
  if (this->received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->received(), output);
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->advertised(), output);
  }

  // uint32 peer_restart_time = 4;
  if (this->peer_restart_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peer_restart_time(), output);
  }

  // bool peer_restart_timer_expired = 5;
  if (this->peer_restart_timer_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->peer_restart_timer_expired(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.LongLivedGracefulRestartState)
}

::google::protobuf::uint8* LongLivedGracefulRestartState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LongLivedGracefulRestartState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // bool received = 2;
  if (this->received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->received(), target);
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->advertised(), target);
  }

  // uint32 peer_restart_time = 4;
  if (this->peer_restart_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peer_restart_time(), target);
  }

  // bool peer_restart_timer_expired = 5;
  if (this->peer_restart_timer_expired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->peer_restart_timer_expired(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LongLivedGracefulRestartState)
  return target;
}

size_t LongLivedGracefulRestartState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LongLivedGracefulRestartState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool received = 2;
  if (this->received() != 0) {
    total_size += 1 + 1;
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    total_size += 1 + 1;
  }

  // bool peer_restart_timer_expired = 5;
  if (this->peer_restart_timer_expired() != 0) {
    total_size += 1 + 1;
  }

  // uint32 peer_restart_time = 4;
  if (this->peer_restart_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_restart_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongLivedGracefulRestartState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LongLivedGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  const LongLivedGracefulRestartState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LongLivedGracefulRestartState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LongLivedGracefulRestartState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LongLivedGracefulRestartState)
    MergeFrom(*source);
  }
}

void LongLivedGracefulRestartState::MergeFrom(const LongLivedGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LongLivedGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.received() != 0) {
    set_received(from.received());
  }
  if (from.advertised() != 0) {
    set_advertised(from.advertised());
  }
  if (from.peer_restart_timer_expired() != 0) {
    set_peer_restart_timer_expired(from.peer_restart_timer_expired());
  }
  if (from.peer_restart_time() != 0) {
    set_peer_restart_time(from.peer_restart_time());
  }
}

void LongLivedGracefulRestartState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LongLivedGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongLivedGracefulRestartState::CopyFrom(const LongLivedGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LongLivedGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLivedGracefulRestartState::IsInitialized() const {
  return true;
}

void LongLivedGracefulRestartState::Swap(LongLivedGracefulRestartState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LongLivedGracefulRestartState::InternalSwap(LongLivedGracefulRestartState* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(received_, other->received_);
  swap(advertised_, other->advertised_);
  swap(peer_restart_timer_expired_, other->peer_restart_timer_expired_);
  swap(peer_restart_time_, other->peer_restart_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LongLivedGracefulRestartState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LongLivedGracefulRestart::InitAsDefaultInstance() {
  ::gobgpapi::_LongLivedGracefulRestart_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::LongLivedGracefulRestartConfig*>(
      ::gobgpapi::LongLivedGracefulRestartConfig::internal_default_instance());
  ::gobgpapi::_LongLivedGracefulRestart_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::LongLivedGracefulRestartState*>(
      ::gobgpapi::LongLivedGracefulRestartState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongLivedGracefulRestart::kConfigFieldNumber;
const int LongLivedGracefulRestart::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongLivedGracefulRestart::LongLivedGracefulRestart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestart();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LongLivedGracefulRestart)
}
LongLivedGracefulRestart::LongLivedGracefulRestart(const LongLivedGracefulRestart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::gobgpapi::LongLivedGracefulRestartConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::LongLivedGracefulRestartState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LongLivedGracefulRestart)
}

void LongLivedGracefulRestart::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

LongLivedGracefulRestart::~LongLivedGracefulRestart() {
  // @@protoc_insertion_point(destructor:gobgpapi.LongLivedGracefulRestart)
  SharedDtor();
}

void LongLivedGracefulRestart::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void LongLivedGracefulRestart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongLivedGracefulRestart::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LongLivedGracefulRestart& LongLivedGracefulRestart::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsLongLivedGracefulRestart();
  return *internal_default_instance();
}

LongLivedGracefulRestart* LongLivedGracefulRestart::New(::google::protobuf::Arena* arena) const {
  LongLivedGracefulRestart* n = new LongLivedGracefulRestart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LongLivedGracefulRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LongLivedGracefulRestart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool LongLivedGracefulRestart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.LongLivedGracefulRestart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.LongLivedGracefulRestartConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.LongLivedGracefulRestartState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.LongLivedGracefulRestart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.LongLivedGracefulRestart)
  return false;
#undef DO_
}

void LongLivedGracefulRestart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.LongLivedGracefulRestart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LongLivedGracefulRestartConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .gobgpapi.LongLivedGracefulRestartState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.LongLivedGracefulRestart)
}

::google::protobuf::uint8* LongLivedGracefulRestart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LongLivedGracefulRestart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LongLivedGracefulRestartConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .gobgpapi.LongLivedGracefulRestartState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LongLivedGracefulRestart)
  return target;
}

size_t LongLivedGracefulRestart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LongLivedGracefulRestart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.LongLivedGracefulRestartConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.LongLivedGracefulRestartState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongLivedGracefulRestart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LongLivedGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  const LongLivedGracefulRestart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LongLivedGracefulRestart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LongLivedGracefulRestart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LongLivedGracefulRestart)
    MergeFrom(*source);
  }
}

void LongLivedGracefulRestart::MergeFrom(const LongLivedGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LongLivedGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::gobgpapi::LongLivedGracefulRestartConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::LongLivedGracefulRestartState::MergeFrom(from.state());
  }
}

void LongLivedGracefulRestart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LongLivedGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongLivedGracefulRestart::CopyFrom(const LongLivedGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LongLivedGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLivedGracefulRestart::IsInitialized() const {
  return true;
}

void LongLivedGracefulRestart::Swap(LongLivedGracefulRestart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LongLivedGracefulRestart::InternalSwap(LongLivedGracefulRestart* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LongLivedGracefulRestart::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AfiSafi::InitAsDefaultInstance() {
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->mp_graceful_restart_ = const_cast< ::gobgpapi::MpGracefulRestart*>(
      ::gobgpapi::MpGracefulRestart::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::AfiSafiConfig*>(
      ::gobgpapi::AfiSafiConfig::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::gobgpapi::ApplyPolicy*>(
      ::gobgpapi::ApplyPolicy::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->route_selection_options_ = const_cast< ::gobgpapi::RouteSelectionOptions*>(
      ::gobgpapi::RouteSelectionOptions::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->use_multiple_paths_ = const_cast< ::gobgpapi::UseMultiplePaths*>(
      ::gobgpapi::UseMultiplePaths::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->prefix_limits_ = const_cast< ::gobgpapi::PrefixLimit*>(
      ::gobgpapi::PrefixLimit::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->route_target_membership_ = const_cast< ::gobgpapi::RouteTargetMembership*>(
      ::gobgpapi::RouteTargetMembership::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->long_lived_graceful_restart_ = const_cast< ::gobgpapi::LongLivedGracefulRestart*>(
      ::gobgpapi::LongLivedGracefulRestart::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->add_paths_ = const_cast< ::gobgpapi::AddPaths*>(
      ::gobgpapi::AddPaths::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AfiSafi::kMpGracefulRestartFieldNumber;
const int AfiSafi::kConfigFieldNumber;
const int AfiSafi::kApplyPolicyFieldNumber;
const int AfiSafi::kRouteSelectionOptionsFieldNumber;
const int AfiSafi::kUseMultiplePathsFieldNumber;
const int AfiSafi::kPrefixLimitsFieldNumber;
const int AfiSafi::kRouteTargetMembershipFieldNumber;
const int AfiSafi::kLongLivedGracefulRestartFieldNumber;
const int AfiSafi::kAddPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AfiSafi::AfiSafi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAfiSafi();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AfiSafi)
}
AfiSafi::AfiSafi(const AfiSafi& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mp_graceful_restart()) {
    mp_graceful_restart_ = new ::gobgpapi::MpGracefulRestart(*from.mp_graceful_restart_);
  } else {
    mp_graceful_restart_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::gobgpapi::AfiSafiConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_apply_policy()) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = NULL;
  }
  if (from.has_route_selection_options()) {
    route_selection_options_ = new ::gobgpapi::RouteSelectionOptions(*from.route_selection_options_);
  } else {
    route_selection_options_ = NULL;
  }
  if (from.has_use_multiple_paths()) {
    use_multiple_paths_ = new ::gobgpapi::UseMultiplePaths(*from.use_multiple_paths_);
  } else {
    use_multiple_paths_ = NULL;
  }
  if (from.has_prefix_limits()) {
    prefix_limits_ = new ::gobgpapi::PrefixLimit(*from.prefix_limits_);
  } else {
    prefix_limits_ = NULL;
  }
  if (from.has_route_target_membership()) {
    route_target_membership_ = new ::gobgpapi::RouteTargetMembership(*from.route_target_membership_);
  } else {
    route_target_membership_ = NULL;
  }
  if (from.has_long_lived_graceful_restart()) {
    long_lived_graceful_restart_ = new ::gobgpapi::LongLivedGracefulRestart(*from.long_lived_graceful_restart_);
  } else {
    long_lived_graceful_restart_ = NULL;
  }
  if (from.has_add_paths()) {
    add_paths_ = new ::gobgpapi::AddPaths(*from.add_paths_);
  } else {
    add_paths_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AfiSafi)
}

void AfiSafi::SharedCtor() {
  ::memset(&mp_graceful_restart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_paths_) -
      reinterpret_cast<char*>(&mp_graceful_restart_)) + sizeof(add_paths_));
  _cached_size_ = 0;
}

AfiSafi::~AfiSafi() {
  // @@protoc_insertion_point(destructor:gobgpapi.AfiSafi)
  SharedDtor();
}

void AfiSafi::SharedDtor() {
  if (this != internal_default_instance()) delete mp_graceful_restart_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete apply_policy_;
  if (this != internal_default_instance()) delete route_selection_options_;
  if (this != internal_default_instance()) delete use_multiple_paths_;
  if (this != internal_default_instance()) delete prefix_limits_;
  if (this != internal_default_instance()) delete route_target_membership_;
  if (this != internal_default_instance()) delete long_lived_graceful_restart_;
  if (this != internal_default_instance()) delete add_paths_;
}

void AfiSafi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfiSafi::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AfiSafi& AfiSafi::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAfiSafi();
  return *internal_default_instance();
}

AfiSafi* AfiSafi::New(::google::protobuf::Arena* arena) const {
  AfiSafi* n = new AfiSafi;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AfiSafi::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AfiSafi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && mp_graceful_restart_ != NULL) {
    delete mp_graceful_restart_;
  }
  mp_graceful_restart_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && apply_policy_ != NULL) {
    delete apply_policy_;
  }
  apply_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && route_selection_options_ != NULL) {
    delete route_selection_options_;
  }
  route_selection_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && use_multiple_paths_ != NULL) {
    delete use_multiple_paths_;
  }
  use_multiple_paths_ = NULL;
  if (GetArenaNoVirtual() == NULL && prefix_limits_ != NULL) {
    delete prefix_limits_;
  }
  prefix_limits_ = NULL;
  if (GetArenaNoVirtual() == NULL && route_target_membership_ != NULL) {
    delete route_target_membership_;
  }
  route_target_membership_ = NULL;
  if (GetArenaNoVirtual() == NULL && long_lived_graceful_restart_ != NULL) {
    delete long_lived_graceful_restart_;
  }
  long_lived_graceful_restart_ = NULL;
  if (GetArenaNoVirtual() == NULL && add_paths_ != NULL) {
    delete add_paths_;
  }
  add_paths_ = NULL;
  _internal_metadata_.Clear();
}

bool AfiSafi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AfiSafi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mp_graceful_restart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.AfiSafiConfig config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.ApplyPolicy apply_policy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apply_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RouteSelectionOptions route_selection_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_route_selection_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.UseMultiplePaths use_multiple_paths = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_use_multiple_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.PrefixLimit prefix_limits = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prefix_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RouteTargetMembership route_target_membership = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_route_target_membership()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_long_lived_graceful_restart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.AddPaths add_paths = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AfiSafi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AfiSafi)
  return false;
#undef DO_
}

void AfiSafi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AfiSafi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
  if (this->has_mp_graceful_restart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mp_graceful_restart_, output);
  }

  // .gobgpapi.AfiSafiConfig config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 3;
  if (this->has_apply_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->apply_policy_, output);
  }

  // .gobgpapi.RouteSelectionOptions route_selection_options = 4;
  if (this->has_route_selection_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->route_selection_options_, output);
  }

  // .gobgpapi.UseMultiplePaths use_multiple_paths = 5;
  if (this->has_use_multiple_paths()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->use_multiple_paths_, output);
  }

  // .gobgpapi.PrefixLimit prefix_limits = 6;
  if (this->has_prefix_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->prefix_limits_, output);
  }

  // .gobgpapi.RouteTargetMembership route_target_membership = 7;
  if (this->has_route_target_membership()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->route_target_membership_, output);
  }

  // .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 8;
  if (this->has_long_lived_graceful_restart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->long_lived_graceful_restart_, output);
  }

  // .gobgpapi.AddPaths add_paths = 9;
  if (this->has_add_paths()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->add_paths_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AfiSafi)
}

::google::protobuf::uint8* AfiSafi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AfiSafi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
  if (this->has_mp_graceful_restart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->mp_graceful_restart_, deterministic, target);
  }

  // .gobgpapi.AfiSafiConfig config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->config_, deterministic, target);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 3;
  if (this->has_apply_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->apply_policy_, deterministic, target);
  }

  // .gobgpapi.RouteSelectionOptions route_selection_options = 4;
  if (this->has_route_selection_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->route_selection_options_, deterministic, target);
  }

  // .gobgpapi.UseMultiplePaths use_multiple_paths = 5;
  if (this->has_use_multiple_paths()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->use_multiple_paths_, deterministic, target);
  }

  // .gobgpapi.PrefixLimit prefix_limits = 6;
  if (this->has_prefix_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->prefix_limits_, deterministic, target);
  }

  // .gobgpapi.RouteTargetMembership route_target_membership = 7;
  if (this->has_route_target_membership()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->route_target_membership_, deterministic, target);
  }

  // .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 8;
  if (this->has_long_lived_graceful_restart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->long_lived_graceful_restart_, deterministic, target);
  }

  // .gobgpapi.AddPaths add_paths = 9;
  if (this->has_add_paths()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->add_paths_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AfiSafi)
  return target;
}

size_t AfiSafi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AfiSafi)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
  if (this->has_mp_graceful_restart()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mp_graceful_restart_);
  }

  // .gobgpapi.AfiSafiConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 3;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->apply_policy_);
  }

  // .gobgpapi.RouteSelectionOptions route_selection_options = 4;
  if (this->has_route_selection_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->route_selection_options_);
  }

  // .gobgpapi.UseMultiplePaths use_multiple_paths = 5;
  if (this->has_use_multiple_paths()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->use_multiple_paths_);
  }

  // .gobgpapi.PrefixLimit prefix_limits = 6;
  if (this->has_prefix_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->prefix_limits_);
  }

  // .gobgpapi.RouteTargetMembership route_target_membership = 7;
  if (this->has_route_target_membership()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->route_target_membership_);
  }

  // .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 8;
  if (this->has_long_lived_graceful_restart()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->long_lived_graceful_restart_);
  }

  // .gobgpapi.AddPaths add_paths = 9;
  if (this->has_add_paths()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->add_paths_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfiSafi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AfiSafi)
  GOOGLE_DCHECK_NE(&from, this);
  const AfiSafi* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AfiSafi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AfiSafi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AfiSafi)
    MergeFrom(*source);
  }
}

void AfiSafi::MergeFrom(const AfiSafi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AfiSafi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mp_graceful_restart()) {
    mutable_mp_graceful_restart()->::gobgpapi::MpGracefulRestart::MergeFrom(from.mp_graceful_restart());
  }
  if (from.has_config()) {
    mutable_config()->::gobgpapi::AfiSafiConfig::MergeFrom(from.config());
  }
  if (from.has_apply_policy()) {
    mutable_apply_policy()->::gobgpapi::ApplyPolicy::MergeFrom(from.apply_policy());
  }
  if (from.has_route_selection_options()) {
    mutable_route_selection_options()->::gobgpapi::RouteSelectionOptions::MergeFrom(from.route_selection_options());
  }
  if (from.has_use_multiple_paths()) {
    mutable_use_multiple_paths()->::gobgpapi::UseMultiplePaths::MergeFrom(from.use_multiple_paths());
  }
  if (from.has_prefix_limits()) {
    mutable_prefix_limits()->::gobgpapi::PrefixLimit::MergeFrom(from.prefix_limits());
  }
  if (from.has_route_target_membership()) {
    mutable_route_target_membership()->::gobgpapi::RouteTargetMembership::MergeFrom(from.route_target_membership());
  }
  if (from.has_long_lived_graceful_restart()) {
    mutable_long_lived_graceful_restart()->::gobgpapi::LongLivedGracefulRestart::MergeFrom(from.long_lived_graceful_restart());
  }
  if (from.has_add_paths()) {
    mutable_add_paths()->::gobgpapi::AddPaths::MergeFrom(from.add_paths());
  }
}

void AfiSafi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AfiSafi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfiSafi::CopyFrom(const AfiSafi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AfiSafi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfiSafi::IsInitialized() const {
  return true;
}

void AfiSafi::Swap(AfiSafi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AfiSafi::InternalSwap(AfiSafi* other) {
  using std::swap;
  swap(mp_graceful_restart_, other->mp_graceful_restart_);
  swap(config_, other->config_);
  swap(apply_policy_, other->apply_policy_);
  swap(route_selection_options_, other->route_selection_options_);
  swap(use_multiple_paths_, other->use_multiple_paths_);
  swap(prefix_limits_, other->prefix_limits_);
  swap(route_target_membership_, other->route_target_membership_);
  swap(long_lived_graceful_restart_, other->long_lived_graceful_restart_);
  swap(add_paths_, other->add_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AfiSafi::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPathsConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPathsConfig::kReceiveFieldNumber;
const int AddPathsConfig::kSendMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPathsConfig::AddPathsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddPathsConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPathsConfig)
}
AddPathsConfig::AddPathsConfig(const AddPathsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&receive_, &from.receive_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_max_) -
    reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPathsConfig)
}

void AddPathsConfig::SharedCtor() {
  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  _cached_size_ = 0;
}

AddPathsConfig::~AddPathsConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPathsConfig)
  SharedDtor();
}

void AddPathsConfig::SharedDtor() {
}

void AddPathsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPathsConfig::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPathsConfig& AddPathsConfig::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddPathsConfig();
  return *internal_default_instance();
}

AddPathsConfig* AddPathsConfig::New(::google::protobuf::Arena* arena) const {
  AddPathsConfig* n = new AddPathsConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPathsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPathsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  _internal_metadata_.Clear();
}

bool AddPathsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddPathsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool receive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddPathsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddPathsConfig)
  return false;
#undef DO_
}

void AddPathsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddPathsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->receive(), output);
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddPathsConfig)
}

::google::protobuf::uint8* AddPathsConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPathsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->receive(), target);
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPathsConfig)
  return target;
}

size_t AddPathsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPathsConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool receive = 1;
  if (this->receive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPathsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathsConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPathsConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPathsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPathsConfig)
    MergeFrom(*source);
  }
}

void AddPathsConfig::MergeFrom(const AddPathsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receive() != 0) {
    set_receive(from.receive());
  }
  if (from.send_max() != 0) {
    set_send_max(from.send_max());
  }
}

void AddPathsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathsConfig::CopyFrom(const AddPathsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathsConfig::IsInitialized() const {
  return true;
}

void AddPathsConfig::Swap(AddPathsConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPathsConfig::InternalSwap(AddPathsConfig* other) {
  using std::swap;
  swap(receive_, other->receive_);
  swap(send_max_, other->send_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPathsConfig::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPathsState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPathsState::kReceiveFieldNumber;
const int AddPathsState::kSendMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPathsState::AddPathsState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddPathsState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPathsState)
}
AddPathsState::AddPathsState(const AddPathsState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&receive_, &from.receive_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_max_) -
    reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPathsState)
}

void AddPathsState::SharedCtor() {
  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  _cached_size_ = 0;
}

AddPathsState::~AddPathsState() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPathsState)
  SharedDtor();
}

void AddPathsState::SharedDtor() {
}

void AddPathsState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPathsState::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPathsState& AddPathsState::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddPathsState();
  return *internal_default_instance();
}

AddPathsState* AddPathsState::New(::google::protobuf::Arena* arena) const {
  AddPathsState* n = new AddPathsState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPathsState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPathsState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  _internal_metadata_.Clear();
}

bool AddPathsState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddPathsState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool receive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddPathsState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddPathsState)
  return false;
#undef DO_
}

void AddPathsState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddPathsState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->receive(), output);
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddPathsState)
}

::google::protobuf::uint8* AddPathsState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPathsState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->receive(), target);
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPathsState)
  return target;
}

size_t AddPathsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPathsState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool receive = 1;
  if (this->receive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPathsState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPathsState)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathsState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPathsState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPathsState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPathsState)
    MergeFrom(*source);
  }
}

void AddPathsState::MergeFrom(const AddPathsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPathsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receive() != 0) {
    set_receive(from.receive());
  }
  if (from.send_max() != 0) {
    set_send_max(from.send_max());
  }
}

void AddPathsState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathsState::CopyFrom(const AddPathsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathsState::IsInitialized() const {
  return true;
}

void AddPathsState::Swap(AddPathsState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPathsState::InternalSwap(AddPathsState* other) {
  using std::swap;
  swap(receive_, other->receive_);
  swap(send_max_, other->send_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPathsState::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPaths::InitAsDefaultInstance() {
  ::gobgpapi::_AddPaths_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::AddPathsConfig*>(
      ::gobgpapi::AddPathsConfig::internal_default_instance());
  ::gobgpapi::_AddPaths_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::AddPathsState*>(
      ::gobgpapi::AddPathsState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPaths::kConfigFieldNumber;
const int AddPaths::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPaths::AddPaths()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAddPaths();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPaths)
}
AddPaths::AddPaths(const AddPaths& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::gobgpapi::AddPathsConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::gobgpapi::AddPathsState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPaths)
}

void AddPaths::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

AddPaths::~AddPaths() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPaths)
  SharedDtor();
}

void AddPaths::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void AddPaths::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPaths::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPaths& AddPaths::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAddPaths();
  return *internal_default_instance();
}

AddPaths* AddPaths::New(::google::protobuf::Arena* arena) const {
  AddPaths* n = new AddPaths;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool AddPaths::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AddPaths)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.AddPathsConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.AddPathsState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AddPaths)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AddPaths)
  return false;
#undef DO_
}

void AddPaths::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AddPaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.AddPathsConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .gobgpapi.AddPathsState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AddPaths)
}

::google::protobuf::uint8* AddPaths::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.AddPathsConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .gobgpapi.AddPathsState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPaths)
  return target;
}

size_t AddPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPaths)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.AddPathsConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .gobgpapi.AddPathsState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPaths::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPaths)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPaths* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPaths>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPaths)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPaths)
    MergeFrom(*source);
  }
}

void AddPaths::MergeFrom(const AddPaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::gobgpapi::AddPathsConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::AddPathsState::MergeFrom(from.state());
  }
}

void AddPaths::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPaths::CopyFrom(const AddPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPaths::IsInitialized() const {
  return true;
}

void AddPaths::Swap(AddPaths* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPaths::InternalSwap(AddPaths* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPaths::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Prefix::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Prefix::kIpPrefixFieldNumber;
const int Prefix::kMaskLengthMinFieldNumber;
const int Prefix::kMaskLengthMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Prefix::Prefix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsPrefix();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Prefix)
}
Prefix::Prefix(const Prefix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_prefix().size() > 0) {
    ip_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_prefix_);
  }
  ::memcpy(&mask_length_min_, &from.mask_length_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_length_max_) -
    reinterpret_cast<char*>(&mask_length_min_)) + sizeof(mask_length_max_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Prefix)
}

void Prefix::SharedCtor() {
  ip_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask_length_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_length_max_) -
      reinterpret_cast<char*>(&mask_length_min_)) + sizeof(mask_length_max_));
  _cached_size_ = 0;
}

Prefix::~Prefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.Prefix)
  SharedDtor();
}

void Prefix::SharedDtor() {
  ip_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Prefix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Prefix::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Prefix& Prefix::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsPrefix();
  return *internal_default_instance();
}

Prefix* Prefix::New(::google::protobuf::Arena* arena) const {
  Prefix* n = new Prefix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Prefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Prefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask_length_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_length_max_) -
      reinterpret_cast<char*>(&mask_length_min_)) + sizeof(mask_length_max_));
  _internal_metadata_.Clear();
}

bool Prefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Prefix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_prefix().data(), static_cast<int>(this->ip_prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Prefix.ip_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mask_length_min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_length_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mask_length_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_length_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Prefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Prefix)
  return false;
#undef DO_
}

void Prefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Prefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_prefix().data(), static_cast<int>(this->ip_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Prefix.ip_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_prefix(), output);
  }

  // uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mask_length_min(), output);
  }

  // uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mask_length_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Prefix)
}

::google::protobuf::uint8* Prefix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Prefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_prefix().data(), static_cast<int>(this->ip_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Prefix.ip_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_prefix(), target);
  }

  // uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mask_length_min(), target);
  }

  // uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mask_length_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Prefix)
  return target;
}

size_t Prefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Prefix)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_prefix());
  }

  // uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask_length_min());
  }

  // uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask_length_max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Prefix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  const Prefix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Prefix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Prefix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Prefix)
    MergeFrom(*source);
  }
}

void Prefix::MergeFrom(const Prefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_prefix().size() > 0) {

    ip_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_prefix_);
  }
  if (from.mask_length_min() != 0) {
    set_mask_length_min(from.mask_length_min());
  }
  if (from.mask_length_max() != 0) {
    set_mask_length_max(from.mask_length_max());
  }
}

void Prefix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prefix::CopyFrom(const Prefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prefix::IsInitialized() const {
  return true;
}

void Prefix::Swap(Prefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Prefix::InternalSwap(Prefix* other) {
  using std::swap;
  ip_prefix_.Swap(&other->ip_prefix_);
  swap(mask_length_min_, other->mask_length_min_);
  swap(mask_length_max_, other->mask_length_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Prefix::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DefinedSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefinedSet::kTypeFieldNumber;
const int DefinedSet::kNameFieldNumber;
const int DefinedSet::kListFieldNumber;
const int DefinedSet::kPrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefinedSet::DefinedSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsDefinedSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DefinedSet)
}
DefinedSet::DefinedSet(const DefinedSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      list_(from.list_),
      prefixes_(from.prefixes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DefinedSet)
}

void DefinedSet::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

DefinedSet::~DefinedSet() {
  // @@protoc_insertion_point(destructor:gobgpapi.DefinedSet)
  SharedDtor();
}

void DefinedSet::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DefinedSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefinedSet::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DefinedSet& DefinedSet::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsDefinedSet();
  return *internal_default_instance();
}

DefinedSet* DefinedSet::New(::google::protobuf::Arena* arena) const {
  DefinedSet* n = new DefinedSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefinedSet::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DefinedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  prefixes_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool DefinedSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DefinedSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.DefinedType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::DefinedType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DefinedSet.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list(this->list_size() - 1).data(),
            static_cast<int>(this->list(this->list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DefinedSet.list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.Prefix prefixes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_prefixes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DefinedSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DefinedSet)
  return false;
#undef DO_
}

void DefinedSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DefinedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string list = 3;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->list(i), output);
  }

  // repeated .gobgpapi.Prefix prefixes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prefixes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prefixes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.DefinedSet)
}

::google::protobuf::uint8* DefinedSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DefinedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string list = 3;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->list(i), target);
  }

  // repeated .gobgpapi.Prefix prefixes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prefixes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->prefixes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DefinedSet)
  return target;
}

size_t DefinedSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DefinedSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string list = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->list_size());
  for (int i = 0, n = this->list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->list(i));
  }

  // repeated .gobgpapi.Prefix prefixes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->prefixes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prefixes(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gobgpapi.DefinedType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefinedSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DefinedSet)
  GOOGLE_DCHECK_NE(&from, this);
  const DefinedSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DefinedSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DefinedSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DefinedSet)
    MergeFrom(*source);
  }
}

void DefinedSet::MergeFrom(const DefinedSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DefinedSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  prefixes_.MergeFrom(from.prefixes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DefinedSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DefinedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefinedSet::CopyFrom(const DefinedSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DefinedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefinedSet::IsInitialized() const {
  return true;
}

void DefinedSet::Swap(DefinedSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefinedSet::InternalSwap(DefinedSet* other) {
  using std::swap;
  list_.InternalSwap(&other->list_);
  prefixes_.InternalSwap(&other->prefixes_);
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefinedSet::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MatchSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchSet::kTypeFieldNumber;
const int MatchSet::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchSet::MatchSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsMatchSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MatchSet)
}
MatchSet::MatchSet(const MatchSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MatchSet)
}

void MatchSet::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

MatchSet::~MatchSet() {
  // @@protoc_insertion_point(destructor:gobgpapi.MatchSet)
  SharedDtor();
}

void MatchSet::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MatchSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSet::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatchSet& MatchSet::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsMatchSet();
  return *internal_default_instance();
}

MatchSet* MatchSet::New(::google::protobuf::Arena* arena) const {
  MatchSet* n = new MatchSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchSet::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MatchSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool MatchSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MatchSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.MatchType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::MatchType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.MatchSet.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MatchSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MatchSet)
  return false;
#undef DO_
}

void MatchSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MatchSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MatchType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MatchSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.MatchSet)
}

::google::protobuf::uint8* MatchSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MatchSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MatchType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MatchSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MatchSet)
  return target;
}

size_t MatchSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MatchSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gobgpapi.MatchType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MatchSet)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MatchSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MatchSet)
    MergeFrom(*source);
  }
}

void MatchSet::MergeFrom(const MatchSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MatchSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MatchSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MatchSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSet::CopyFrom(const MatchSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MatchSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSet::IsInitialized() const {
  return true;
}

void MatchSet::Swap(MatchSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchSet::InternalSwap(MatchSet* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchSet::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AsPathLength::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AsPathLength::kTypeFieldNumber;
const int AsPathLength::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AsPathLength::AsPathLength()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAsPathLength();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AsPathLength)
}
AsPathLength::AsPathLength(const AsPathLength& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&type_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AsPathLength)
}

void AsPathLength::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&type_)) + sizeof(length_));
  _cached_size_ = 0;
}

AsPathLength::~AsPathLength() {
  // @@protoc_insertion_point(destructor:gobgpapi.AsPathLength)
  SharedDtor();
}

void AsPathLength::SharedDtor() {
}

void AsPathLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsPathLength::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AsPathLength& AsPathLength::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAsPathLength();
  return *internal_default_instance();
}

AsPathLength* AsPathLength::New(::google::protobuf::Arena* arena) const {
  AsPathLength* n = new AsPathLength;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AsPathLength::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AsPathLength)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&type_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool AsPathLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AsPathLength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.AsPathLengthType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::AsPathLengthType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AsPathLength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AsPathLength)
  return false;
#undef DO_
}

void AsPathLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AsPathLength)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.AsPathLengthType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AsPathLength)
}

::google::protobuf::uint8* AsPathLength::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AsPathLength)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.AsPathLengthType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AsPathLength)
  return target;
}

size_t AsPathLength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AsPathLength)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.AsPathLengthType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsPathLength::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AsPathLength)
  GOOGLE_DCHECK_NE(&from, this);
  const AsPathLength* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AsPathLength>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AsPathLength)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AsPathLength)
    MergeFrom(*source);
  }
}

void AsPathLength::MergeFrom(const AsPathLength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AsPathLength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void AsPathLength::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AsPathLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPathLength::CopyFrom(const AsPathLength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AsPathLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPathLength::IsInitialized() const {
  return true;
}

void AsPathLength::Swap(AsPathLength* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AsPathLength::InternalSwap(AsPathLength* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AsPathLength::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Conditions::InitAsDefaultInstance() {
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->prefix_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->neighbor_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->as_path_length_ = const_cast< ::gobgpapi::AsPathLength*>(
      ::gobgpapi::AsPathLength::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->as_path_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->community_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->ext_community_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->large_community_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Conditions::kPrefixSetFieldNumber;
const int Conditions::kNeighborSetFieldNumber;
const int Conditions::kAsPathLengthFieldNumber;
const int Conditions::kAsPathSetFieldNumber;
const int Conditions::kCommunitySetFieldNumber;
const int Conditions::kExtCommunitySetFieldNumber;
const int Conditions::kRpkiResultFieldNumber;
const int Conditions::kRouteTypeFieldNumber;
const int Conditions::kLargeCommunitySetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Conditions::Conditions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsConditions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Conditions)
}
Conditions::Conditions(const Conditions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prefix_set()) {
    prefix_set_ = new ::gobgpapi::MatchSet(*from.prefix_set_);
  } else {
    prefix_set_ = NULL;
  }
  if (from.has_neighbor_set()) {
    neighbor_set_ = new ::gobgpapi::MatchSet(*from.neighbor_set_);
  } else {
    neighbor_set_ = NULL;
  }
  if (from.has_as_path_length()) {
    as_path_length_ = new ::gobgpapi::AsPathLength(*from.as_path_length_);
  } else {
    as_path_length_ = NULL;
  }
  if (from.has_as_path_set()) {
    as_path_set_ = new ::gobgpapi::MatchSet(*from.as_path_set_);
  } else {
    as_path_set_ = NULL;
  }
  if (from.has_community_set()) {
    community_set_ = new ::gobgpapi::MatchSet(*from.community_set_);
  } else {
    community_set_ = NULL;
  }
  if (from.has_ext_community_set()) {
    ext_community_set_ = new ::gobgpapi::MatchSet(*from.ext_community_set_);
  } else {
    ext_community_set_ = NULL;
  }
  if (from.has_large_community_set()) {
    large_community_set_ = new ::gobgpapi::MatchSet(*from.large_community_set_);
  } else {
    large_community_set_ = NULL;
  }
  ::memcpy(&rpki_result_, &from.rpki_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&route_type_) -
    reinterpret_cast<char*>(&rpki_result_)) + sizeof(route_type_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Conditions)
}

void Conditions::SharedCtor() {
  ::memset(&prefix_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_type_) -
      reinterpret_cast<char*>(&prefix_set_)) + sizeof(route_type_));
  _cached_size_ = 0;
}

Conditions::~Conditions() {
  // @@protoc_insertion_point(destructor:gobgpapi.Conditions)
  SharedDtor();
}

void Conditions::SharedDtor() {
  if (this != internal_default_instance()) delete prefix_set_;
  if (this != internal_default_instance()) delete neighbor_set_;
  if (this != internal_default_instance()) delete as_path_length_;
  if (this != internal_default_instance()) delete as_path_set_;
  if (this != internal_default_instance()) delete community_set_;
  if (this != internal_default_instance()) delete ext_community_set_;
  if (this != internal_default_instance()) delete large_community_set_;
}

void Conditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conditions::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Conditions& Conditions::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsConditions();
  return *internal_default_instance();
}

Conditions* Conditions::New(::google::protobuf::Arena* arena) const {
  Conditions* n = new Conditions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Conditions::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && prefix_set_ != NULL) {
    delete prefix_set_;
  }
  prefix_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && neighbor_set_ != NULL) {
    delete neighbor_set_;
  }
  neighbor_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && as_path_length_ != NULL) {
    delete as_path_length_;
  }
  as_path_length_ = NULL;
  if (GetArenaNoVirtual() == NULL && as_path_set_ != NULL) {
    delete as_path_set_;
  }
  as_path_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && community_set_ != NULL) {
    delete community_set_;
  }
  community_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_community_set_ != NULL) {
    delete ext_community_set_;
  }
  ext_community_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && large_community_set_ != NULL) {
    delete large_community_set_;
  }
  large_community_set_ = NULL;
  ::memset(&rpki_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_type_) -
      reinterpret_cast<char*>(&rpki_result_)) + sizeof(route_type_));
  _internal_metadata_.Clear();
}

bool Conditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Conditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.MatchSet prefix_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prefix_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.MatchSet neighbor_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.AsPathLength as_path_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_as_path_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.MatchSet as_path_set = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_as_path_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.MatchSet community_set = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_community_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.MatchSet ext_community_set = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ext_community_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rpki_result = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpki_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Conditions.RouteType route_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_route_type(static_cast< ::gobgpapi::Conditions_RouteType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.MatchSet large_community_set = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_large_community_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Conditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Conditions)
  return false;
#undef DO_
}

void Conditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->prefix_set_, output);
  }

  // .gobgpapi.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->neighbor_set_, output);
  }

  // .gobgpapi.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->as_path_length_, output);
  }

  // .gobgpapi.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->as_path_set_, output);
  }

  // .gobgpapi.MatchSet community_set = 5;
  if (this->has_community_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->community_set_, output);
  }

  // .gobgpapi.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ext_community_set_, output);
  }

  // int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rpki_result(), output);
  }

  // .gobgpapi.Conditions.RouteType route_type = 8;
  if (this->route_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->route_type(), output);
  }

  // .gobgpapi.MatchSet large_community_set = 9;
  if (this->has_large_community_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->large_community_set_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Conditions)
}

::google::protobuf::uint8* Conditions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->prefix_set_, deterministic, target);
  }

  // .gobgpapi.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->neighbor_set_, deterministic, target);
  }

  // .gobgpapi.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->as_path_length_, deterministic, target);
  }

  // .gobgpapi.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->as_path_set_, deterministic, target);
  }

  // .gobgpapi.MatchSet community_set = 5;
  if (this->has_community_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->community_set_, deterministic, target);
  }

  // .gobgpapi.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->ext_community_set_, deterministic, target);
  }

  // int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rpki_result(), target);
  }

  // .gobgpapi.Conditions.RouteType route_type = 8;
  if (this->route_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->route_type(), target);
  }

  // .gobgpapi.MatchSet large_community_set = 9;
  if (this->has_large_community_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->large_community_set_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Conditions)
  return target;
}

size_t Conditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Conditions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->prefix_set_);
  }

  // .gobgpapi.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->neighbor_set_);
  }

  // .gobgpapi.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->as_path_length_);
  }

  // .gobgpapi.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->as_path_set_);
  }

  // .gobgpapi.MatchSet community_set = 5;
  if (this->has_community_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->community_set_);
  }

  // .gobgpapi.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ext_community_set_);
  }

  // .gobgpapi.MatchSet large_community_set = 9;
  if (this->has_large_community_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->large_community_set_);
  }

  // int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rpki_result());
  }

  // .gobgpapi.Conditions.RouteType route_type = 8;
  if (this->route_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->route_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  const Conditions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Conditions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Conditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Conditions)
    MergeFrom(*source);
  }
}

void Conditions::MergeFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prefix_set()) {
    mutable_prefix_set()->::gobgpapi::MatchSet::MergeFrom(from.prefix_set());
  }
  if (from.has_neighbor_set()) {
    mutable_neighbor_set()->::gobgpapi::MatchSet::MergeFrom(from.neighbor_set());
  }
  if (from.has_as_path_length()) {
    mutable_as_path_length()->::gobgpapi::AsPathLength::MergeFrom(from.as_path_length());
  }
  if (from.has_as_path_set()) {
    mutable_as_path_set()->::gobgpapi::MatchSet::MergeFrom(from.as_path_set());
  }
  if (from.has_community_set()) {
    mutable_community_set()->::gobgpapi::MatchSet::MergeFrom(from.community_set());
  }
  if (from.has_ext_community_set()) {
    mutable_ext_community_set()->::gobgpapi::MatchSet::MergeFrom(from.ext_community_set());
  }
  if (from.has_large_community_set()) {
    mutable_large_community_set()->::gobgpapi::MatchSet::MergeFrom(from.large_community_set());
  }
  if (from.rpki_result() != 0) {
    set_rpki_result(from.rpki_result());
  }
  if (from.route_type() != 0) {
    set_route_type(from.route_type());
  }
}

void Conditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conditions::CopyFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conditions::IsInitialized() const {
  return true;
}

void Conditions::Swap(Conditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Conditions::InternalSwap(Conditions* other) {
  using std::swap;
  swap(prefix_set_, other->prefix_set_);
  swap(neighbor_set_, other->neighbor_set_);
  swap(as_path_length_, other->as_path_length_);
  swap(as_path_set_, other->as_path_set_);
  swap(community_set_, other->community_set_);
  swap(ext_community_set_, other->ext_community_set_);
  swap(large_community_set_, other->large_community_set_);
  swap(rpki_result_, other->rpki_result_);
  swap(route_type_, other->route_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Conditions::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommunityAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommunityAction::kTypeFieldNumber;
const int CommunityAction::kCommunitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommunityAction::CommunityAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsCommunityAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.CommunityAction)
}
CommunityAction::CommunityAction(const CommunityAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      communities_(from.communities_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.CommunityAction)
}

void CommunityAction::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

CommunityAction::~CommunityAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.CommunityAction)
  SharedDtor();
}

void CommunityAction::SharedDtor() {
}

void CommunityAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommunityAction::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommunityAction& CommunityAction::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsCommunityAction();
  return *internal_default_instance();
}

CommunityAction* CommunityAction::New(::google::protobuf::Arena* arena) const {
  CommunityAction* n = new CommunityAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommunityAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.CommunityAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

bool CommunityAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.CommunityAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.CommunityActionType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::CommunityActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string communities = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_communities()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->communities(this->communities_size() - 1).data(),
            static_cast<int>(this->communities(this->communities_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.CommunityAction.communities"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.CommunityAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.CommunityAction)
  return false;
#undef DO_
}

void CommunityAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.CommunityAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.CommunityActionType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string communities = 2;
  for (int i = 0, n = this->communities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communities(i).data(), static_cast<int>(this->communities(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.CommunityAction.communities");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->communities(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.CommunityAction)
}

::google::protobuf::uint8* CommunityAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.CommunityAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.CommunityActionType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated string communities = 2;
  for (int i = 0, n = this->communities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communities(i).data(), static_cast<int>(this->communities(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.CommunityAction.communities");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->communities(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.CommunityAction)
  return target;
}

size_t CommunityAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.CommunityAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string communities = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->communities_size());
  for (int i = 0, n = this->communities_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->communities(i));
  }

  // .gobgpapi.CommunityActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommunityAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.CommunityAction)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunityAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommunityAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.CommunityAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.CommunityAction)
    MergeFrom(*source);
  }
}

void CommunityAction::MergeFrom(const CommunityAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.CommunityAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CommunityAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.CommunityAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunityAction::CopyFrom(const CommunityAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.CommunityAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityAction::IsInitialized() const {
  return true;
}

void CommunityAction::Swap(CommunityAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommunityAction::InternalSwap(CommunityAction* other) {
  using std::swap;
  communities_.InternalSwap(&other->communities_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommunityAction::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MedAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MedAction::kTypeFieldNumber;
const int MedAction::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MedAction::MedAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsMedAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MedAction)
}
MedAction::MedAction(const MedAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MedAction)
}

void MedAction::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
  _cached_size_ = 0;
}

MedAction::~MedAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.MedAction)
  SharedDtor();
}

void MedAction::SharedDtor() {
}

void MedAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedAction::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MedAction& MedAction::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsMedAction();
  return *internal_default_instance();
}

MedAction* MedAction::New(::google::protobuf::Arena* arena) const {
  MedAction* n = new MedAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MedAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool MedAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MedAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.MedActionType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::MedActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MedAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MedAction)
  return false;
#undef DO_
}

void MedAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MedAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MedActionType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.MedAction)
}

::google::protobuf::uint8* MedAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MedAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MedActionType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MedAction)
  return target;
}

size_t MedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MedAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  // .gobgpapi.MedActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MedAction)
  GOOGLE_DCHECK_NE(&from, this);
  const MedAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MedAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MedAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MedAction)
    MergeFrom(*source);
  }
}

void MedAction::MergeFrom(const MedAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MedAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MedAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedAction::CopyFrom(const MedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedAction::IsInitialized() const {
  return true;
}

void MedAction::Swap(MedAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MedAction::InternalSwap(MedAction* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MedAction::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AsPrependAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AsPrependAction::kAsnFieldNumber;
const int AsPrependAction::kRepeatFieldNumber;
const int AsPrependAction::kUseLeftMostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AsPrependAction::AsPrependAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsAsPrependAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AsPrependAction)
}
AsPrependAction::AsPrependAction(const AsPrependAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_left_most_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(use_left_most_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AsPrependAction)
}

void AsPrependAction::SharedCtor() {
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_left_most_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(use_left_most_));
  _cached_size_ = 0;
}

AsPrependAction::~AsPrependAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.AsPrependAction)
  SharedDtor();
}

void AsPrependAction::SharedDtor() {
}

void AsPrependAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsPrependAction::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AsPrependAction& AsPrependAction::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsAsPrependAction();
  return *internal_default_instance();
}

AsPrependAction* AsPrependAction::New(::google::protobuf::Arena* arena) const {
  AsPrependAction* n = new AsPrependAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AsPrependAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AsPrependAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_left_most_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(use_left_most_));
  _internal_metadata_.Clear();
}

bool AsPrependAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AsPrependAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 asn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 repeat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_left_most = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_left_most_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AsPrependAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AsPrependAction)
  return false;
#undef DO_
}

void AsPrependAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AsPrependAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->asn(), output);
  }

  // uint32 repeat = 2;
  if (this->repeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->repeat(), output);
  }

  // bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_left_most(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.AsPrependAction)
}

::google::protobuf::uint8* AsPrependAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AsPrependAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->asn(), target);
  }

  // uint32 repeat = 2;
  if (this->repeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->repeat(), target);
  }

  // bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_left_most(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AsPrependAction)
  return target;
}

size_t AsPrependAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AsPrependAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->asn());
  }

  // uint32 repeat = 2;
  if (this->repeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->repeat());
  }

  // bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsPrependAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AsPrependAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AsPrependAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AsPrependAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AsPrependAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AsPrependAction)
    MergeFrom(*source);
  }
}

void AsPrependAction::MergeFrom(const AsPrependAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AsPrependAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asn() != 0) {
    set_asn(from.asn());
  }
  if (from.repeat() != 0) {
    set_repeat(from.repeat());
  }
  if (from.use_left_most() != 0) {
    set_use_left_most(from.use_left_most());
  }
}

void AsPrependAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AsPrependAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPrependAction::CopyFrom(const AsPrependAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AsPrependAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPrependAction::IsInitialized() const {
  return true;
}

void AsPrependAction::Swap(AsPrependAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AsPrependAction::InternalSwap(AsPrependAction* other) {
  using std::swap;
  swap(asn_, other->asn_);
  swap(repeat_, other->repeat_);
  swap(use_left_most_, other->use_left_most_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AsPrependAction::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NexthopAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NexthopAction::kAddressFieldNumber;
const int NexthopAction::kSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NexthopAction::NexthopAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsNexthopAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.NexthopAction)
}
NexthopAction::NexthopAction(const NexthopAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  self_ = from.self_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.NexthopAction)
}

void NexthopAction::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_ = false;
  _cached_size_ = 0;
}

NexthopAction::~NexthopAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.NexthopAction)
  SharedDtor();
}

void NexthopAction::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NexthopAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NexthopAction::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NexthopAction& NexthopAction::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsNexthopAction();
  return *internal_default_instance();
}

NexthopAction* NexthopAction::New(::google::protobuf::Arena* arena) const {
  NexthopAction* n = new NexthopAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NexthopAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.NexthopAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_ = false;
  _internal_metadata_.Clear();
}

bool NexthopAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.NexthopAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.NexthopAction.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool self = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.NexthopAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.NexthopAction)
  return false;
#undef DO_
}

void NexthopAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.NexthopAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.NexthopAction.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // bool self = 2;
  if (this->self() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->self(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.NexthopAction)
}

::google::protobuf::uint8* NexthopAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.NexthopAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.NexthopAction.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // bool self = 2;
  if (this->self() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->self(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.NexthopAction)
  return target;
}

size_t NexthopAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.NexthopAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // bool self = 2;
  if (this->self() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NexthopAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.NexthopAction)
  GOOGLE_DCHECK_NE(&from, this);
  const NexthopAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NexthopAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.NexthopAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.NexthopAction)
    MergeFrom(*source);
  }
}

void NexthopAction::MergeFrom(const NexthopAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.NexthopAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.self() != 0) {
    set_self(from.self());
  }
}

void NexthopAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.NexthopAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NexthopAction::CopyFrom(const NexthopAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.NexthopAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NexthopAction::IsInitialized() const {
  return true;
}

void NexthopAction::Swap(NexthopAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NexthopAction::InternalSwap(NexthopAction* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(self_, other->self_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NexthopAction::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocalPrefAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalPrefAction::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalPrefAction::LocalPrefAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsLocalPrefAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LocalPrefAction)
}
LocalPrefAction::LocalPrefAction(const LocalPrefAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LocalPrefAction)
}

void LocalPrefAction::SharedCtor() {
  value_ = 0u;
  _cached_size_ = 0;
}

LocalPrefAction::~LocalPrefAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.LocalPrefAction)
  SharedDtor();
}

void LocalPrefAction::SharedDtor() {
}

void LocalPrefAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalPrefAction::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalPrefAction& LocalPrefAction::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsLocalPrefAction();
  return *internal_default_instance();
}

LocalPrefAction* LocalPrefAction::New(::google::protobuf::Arena* arena) const {
  LocalPrefAction* n = new LocalPrefAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalPrefAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LocalPrefAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear();
}

bool LocalPrefAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.LocalPrefAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.LocalPrefAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.LocalPrefAction)
  return false;
#undef DO_
}

void LocalPrefAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.LocalPrefAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.LocalPrefAction)
}

::google::protobuf::uint8* LocalPrefAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LocalPrefAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LocalPrefAction)
  return target;
}

size_t LocalPrefAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LocalPrefAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalPrefAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LocalPrefAction)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPrefAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalPrefAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LocalPrefAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LocalPrefAction)
    MergeFrom(*source);
  }
}

void LocalPrefAction::MergeFrom(const LocalPrefAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LocalPrefAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void LocalPrefAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LocalPrefAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPrefAction::CopyFrom(const LocalPrefAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LocalPrefAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPrefAction::IsInitialized() const {
  return true;
}

void LocalPrefAction::Swap(LocalPrefAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalPrefAction::InternalSwap(LocalPrefAction* other) {
  using std::swap;
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalPrefAction::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Actions::InitAsDefaultInstance() {
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->community_ = const_cast< ::gobgpapi::CommunityAction*>(
      ::gobgpapi::CommunityAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->med_ = const_cast< ::gobgpapi::MedAction*>(
      ::gobgpapi::MedAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->as_prepend_ = const_cast< ::gobgpapi::AsPrependAction*>(
      ::gobgpapi::AsPrependAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->ext_community_ = const_cast< ::gobgpapi::CommunityAction*>(
      ::gobgpapi::CommunityAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->nexthop_ = const_cast< ::gobgpapi::NexthopAction*>(
      ::gobgpapi::NexthopAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->local_pref_ = const_cast< ::gobgpapi::LocalPrefAction*>(
      ::gobgpapi::LocalPrefAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->large_community_ = const_cast< ::gobgpapi::CommunityAction*>(
      ::gobgpapi::CommunityAction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Actions::kRouteActionFieldNumber;
const int Actions::kCommunityFieldNumber;
const int Actions::kMedFieldNumber;
const int Actions::kAsPrependFieldNumber;
const int Actions::kExtCommunityFieldNumber;
const int Actions::kNexthopFieldNumber;
const int Actions::kLocalPrefFieldNumber;
const int Actions::kLargeCommunityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Actions::Actions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsActions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Actions)
}
Actions::Actions(const Actions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_community()) {
    community_ = new ::gobgpapi::CommunityAction(*from.community_);
  } else {
    community_ = NULL;
  }
  if (from.has_med()) {
    med_ = new ::gobgpapi::MedAction(*from.med_);
  } else {
    med_ = NULL;
  }
  if (from.has_as_prepend()) {
    as_prepend_ = new ::gobgpapi::AsPrependAction(*from.as_prepend_);
  } else {
    as_prepend_ = NULL;
  }
  if (from.has_ext_community()) {
    ext_community_ = new ::gobgpapi::CommunityAction(*from.ext_community_);
  } else {
    ext_community_ = NULL;
  }
  if (from.has_nexthop()) {
    nexthop_ = new ::gobgpapi::NexthopAction(*from.nexthop_);
  } else {
    nexthop_ = NULL;
  }
  if (from.has_local_pref()) {
    local_pref_ = new ::gobgpapi::LocalPrefAction(*from.local_pref_);
  } else {
    local_pref_ = NULL;
  }
  if (from.has_large_community()) {
    large_community_ = new ::gobgpapi::CommunityAction(*from.large_community_);
  } else {
    large_community_ = NULL;
  }
  route_action_ = from.route_action_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Actions)
}

void Actions::SharedCtor() {
  ::memset(&community_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_action_) -
      reinterpret_cast<char*>(&community_)) + sizeof(route_action_));
  _cached_size_ = 0;
}

Actions::~Actions() {
  // @@protoc_insertion_point(destructor:gobgpapi.Actions)
  SharedDtor();
}

void Actions::SharedDtor() {
  if (this != internal_default_instance()) delete community_;
  if (this != internal_default_instance()) delete med_;
  if (this != internal_default_instance()) delete as_prepend_;
  if (this != internal_default_instance()) delete ext_community_;
  if (this != internal_default_instance()) delete nexthop_;
  if (this != internal_default_instance()) delete local_pref_;
  if (this != internal_default_instance()) delete large_community_;
}

void Actions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Actions::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Actions& Actions::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsActions();
  return *internal_default_instance();
}

Actions* Actions::New(::google::protobuf::Arena* arena) const {
  Actions* n = new Actions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Actions::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Actions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && community_ != NULL) {
    delete community_;
  }
  community_ = NULL;
  if (GetArenaNoVirtual() == NULL && med_ != NULL) {
    delete med_;
  }
  med_ = NULL;
  if (GetArenaNoVirtual() == NULL && as_prepend_ != NULL) {
    delete as_prepend_;
  }
  as_prepend_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_community_ != NULL) {
    delete ext_community_;
  }
  ext_community_ = NULL;
  if (GetArenaNoVirtual() == NULL && nexthop_ != NULL) {
    delete nexthop_;
  }
  nexthop_ = NULL;
  if (GetArenaNoVirtual() == NULL && local_pref_ != NULL) {
    delete local_pref_;
  }
  local_pref_ = NULL;
  if (GetArenaNoVirtual() == NULL && large_community_ != NULL) {
    delete large_community_;
  }
  large_community_ = NULL;
  route_action_ = 0;
  _internal_metadata_.Clear();
}

bool Actions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Actions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.RouteAction route_action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_route_action(static_cast< ::gobgpapi::RouteAction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.CommunityAction community = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_community()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.MedAction med = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_med()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.AsPrependAction as_prepend = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_as_prepend()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.CommunityAction ext_community = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ext_community()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.NexthopAction nexthop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nexthop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.LocalPrefAction local_pref = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_pref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.CommunityAction large_community = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_large_community()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Actions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Actions)
  return false;
#undef DO_
}

void Actions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Actions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->route_action(), output);
  }

  // .gobgpapi.CommunityAction community = 2;
  if (this->has_community()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->community_, output);
  }

  // .gobgpapi.MedAction med = 3;
  if (this->has_med()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->med_, output);
  }

  // .gobgpapi.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->as_prepend_, output);
  }

  // .gobgpapi.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ext_community_, output);
  }

  // .gobgpapi.NexthopAction nexthop = 6;
  if (this->has_nexthop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->nexthop_, output);
  }

  // .gobgpapi.LocalPrefAction local_pref = 7;
  if (this->has_local_pref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->local_pref_, output);
  }

  // .gobgpapi.CommunityAction large_community = 8;
  if (this->has_large_community()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->large_community_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Actions)
}

::google::protobuf::uint8* Actions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Actions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->route_action(), target);
  }

  // .gobgpapi.CommunityAction community = 2;
  if (this->has_community()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->community_, deterministic, target);
  }

  // .gobgpapi.MedAction med = 3;
  if (this->has_med()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->med_, deterministic, target);
  }

  // .gobgpapi.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->as_prepend_, deterministic, target);
  }

  // .gobgpapi.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->ext_community_, deterministic, target);
  }

  // .gobgpapi.NexthopAction nexthop = 6;
  if (this->has_nexthop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->nexthop_, deterministic, target);
  }

  // .gobgpapi.LocalPrefAction local_pref = 7;
  if (this->has_local_pref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->local_pref_, deterministic, target);
  }

  // .gobgpapi.CommunityAction large_community = 8;
  if (this->has_large_community()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->large_community_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Actions)
  return target;
}

size_t Actions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Actions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.CommunityAction community = 2;
  if (this->has_community()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->community_);
  }

  // .gobgpapi.MedAction med = 3;
  if (this->has_med()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->med_);
  }

  // .gobgpapi.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->as_prepend_);
  }

  // .gobgpapi.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ext_community_);
  }

  // .gobgpapi.NexthopAction nexthop = 6;
  if (this->has_nexthop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->nexthop_);
  }

  // .gobgpapi.LocalPrefAction local_pref = 7;
  if (this->has_local_pref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_pref_);
  }

  // .gobgpapi.CommunityAction large_community = 8;
  if (this->has_large_community()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->large_community_);
  }

  // .gobgpapi.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->route_action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Actions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  const Actions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Actions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Actions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Actions)
    MergeFrom(*source);
  }
}

void Actions::MergeFrom(const Actions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_community()) {
    mutable_community()->::gobgpapi::CommunityAction::MergeFrom(from.community());
  }
  if (from.has_med()) {
    mutable_med()->::gobgpapi::MedAction::MergeFrom(from.med());
  }
  if (from.has_as_prepend()) {
    mutable_as_prepend()->::gobgpapi::AsPrependAction::MergeFrom(from.as_prepend());
  }
  if (from.has_ext_community()) {
    mutable_ext_community()->::gobgpapi::CommunityAction::MergeFrom(from.ext_community());
  }
  if (from.has_nexthop()) {
    mutable_nexthop()->::gobgpapi::NexthopAction::MergeFrom(from.nexthop());
  }
  if (from.has_local_pref()) {
    mutable_local_pref()->::gobgpapi::LocalPrefAction::MergeFrom(from.local_pref());
  }
  if (from.has_large_community()) {
    mutable_large_community()->::gobgpapi::CommunityAction::MergeFrom(from.large_community());
  }
  if (from.route_action() != 0) {
    set_route_action(from.route_action());
  }
}

void Actions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actions::CopyFrom(const Actions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actions::IsInitialized() const {
  return true;
}

void Actions::Swap(Actions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Actions::InternalSwap(Actions* other) {
  using std::swap;
  swap(community_, other->community_);
  swap(med_, other->med_);
  swap(as_prepend_, other->as_prepend_);
  swap(ext_community_, other->ext_community_);
  swap(nexthop_, other->nexthop_);
  swap(local_pref_, other->local_pref_);
  swap(large_community_, other->large_community_);
  swap(route_action_, other->route_action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Actions::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Statement::InitAsDefaultInstance() {
  ::gobgpapi::_Statement_default_instance_._instance.get_mutable()->conditions_ = const_cast< ::gobgpapi::Conditions*>(
      ::gobgpapi::Conditions::internal_default_instance());
  ::gobgpapi::_Statement_default_instance_._instance.get_mutable()->actions_ = const_cast< ::gobgpapi::Actions*>(
      ::gobgpapi::Actions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Statement::kNameFieldNumber;
const int Statement::kConditionsFieldNumber;
const int Statement::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Statement::Statement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsStatement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Statement)
}
Statement::Statement(const Statement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_conditions()) {
    conditions_ = new ::gobgpapi::Conditions(*from.conditions_);
  } else {
    conditions_ = NULL;
  }
  if (from.has_actions()) {
    actions_ = new ::gobgpapi::Actions(*from.actions_);
  } else {
    actions_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Statement)
}

void Statement::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actions_) -
      reinterpret_cast<char*>(&conditions_)) + sizeof(actions_));
  _cached_size_ = 0;
}

Statement::~Statement() {
  // @@protoc_insertion_point(destructor:gobgpapi.Statement)
  SharedDtor();
}

void Statement::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conditions_;
  if (this != internal_default_instance()) delete actions_;
}

void Statement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Statement::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Statement& Statement::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsStatement();
  return *internal_default_instance();
}

Statement* Statement::New(::google::protobuf::Arena* arena) const {
  Statement* n = new Statement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Statement::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Statement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && conditions_ != NULL) {
    delete conditions_;
  }
  conditions_ = NULL;
  if (GetArenaNoVirtual() == NULL && actions_ != NULL) {
    delete actions_;
  }
  actions_ = NULL;
  _internal_metadata_.Clear();
}

bool Statement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Statement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Statement.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Conditions conditions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Actions actions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Statement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Statement)
  return false;
#undef DO_
}

void Statement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Statement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Statement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .gobgpapi.Conditions conditions = 2;
  if (this->has_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->conditions_, output);
  }

  // .gobgpapi.Actions actions = 3;
  if (this->has_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->actions_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Statement)
}

::google::protobuf::uint8* Statement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Statement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Statement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .gobgpapi.Conditions conditions = 2;
  if (this->has_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->conditions_, deterministic, target);
  }

  // .gobgpapi.Actions actions = 3;
  if (this->has_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->actions_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Statement)
  return target;
}

size_t Statement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Statement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gobgpapi.Conditions conditions = 2;
  if (this->has_conditions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conditions_);
  }

  // .gobgpapi.Actions actions = 3;
  if (this->has_actions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actions_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Statement)
  GOOGLE_DCHECK_NE(&from, this);
  const Statement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Statement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Statement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Statement)
    MergeFrom(*source);
  }
}

void Statement::MergeFrom(const Statement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Statement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_conditions()) {
    mutable_conditions()->::gobgpapi::Conditions::MergeFrom(from.conditions());
  }
  if (from.has_actions()) {
    mutable_actions()->::gobgpapi::Actions::MergeFrom(from.actions());
  }
}

void Statement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Statement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statement::CopyFrom(const Statement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Statement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statement::IsInitialized() const {
  return true;
}

void Statement::Swap(Statement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Statement::InternalSwap(Statement* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(conditions_, other->conditions_);
  swap(actions_, other->actions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Statement::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Policy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Policy::kNameFieldNumber;
const int Policy::kStatementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Policy::Policy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsPolicy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Policy)
}
Policy::Policy(const Policy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statements_(from.statements_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Policy)
}

void Policy::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Policy::~Policy() {
  // @@protoc_insertion_point(destructor:gobgpapi.Policy)
  SharedDtor();
}

void Policy::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Policy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Policy::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Policy& Policy::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsPolicy();
  return *internal_default_instance();
}

Policy* Policy::New(::google::protobuf::Arena* arena) const {
  Policy* n = new Policy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Policy::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Policy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statements_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Policy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Policy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Policy.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.Statement statements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_statements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Policy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Policy)
  return false;
#undef DO_
}

void Policy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Policy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Policy.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .gobgpapi.Statement statements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statements(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Policy)
}

::google::protobuf::uint8* Policy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Policy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Policy.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .gobgpapi.Statement statements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->statements(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Policy)
  return target;
}

size_t Policy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Policy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Statement statements = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->statements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->statements(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Policy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  const Policy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Policy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Policy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Policy)
    MergeFrom(*source);
  }
}

void Policy::MergeFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statements_.MergeFrom(from.statements_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Policy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Policy::CopyFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Policy::IsInitialized() const {
  return true;
}

void Policy::Swap(Policy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Policy::InternalSwap(Policy* other) {
  using std::swap;
  statements_.InternalSwap(&other->statements_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Policy::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PolicyAssignment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyAssignment::kTypeFieldNumber;
const int PolicyAssignment::kResourceFieldNumber;
const int PolicyAssignment::kNameFieldNumber;
const int PolicyAssignment::kPoliciesFieldNumber;
const int PolicyAssignment::kDefaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyAssignment::PolicyAssignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsPolicyAssignment();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PolicyAssignment)
}
PolicyAssignment::PolicyAssignment(const PolicyAssignment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      policies_(from.policies_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&default__) -
    reinterpret_cast<char*>(&type_)) + sizeof(default__));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PolicyAssignment)
}

void PolicyAssignment::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default__) -
      reinterpret_cast<char*>(&type_)) + sizeof(default__));
  _cached_size_ = 0;
}

PolicyAssignment::~PolicyAssignment() {
  // @@protoc_insertion_point(destructor:gobgpapi.PolicyAssignment)
  SharedDtor();
}

void PolicyAssignment::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PolicyAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolicyAssignment::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolicyAssignment& PolicyAssignment::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsPolicyAssignment();
  return *internal_default_instance();
}

PolicyAssignment* PolicyAssignment::New(::google::protobuf::Arena* arena) const {
  PolicyAssignment* n = new PolicyAssignment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolicyAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PolicyAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policies_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default__) -
      reinterpret_cast<char*>(&type_)) + sizeof(default__));
  _internal_metadata_.Clear();
}

bool PolicyAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.PolicyAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.PolicyType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::PolicyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.Resource resource = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PolicyAssignment.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gobgpapi.Policy policies = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_policies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RouteAction default = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_default_(static_cast< ::gobgpapi::RouteAction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.PolicyAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.PolicyAssignment)
  return false;
#undef DO_
}

void PolicyAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.PolicyAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .gobgpapi.Resource resource = 2;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->resource(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PolicyAssignment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .gobgpapi.Policy policies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->policies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->policies(static_cast<int>(i)), output);
  }

  // .gobgpapi.RouteAction default = 5;
  if (this->default_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->default_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.PolicyAssignment)
}

::google::protobuf::uint8* PolicyAssignment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PolicyAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .gobgpapi.Resource resource = 2;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->resource(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PolicyAssignment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .gobgpapi.Policy policies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->policies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->policies(static_cast<int>(i)), deterministic, target);
  }

  // .gobgpapi.RouteAction default = 5;
  if (this->default_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->default_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PolicyAssignment)
  return target;
}

size_t PolicyAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PolicyAssignment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Policy policies = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->policies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->policies(static_cast<int>(i)));
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gobgpapi.PolicyType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .gobgpapi.Resource resource = 2;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  // .gobgpapi.RouteAction default = 5;
  if (this->default_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->default_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyAssignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PolicyAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyAssignment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolicyAssignment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PolicyAssignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PolicyAssignment)
    MergeFrom(*source);
  }
}

void PolicyAssignment::MergeFrom(const PolicyAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PolicyAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  policies_.MergeFrom(from.policies_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
  if (from.default_() != 0) {
    set_default_(from.default_());
  }
}

void PolicyAssignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PolicyAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyAssignment::CopyFrom(const PolicyAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PolicyAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyAssignment::IsInitialized() const {
  return true;
}

void PolicyAssignment::Swap(PolicyAssignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyAssignment::InternalSwap(PolicyAssignment* other) {
  using std::swap;
  policies_.InternalSwap(&other->policies_);
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  swap(resource_, other->resource_);
  swap(default__, other->default__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PolicyAssignment::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Roa::InitAsDefaultInstance() {
  ::gobgpapi::_Roa_default_instance_._instance.get_mutable()->conf_ = const_cast< ::gobgpapi::RPKIConf*>(
      ::gobgpapi::RPKIConf::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Roa::kAsFieldNumber;
const int Roa::kPrefixlenFieldNumber;
const int Roa::kMaxlenFieldNumber;
const int Roa::kPrefixFieldNumber;
const int Roa::kConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Roa::Roa()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsRoa();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Roa)
}
Roa::Roa(const Roa& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.has_conf()) {
    conf_ = new ::gobgpapi::RPKIConf(*from.conf_);
  } else {
    conf_ = NULL;
  }
  ::memcpy(&as_, &from.as_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlen_) -
    reinterpret_cast<char*>(&as_)) + sizeof(maxlen_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Roa)
}

void Roa::SharedCtor() {
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlen_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(maxlen_));
  _cached_size_ = 0;
}

Roa::~Roa() {
  // @@protoc_insertion_point(destructor:gobgpapi.Roa)
  SharedDtor();
}

void Roa::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conf_;
}

void Roa::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Roa::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Roa& Roa::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsRoa();
  return *internal_default_instance();
}

Roa* Roa::New(::google::protobuf::Arena* arena) const {
  Roa* n = new Roa;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Roa::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Roa)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) {
    delete conf_;
  }
  conf_ = NULL;
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlen_) -
      reinterpret_cast<char*>(&as_)) + sizeof(maxlen_));
  _internal_metadata_.Clear();
}

bool Roa::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Roa)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 as = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prefixlen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefixlen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maxlen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Roa.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gobgpapi.RPKIConf conf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Roa)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Roa)
  return false;
#undef DO_
}

void Roa::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Roa)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->as(), output);
  }

  // uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prefixlen(), output);
  }

  // uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxlen(), output);
  }

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Roa.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prefix(), output);
  }

  // .gobgpapi.RPKIConf conf = 5;
  if (this->has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->conf_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Roa)
}

::google::protobuf::uint8* Roa::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Roa)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->as(), target);
  }

  // uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prefixlen(), target);
  }

  // uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxlen(), target);
  }

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Roa.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prefix(), target);
  }

  // .gobgpapi.RPKIConf conf = 5;
  if (this->has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->conf_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Roa)
  return target;
}

size_t Roa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Roa)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string prefix = 4;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // .gobgpapi.RPKIConf conf = 5;
  if (this->has_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conf_);
  }

  // uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->as());
  }

  // uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefixlen());
  }

  // uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxlen());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Roa::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Roa)
  GOOGLE_DCHECK_NE(&from, this);
  const Roa* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Roa>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Roa)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Roa)
    MergeFrom(*source);
  }
}

void Roa::MergeFrom(const Roa& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Roa)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.has_conf()) {
    mutable_conf()->::gobgpapi::RPKIConf::MergeFrom(from.conf());
  }
  if (from.as() != 0) {
    set_as(from.as());
  }
  if (from.prefixlen() != 0) {
    set_prefixlen(from.prefixlen());
  }
  if (from.maxlen() != 0) {
    set_maxlen(from.maxlen());
  }
}

void Roa::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Roa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roa::CopyFrom(const Roa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Roa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roa::IsInitialized() const {
  return true;
}

void Roa::Swap(Roa* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Roa::InternalSwap(Roa* other) {
  using std::swap;
  prefix_.Swap(&other->prefix_);
  swap(conf_, other->conf_);
  swap(as_, other->as_);
  swap(prefixlen_, other->prefixlen_);
  swap(maxlen_, other->maxlen_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Roa::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRoaRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRoaRequest::kFamilyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRoaRequest::GetRoaRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetRoaRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetRoaRequest)
}
GetRoaRequest::GetRoaRequest(const GetRoaRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_ = from.family_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetRoaRequest)
}

void GetRoaRequest::SharedCtor() {
  family_ = 0u;
  _cached_size_ = 0;
}

GetRoaRequest::~GetRoaRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetRoaRequest)
  SharedDtor();
}

void GetRoaRequest::SharedDtor() {
}

void GetRoaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoaRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRoaRequest& GetRoaRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetRoaRequest();
  return *internal_default_instance();
}

GetRoaRequest* GetRoaRequest::New(::google::protobuf::Arena* arena) const {
  GetRoaRequest* n = new GetRoaRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetRoaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  family_ = 0u;
  _internal_metadata_.Clear();
}

bool GetRoaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetRoaRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 family = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetRoaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetRoaRequest)
  return false;
#undef DO_
}

void GetRoaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetRoaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetRoaRequest)
}

::google::protobuf::uint8* GetRoaRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetRoaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetRoaRequest)
  return target;
}

size_t GetRoaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetRoaRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 family = 1;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoaRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetRoaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRoaRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRoaRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetRoaRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetRoaRequest)
    MergeFrom(*source);
  }
}

void GetRoaRequest::MergeFrom(const GetRoaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetRoaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.family() != 0) {
    set_family(from.family());
  }
}

void GetRoaRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetRoaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoaRequest::CopyFrom(const GetRoaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetRoaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoaRequest::IsInitialized() const {
  return true;
}

void GetRoaRequest::Swap(GetRoaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoaRequest::InternalSwap(GetRoaRequest* other) {
  using std::swap;
  swap(family_, other->family_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRoaRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRoaResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRoaResponse::kRoasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRoaResponse::GetRoaResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetRoaResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetRoaResponse)
}
GetRoaResponse::GetRoaResponse(const GetRoaResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roas_(from.roas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetRoaResponse)
}

void GetRoaResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetRoaResponse::~GetRoaResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetRoaResponse)
  SharedDtor();
}

void GetRoaResponse::SharedDtor() {
}

void GetRoaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoaResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRoaResponse& GetRoaResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetRoaResponse();
  return *internal_default_instance();
}

GetRoaResponse* GetRoaResponse::New(::google::protobuf::Arena* arena) const {
  GetRoaResponse* n = new GetRoaResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetRoaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roas_.Clear();
  _internal_metadata_.Clear();
}

bool GetRoaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetRoaResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gobgpapi.Roa roas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_roas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetRoaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetRoaResponse)
  return false;
#undef DO_
}

void GetRoaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetRoaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Roa roas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roas(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetRoaResponse)
}

::google::protobuf::uint8* GetRoaResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetRoaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.Roa roas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->roas(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetRoaResponse)
  return target;
}

size_t GetRoaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetRoaResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gobgpapi.Roa roas = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->roas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roas(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoaResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetRoaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRoaResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRoaResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetRoaResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetRoaResponse)
    MergeFrom(*source);
  }
}

void GetRoaResponse::MergeFrom(const GetRoaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetRoaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roas_.MergeFrom(from.roas_);
}

void GetRoaResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetRoaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoaResponse::CopyFrom(const GetRoaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetRoaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoaResponse::IsInitialized() const {
  return true;
}

void GetRoaResponse::Swap(GetRoaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoaResponse::InternalSwap(GetRoaResponse* other) {
  using std::swap;
  roas_.InternalSwap(&other->roas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRoaResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vrf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vrf::kNameFieldNumber;
const int Vrf::kRdFieldNumber;
const int Vrf::kImportRtFieldNumber;
const int Vrf::kExportRtFieldNumber;
const int Vrf::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vrf::Vrf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsVrf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Vrf)
}
Vrf::Vrf(const Vrf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      import_rt_(from.import_rt_),
      export_rt_(from.export_rt_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  rd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rd().size() > 0) {
    rd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rd_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Vrf)
}

void Vrf::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _cached_size_ = 0;
}

Vrf::~Vrf() {
  // @@protoc_insertion_point(destructor:gobgpapi.Vrf)
  SharedDtor();
}

void Vrf::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Vrf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vrf::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vrf& Vrf::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsVrf();
  return *internal_default_instance();
}

Vrf* Vrf::New(::google::protobuf::Arena* arena) const {
  Vrf* n = new Vrf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vrf::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Vrf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  import_rt_.Clear();
  export_rt_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _internal_metadata_.Clear();
}

bool Vrf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Vrf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Vrf.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes rd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes import_rt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_import_rt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes export_rt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_export_rt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Vrf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Vrf)
  return false;
#undef DO_
}

void Vrf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Vrf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Vrf.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bytes rd = 2;
  if (this->rd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->rd(), output);
  }

  // repeated bytes import_rt = 3;
  for (int i = 0, n = this->import_rt_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->import_rt(i), output);
  }

  // repeated bytes export_rt = 4;
  for (int i = 0, n = this->export_rt_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->export_rt(i), output);
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Vrf)
}

::google::protobuf::uint8* Vrf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Vrf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Vrf.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bytes rd = 2;
  if (this->rd().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->rd(), target);
  }

  // repeated bytes import_rt = 3;
  for (int i = 0, n = this->import_rt_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->import_rt(i), target);
  }

  // repeated bytes export_rt = 4;
  for (int i = 0, n = this->export_rt_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->export_rt(i), target);
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Vrf)
  return target;
}

size_t Vrf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Vrf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes import_rt = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->import_rt_size());
  for (int i = 0, n = this->import_rt_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->import_rt(i));
  }

  // repeated bytes export_rt = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->export_rt_size());
  for (int i = 0, n = this->export_rt_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->export_rt(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes rd = 2;
  if (this->rd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rd());
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vrf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Vrf)
  GOOGLE_DCHECK_NE(&from, this);
  const Vrf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vrf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Vrf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Vrf)
    MergeFrom(*source);
  }
}

void Vrf::MergeFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Vrf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  import_rt_.MergeFrom(from.import_rt_);
  export_rt_.MergeFrom(from.export_rt_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.rd().size() > 0) {

    rd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rd_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Vrf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Vrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vrf::CopyFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Vrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vrf::IsInitialized() const {
  return true;
}

void Vrf::Swap(Vrf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vrf::InternalSwap(Vrf* other) {
  using std::swap;
  import_rt_.InternalSwap(&other->import_rt_);
  export_rt_.InternalSwap(&other->export_rt_);
  name_.Swap(&other->name_);
  rd_.Swap(&other->rd_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vrf::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Global::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Global::kAsFieldNumber;
const int Global::kRouterIdFieldNumber;
const int Global::kListenPortFieldNumber;
const int Global::kListenAddressesFieldNumber;
const int Global::kFamiliesFieldNumber;
const int Global::kUseMultiplePathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Global::Global()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGlobal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Global)
}
Global::Global(const Global& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      listen_addresses_(from.listen_addresses_),
      families_(from.families_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  router_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.router_id().size() > 0) {
    router_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.router_id_);
  }
  ::memcpy(&as_, &from.as_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_multiple_paths_) -
    reinterpret_cast<char*>(&as_)) + sizeof(use_multiple_paths_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Global)
}

void Global::SharedCtor() {
  router_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_multiple_paths_) -
      reinterpret_cast<char*>(&as_)) + sizeof(use_multiple_paths_));
  _cached_size_ = 0;
}

Global::~Global() {
  // @@protoc_insertion_point(destructor:gobgpapi.Global)
  SharedDtor();
}

void Global::SharedDtor() {
  router_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Global::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Global::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Global& Global::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGlobal();
  return *internal_default_instance();
}

Global* Global::New(::google::protobuf::Arena* arena) const {
  Global* n = new Global;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Global::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Global)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listen_addresses_.Clear();
  families_.Clear();
  router_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_multiple_paths_) -
      reinterpret_cast<char*>(&as_)) + sizeof(use_multiple_paths_));
  _internal_metadata_.Clear();
}

bool Global::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Global)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 as = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string router_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_router_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->router_id().data(), static_cast<int>(this->router_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Global.router_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 listen_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listen_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string listen_addresses = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_listen_addresses()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->listen_addresses(this->listen_addresses_size() - 1).data(),
            static_cast<int>(this->listen_addresses(this->listen_addresses_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Global.listen_addresses"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 families = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_families())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_families())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_multiple_paths = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_multiple_paths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Global)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Global)
  return false;
#undef DO_
}

void Global::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Global)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->as(), output);
  }

  // string router_id = 2;
  if (this->router_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->router_id().data(), static_cast<int>(this->router_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.router_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->router_id(), output);
  }

  // int32 listen_port = 3;
  if (this->listen_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->listen_port(), output);
  }

  // repeated string listen_addresses = 4;
  for (int i = 0, n = this->listen_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->listen_addresses(i).data(), static_cast<int>(this->listen_addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.listen_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->listen_addresses(i), output);
  }

  // repeated uint32 families = 5;
  if (this->families_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _families_cached_byte_size_));
  }
  for (int i = 0, n = this->families_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->families(i), output);
  }

  // bool use_multiple_paths = 6;
  if (this->use_multiple_paths() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_multiple_paths(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.Global)
}

::google::protobuf::uint8* Global::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Global)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->as(), target);
  }

  // string router_id = 2;
  if (this->router_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->router_id().data(), static_cast<int>(this->router_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.router_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->router_id(), target);
  }

  // int32 listen_port = 3;
  if (this->listen_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->listen_port(), target);
  }

  // repeated string listen_addresses = 4;
  for (int i = 0, n = this->listen_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->listen_addresses(i).data(), static_cast<int>(this->listen_addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.listen_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->listen_addresses(i), target);
  }

  // repeated uint32 families = 5;
  if (this->families_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _families_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->families_, target);
  }

  // bool use_multiple_paths = 6;
  if (this->use_multiple_paths() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_multiple_paths(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Global)
  return target;
}

size_t Global::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Global)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string listen_addresses = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->listen_addresses_size());
  for (int i = 0, n = this->listen_addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->listen_addresses(i));
  }

  // repeated uint32 families = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->families_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _families_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string router_id = 2;
  if (this->router_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->router_id());
  }

  // uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->as());
  }

  // int32 listen_port = 3;
  if (this->listen_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->listen_port());
  }

  // bool use_multiple_paths = 6;
  if (this->use_multiple_paths() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Global::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Global)
  GOOGLE_DCHECK_NE(&from, this);
  const Global* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Global>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Global)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Global)
    MergeFrom(*source);
  }
}

void Global::MergeFrom(const Global& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Global)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listen_addresses_.MergeFrom(from.listen_addresses_);
  families_.MergeFrom(from.families_);
  if (from.router_id().size() > 0) {

    router_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.router_id_);
  }
  if (from.as() != 0) {
    set_as(from.as());
  }
  if (from.listen_port() != 0) {
    set_listen_port(from.listen_port());
  }
  if (from.use_multiple_paths() != 0) {
    set_use_multiple_paths(from.use_multiple_paths());
  }
}

void Global::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Global)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global::CopyFrom(const Global& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Global)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global::IsInitialized() const {
  return true;
}

void Global::Swap(Global* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Global::InternalSwap(Global* other) {
  using std::swap;
  listen_addresses_.InternalSwap(&other->listen_addresses_);
  families_.InternalSwap(&other->families_);
  router_id_.Swap(&other->router_id_);
  swap(as_, other->as_);
  swap(listen_port_, other->listen_port_);
  swap(use_multiple_paths_, other->use_multiple_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Global::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableInfo::kTypeFieldNumber;
const int TableInfo::kNameFieldNumber;
const int TableInfo::kFamilyFieldNumber;
const int TableInfo::kNumDestinationFieldNumber;
const int TableInfo::kNumPathFieldNumber;
const int TableInfo::kNumAcceptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableInfo::TableInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsTableInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TableInfo)
}
TableInfo::TableInfo(const TableInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_accepted_) -
    reinterpret_cast<char*>(&type_)) + sizeof(num_accepted_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TableInfo)
}

void TableInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accepted_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_accepted_));
  _cached_size_ = 0;
}

TableInfo::~TableInfo() {
  // @@protoc_insertion_point(destructor:gobgpapi.TableInfo)
  SharedDtor();
}

void TableInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInfo::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableInfo& TableInfo::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsTableInfo();
  return *internal_default_instance();
}

TableInfo* TableInfo::New(::google::protobuf::Arena* arena) const {
  TableInfo* n = new TableInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accepted_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_accepted_));
  _internal_metadata_.Clear();
}

bool TableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.TableInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.Resource type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.TableInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 num_destination = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 num_path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 num_accepted = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.TableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.TableInfo)
  return false;
#undef DO_
}

void TableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.TableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.TableInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family(), output);
  }

  // uint64 num_destination = 4;
  if (this->num_destination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->num_destination(), output);
  }

  // uint64 num_path = 5;
  if (this->num_path() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->num_path(), output);
  }

  // uint64 num_accepted = 6;
  if (this->num_accepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->num_accepted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.TableInfo)
}

::google::protobuf::uint8* TableInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.TableInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family(), target);
  }

  // uint64 num_destination = 4;
  if (this->num_destination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->num_destination(), target);
  }

  // uint64 num_path = 5;
  if (this->num_path() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->num_path(), target);
  }

  // uint64 num_accepted = 6;
  if (this->num_accepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->num_accepted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TableInfo)
  return target;
}

size_t TableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TableInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 family = 3;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // uint64 num_destination = 4;
  if (this->num_destination() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_destination());
  }

  // uint64 num_path = 5;
  if (this->num_path() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_path());
  }

  // uint64 num_accepted = 6;
  if (this->num_accepted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_accepted());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TableInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TableInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TableInfo)
    MergeFrom(*source);
  }
}

void TableInfo::MergeFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.num_destination() != 0) {
    set_num_destination(from.num_destination());
  }
  if (from.num_path() != 0) {
    set_num_path(from.num_path());
  }
  if (from.num_accepted() != 0) {
    set_num_accepted(from.num_accepted());
  }
}

void TableInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfo::CopyFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfo::IsInitialized() const {
  return true;
}

void TableInfo::Swap(TableInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableInfo::InternalSwap(TableInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  swap(family_, other->family_);
  swap(num_destination_, other->num_destination_);
  swap(num_path_, other->num_path_);
  swap(num_accepted_, other->num_accepted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableInfo::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRibInfoRequest::InitAsDefaultInstance() {
  ::gobgpapi::_GetRibInfoRequest_default_instance_._instance.get_mutable()->info_ = const_cast< ::gobgpapi::TableInfo*>(
      ::gobgpapi::TableInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRibInfoRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRibInfoRequest::GetRibInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetRibInfoRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetRibInfoRequest)
}
GetRibInfoRequest::GetRibInfoRequest(const GetRibInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::gobgpapi::TableInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetRibInfoRequest)
}

void GetRibInfoRequest::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

GetRibInfoRequest::~GetRibInfoRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetRibInfoRequest)
  SharedDtor();
}

void GetRibInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void GetRibInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRibInfoRequest::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRibInfoRequest& GetRibInfoRequest::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetRibInfoRequest();
  return *internal_default_instance();
}

GetRibInfoRequest* GetRibInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetRibInfoRequest* n = new GetRibInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRibInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetRibInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool GetRibInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetRibInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.TableInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetRibInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetRibInfoRequest)
  return false;
#undef DO_
}

void GetRibInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetRibInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetRibInfoRequest)
}

::google::protobuf::uint8* GetRibInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetRibInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetRibInfoRequest)
  return target;
}

size_t GetRibInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetRibInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.TableInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRibInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetRibInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRibInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRibInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetRibInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetRibInfoRequest)
    MergeFrom(*source);
  }
}

void GetRibInfoRequest::MergeFrom(const GetRibInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetRibInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::gobgpapi::TableInfo::MergeFrom(from.info());
  }
}

void GetRibInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetRibInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRibInfoRequest::CopyFrom(const GetRibInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetRibInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRibInfoRequest::IsInitialized() const {
  return true;
}

void GetRibInfoRequest::Swap(GetRibInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRibInfoRequest::InternalSwap(GetRibInfoRequest* other) {
  using std::swap;
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRibInfoRequest::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRibInfoResponse::InitAsDefaultInstance() {
  ::gobgpapi::_GetRibInfoResponse_default_instance_._instance.get_mutable()->info_ = const_cast< ::gobgpapi::TableInfo*>(
      ::gobgpapi::TableInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRibInfoResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRibInfoResponse::GetRibInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gobgp_2eproto::InitDefaultsGetRibInfoResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetRibInfoResponse)
}
GetRibInfoResponse::GetRibInfoResponse(const GetRibInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::gobgpapi::TableInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetRibInfoResponse)
}

void GetRibInfoResponse::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

GetRibInfoResponse::~GetRibInfoResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetRibInfoResponse)
  SharedDtor();
}

void GetRibInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void GetRibInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRibInfoResponse::descriptor() {
  ::protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRibInfoResponse& GetRibInfoResponse::default_instance() {
  ::protobuf_gobgp_2eproto::InitDefaultsGetRibInfoResponse();
  return *internal_default_instance();
}

GetRibInfoResponse* GetRibInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetRibInfoResponse* n = new GetRibInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRibInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetRibInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool GetRibInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.GetRibInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gobgpapi.TableInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.GetRibInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.GetRibInfoResponse)
  return false;
#undef DO_
}

void GetRibInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.GetRibInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gobgpapi.GetRibInfoResponse)
}

::google::protobuf::uint8* GetRibInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetRibInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetRibInfoResponse)
  return target;
}

size_t GetRibInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetRibInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gobgpapi.TableInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRibInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetRibInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRibInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRibInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetRibInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetRibInfoResponse)
    MergeFrom(*source);
  }
}

void GetRibInfoResponse::MergeFrom(const GetRibInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetRibInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::gobgpapi::TableInfo::MergeFrom(from.info());
  }
}

void GetRibInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetRibInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRibInfoResponse::CopyFrom(const GetRibInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetRibInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRibInfoResponse::IsInitialized() const {
  return true;
}

void GetRibInfoResponse::Swap(GetRibInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRibInfoResponse::InternalSwap(GetRibInfoResponse* other) {
  using std::swap;
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRibInfoResponse::GetMetadata() const {
  protobuf_gobgp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gobgp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gobgpapi

// @@protoc_insertion_point(global_scope)
